{"version":3,"sources":["webpack://pb/webpack/universalModuleDefinition","webpack://pb/plotboilerplate.js","webpack://pb/webpack/bootstrap","webpack://pb/./src/js/entry.js","webpack://pb/./src/js/VertexAttr.js","webpack://pb/./src/js/VertexListeners.js","webpack://pb/./src/js/Vertex.js","webpack://pb/./src/js/Grid.js","webpack://pb/./src/js/Line.js","webpack://pb/./src/js/Vector.js","webpack://pb/./src/js/CubicBezierCurve.js","webpack://pb/./src/js/BezierPath.js","webpack://pb/./src/js/Polygon.js","webpack://pb/./src/js/Triangle.js","webpack://pb/./src/js/VEllipse.js","webpack://pb/./src/js/PBImage.js","webpack://pb/./src/js/MouseHandler.js","webpack://pb/./src/js/KeyHandler.js","webpack://pb/./src/js/draw.js","webpack://pb/./src/js/PlotBoilerplate.js"],"names":["root","factory","exports","module","define","amd","window","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","VertexAttr","this","draggable","selectable","isSelected","model","VertexListeners","vertex","drag","dragStart","dragEnd","addDragListener","listener","push","addDragStartListener","addDragEndListener","fireDragEvent","e","_fireEvent","fireDragStartEvent","fireDragEndEvent","_self","listeners","ve","params","Vertex","x","y","tuple","NaN","attr","set","setX","setY","invX","invY","add","console","warn","addXY","amountX","amountY","sub","equals","eqX","Math","abs","EPSILON","eqY","result","clone","distance","vert","sqrt","pow","difference","scale","factor","center","rotate","angle","atan2","len","ZERO","cos","sin","multiplyScalar","scalar","round","inv","toString","toSVGString","options","buffer","className","join","randomVertex","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","PI","Grid","size","baseLog","base","num","log","mapRasterScale","adjustFactor","gf","floor","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","_super","Line","a","intersection","line","denominator","numerator1","numerator2","VertTuple","Vector","vertA","vertB","perp","v","inverse","tmp","length","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","translate","amount","reverse","getLength","pointA","pointB","curveStep","tmpLength","newLength","getPointAt","getPointByID","id","Error","getPoint","u","getTangentAt","t2","nt2","tX","tY","getSubCurveAt","tStart","tEnd","startVec","endVec","convertU2T","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","curve","isInstance","obj","toSVGPathData","toJSON","prettyFormat","jsonString","fromJSON","JSON","parse","fromObject","fromArray","arr","isArray","BezierPath","pathPoints","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","point","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaling","uTemp","bCurve","relativeU","uResult","_locateUIndex","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","predecessor","successor","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","bPath","lastCurve","toReducedListRepresentation","digits","_roundToDigits","fromReducedListRepresentation","listJSON","pointArray","bezierPath","enforceInvisibleDigits","magnitude","index","lastIndexOf","digitsAfterPoint","digitsMissing","Polygon","isOpen","containsVert","inside","j","xi","yi","xj","yj","intersect","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","Triangle","calcCircumcircle","getCentroid","scaleToCentroid","centroid","getCircumcircle","radius","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","bounds","xMin","xMax","yMin","yMax","cx","cy","radius_squared","inCircumcircle","dist_squared","minx","min3","miny","maxx","max3","maxy","width","height","toPolygon","determinant","containsPoint","pointIsInTriangle","px","py","p0x","p0y","p1x","p1y","p2x","p2y","area","VEllipse","axis","PBImage","image","upperLeft","lowerRight","XMouseEvent","apply","arguments","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","element","mouseDownPos","mouseDragPos","mousePos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","click","wheel","offsetX","offsetY","eventName","rel","xEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","addEventListener","unlistenFor","removeEventListener","callback","throwAlreadyInstalled","move","up","down","destroy","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","event","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","press","isDown","break","backspace","delete","tab","clear","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","end","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","h","k","q","w","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","next","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","drawutils","context","fillShapes","ctx","offset","beginDrawCycle","color","lineWidth","save","beginPath","moveTo","lineTo","strokeStyle","stroke","restore","arrow","_fillOrDraw","position","drawImage","naturalWidth","naturalHeight","fillStyle","fill","cubicBezier","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","closePath","handle","square","handleLine","dot","arc","circle","ellipse","radiusX","radiusY","rect","grid","sizeX","sizeY","raster","ceil","diamondHandle","squareHandle","circleHandle","crosshair","polygon","polyline","setLineDash","label","text","rotation","fillText","strokeText","fillRect","canvas","Draggable","item","typeName","isVertex","VERTEX","setVIndex","vindex","PlotBoilerplate","config","bezierAutoAdjust","renderTime","fullSize","fetch","val","fitToParent","bool","rasterGrid","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","setToRetina","_setToRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","triangle","vector","document","getElementById","getContext","draw","drawutilsgl","copyInstance","canvasSize","selectPolygon","draggedElements","drawables","hooks","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","SVGBuilder","build","zoom","setConsole","con","error","setCSSscale","drawable","cindex","remove","removeVertex","splice","gScale","gSize","cs","_handleColor","drawDrawables","drawSelectPolygon","Date","getTime","clearSelection","viewport","transformMousePosition","getAvailableContainerSpace","container","parentNode","style","display","padding","parseFloat","getComputedStyle","getPropertyValue","border","pl","pr","pt","pb","bl","br","bt","bb","clientWidth","clientHeight","_setSize","innerWidth","documentElement","body","innerHeight","top","left","space","selectVerticesInPolygon","locatePointNear","tolerance","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","pid","mouseDownHandler","which","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","oldPos","deltaY","newPos","newOffsetX","newOffsetY","preventDefault","relPos_1","offsetLeft","offsetTop","touchMovePos","touchDownPos","draggedElement","Touchy","one","hand","finger","lastPoint","DEFAULT_TOUCH_TOLERANCE","on","points","trans","diff","draggingVertex","fakeEvent","createGUI","safeMergeByKeys","extension","type","transform","fallback"],"mappings":"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","file":"plotboilerplate.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn ","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* Imports for webpack */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__webpack_require__(1);\n// import './extend.js';\n__webpack_require__(2);\n__webpack_require__(3);\n__webpack_require__(4);\n//const Vertex = require('./Vertex.js').default;\n__webpack_require__(5);\n__webpack_require__(6);\n__webpack_require__(7);\n__webpack_require__(8);\n__webpack_require__(9);\n__webpack_require__(10);\n__webpack_require__(11);\n__webpack_require__(12);\n__webpack_require__(13);\n__webpack_require__(14);\n__webpack_require__(15);\n__webpack_require__(16);\n__webpack_require__(17);\n//const PlotBoilerplate = require('./PlotBoilerplate.js').default;\n// import './PlotBoilerplate.RectSelector.js';\n// module.exports = [ Vertex, PlotBoilerplate ];\n//module.exports = PlotBoilerplate; // HelloWorld;\n// export Vertex;\n// const HelloWorld = require('./components/hello-world').default;\n// module.exports = PlotBoilerplate;\n//# sourceMappingURL=entry.js.map\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\nvar _this = this;\n// NOT WORKING\nvar exposeClass = function (classObject) {\n    // console.log( \"exposeClass\", classObject.constructor.name );\n    (function (_context) {\n        console.log(\"exposeClass\", classObject, classObject.constructor);\n        // const exposeClass : string = \"TEST\";\n        _context[classObject.constructor.name] = classObject;\n    })(typeof window !== 'undefined' ? window : _this);\n};\n//# sourceMappingURL=exposeClass.js.map\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false\n    };\n    return VertexAttr;\n}());\n//# sourceMappingURL=VertexAttr.js.map\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        this.drag.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        this.dragStart.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        this.dragEnd.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    return VertexListeners;\n}());\n//# sourceMappingURL=VertexListeners.js.map\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-05-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.3.1\n *\n * @file Vertex\n * @public\n **/\n/*\ntype XYTuple = {\n    x : number;\n    y : number;\n}\n*/\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /*if( x instanceof Vertex ) {\n            this.x = x.x;\n            this.y = x.y;\n            } */\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x = x.x;\n            this.y = x.y;\n        } else {\n            this.x = x;\n            this.y = y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        /*\n        if( typeof x == 'number' ) {\n            this.x += x;\n            if( typeof y == 'number' )\n            this.y += y;\n        } else {\n            this.x += x.x;\n            this.y += x.y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\n//# sourceMappingURL=Vertex.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\n//# sourceMappingURL=Grid.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        return _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple));\n//# sourceMappingURL=Line.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        return _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone(); // .sub( this.a );\n        v.sub(this.a);\n        //return new Vector( new Vertex(), new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        // v.b.y = -v.b.y; // new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means a stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple));\n//# sourceMappingURL=Vector.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @version 2.3.2\n *\n * @file CubicBezierCurve\n * @public\n **/\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {Vertex} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\n//# sourceMappingURL=CubicBezierCurve.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Vertex, CubicBezierCurve\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 2.1.2\n *\n * @file BezierPath\n * @public\n **/\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {Vertex} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        /* return ? */ this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        return this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.prototype.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, // * (neighbourHandleLength/mainHandleLength),\n            neighbourPoint.y - mainHandleBounds.y // * (neighbourHandleLength/mainHandleLength)\n            );\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.prototype.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().y, digits, false));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().y, digits, false));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    /**\n     * A helper function.\n     *\n     * @method _roundToDigits\n     * @param {number} number -\n     * @param {number} digits -\n     * @param {boolean} enforceInvisibleDigits -\n     * @private\n     * @memberof BezierPath\n     * @return {string}\n     **/\n    // !!! TODO: isn't Number.toFixed(...) doing this job???\n    BezierPath._roundToDigits = function (num, digits, enforceInvisibleDigits) {\n        if (digits <= 0)\n            return Math.round(num).toString();\n        var magnitude = Math.pow(10, digits); // This could be LARGE :/\n        num = Math.round(num * magnitude);\n        var result = \"\" + (num / magnitude);\n        var index = result.lastIndexOf(\".\");\n        if (index == -1) {\n            index = result.length;\n        }\n        if (enforceInvisibleDigits) {\n            var digitsAfterPoint = result.length - index - 1;\n            //var digitsMissing : number    = enforceInvisibleDigits - digitsAfterPoint;\n            var digitsMissing = digits - digitsAfterPoint;\n            while (digitsMissing-- > 0)\n                result += \"&nbsp;\";\n        }\n        return result;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\n//# sourceMappingURL=BezierPath.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\n//# sourceMappingURL=Polygon.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon\n *\n * Inspired by Delaunay at Travellermap\n *   http://www.travellermap.com/tmp/delaunay.htm\n *\n * Todo:\n *   + Add and use a proper Bounds class.\n *   + Add and use a proper Circle class.\n *   + Think about the importance of storing the circumcircle data in the Triangle.\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version   2.2.2\n *\n * @file Triangle\n * @public\n **/\nvar Triangle = /** @class */ (function () {\n    /**\n     * Used in the bounds() function.\n     *\n     * @private\n     **/\n    //function max3( a, b, c ) { return ( a >= b && a >= c ) ? a : ( b >= a && b >= c ) ? b : c; }\n    // function min3( a, b, c ) { return ( a <= b && a <= c ) ? a : ( b <= a && b <= c ) ? b : c; }\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    /* function pointIsInTriangle( px, py, p0x, p0y, p1x, p1y, p2x, p2y ) {\n    //\n    // Point-in-Triangle test found at\n    //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n    //\n    var area = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n\n    var s = 1/(2*area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);\n    var t = 1/(2*area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);\n\n    return s > 0 && t > 0 && (1-s-t) > 0;\n    }; */\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return { center: this.center.clone(), radius: this.radius };\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex((bounds.xMin + bounds.xMax) / 2, (bounds.yMin + bounds.yMax) / 2);\n            dx = this.center.x - bounds.xMin;\n            dy = this.center.y - bounds.yMin;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Object} - { xMin:float, xMax:float, yMin:float, yMax:float, width:float, height:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        var minx = Triangle.utils.min3(this.a.x, this.b.x, this.c.x);\n        var miny = Triangle.utils.min3(this.a.y, this.b.y, this.c.y);\n        var maxx = Triangle.utils.max3(this.a.x, this.b.x, this.c.x);\n        var maxy = Triangle.utils.max3(this.a.y, this.b.y, this.c.y);\n        return { xMin: minx, yMin: miny, xMax: maxx, yMax: maxy, width: maxx - minx, height: maxy - miny };\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\n//# sourceMappingURL=Triangle.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\n//# sourceMappingURL=VEllipse.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\n//# sourceMappingURL=PBImage.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports) {\n\n/**\n * A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * Usage:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up.' );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.9\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nvar MouseHandler = /** @class */ (function () {\n    // private wheelHandlers  : Record<string,(e:XWheelEvent)=>void> = {};\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element) {\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        // private wheelListeners : Record<string,(e:XWheelEvent)=>void> = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = null;\n            _self.mouseDownPos = null;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        this.element.addEventListener(eventName, this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        this.element.removeEventListener(eventName, this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n    };\n    return MouseHandler;\n}());\n//# sourceMappingURL=MouseHandler.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n/**\n * A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n **/\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // For later retrieval\n        // this._keyDownListener = null;\n        // this._keyPressListener = null;\n        // this._keyUpListener = null;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        'delete': 8,\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        // 'delete'\t : 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\n//# sourceMappingURL=KeyHandler.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.5.3\n **/\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        // center to right\n        var x = 0;\n        while (x < width / 2) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y - (center.y - height * 0.5) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y - (center.y + height * 0.5) * this.scale.y);\n            x += sizeX;\n        }\n        x = sizeX;\n        while (x < width / 2) {\n            this.ctx.moveTo(this.offset.x + (center.x - x) * this.scale.x, this.offset.y - (center.y - height * 0.5) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x - x) * this.scale.x, this.offset.y - (center.y + height * 0.5) * this.scale.y);\n            x += sizeX;\n        }\n        var y = 0;\n        while (y < height / 2) {\n            this.ctx.moveTo(this.offset.x - (center.x - width * 0.5) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x - (center.x + width * 0.5) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y);\n            y += sizeY;\n        }\n        var y = sizeY;\n        while (y < height / 2) {\n            this.ctx.moveTo(this.offset.x - (center.x - width * 0.5) * this.scale.x, this.offset.y + (center.y - y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x - (center.x + width * 0.5) * this.scale.x, this.offset.y + (center.y - y) * this.scale.y);\n            y += sizeY;\n        }\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, size, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=black} color - The color to render the text with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\n//# sourceMappingURL=draw.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @version  1.7.2\n *\n * @file PlotBoilerplate\n * @public\n **/\n//import { GUI } from \"dat.gui\";\n// import { saveAs } from 'file-saver';\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nvar Draggable = /** @class */ (function () {\n    function Draggable(item, typeName) {\n        this.item = item;\n        this.typeName = typeName;\n        //this.vindex = null;\n        //this.pindex = null;\n        //this.cindex = null;\n    }\n    ;\n    Draggable.prototype.isVertex = function () { return this.typeName == Draggable.VERTEX; };\n    ;\n    Draggable.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n    ;\n    Draggable.VERTEX = 'vertex';\n    return Draggable;\n}());\n/**\n * The main class.\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // config = config || {};\n        // This should be in some static block ...\n        VertexAttr.model = { bezierAutoAdjust: false, renderTime: 0, selectable: true, isSelected: false, draggable: true };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        // +---------------------------------------------------------------------------------\n        // | A global config that's attached to the dat.gui control interface.\n        // +-------------------------------\n        /**\n         * A config.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            // drawGrid              : PlotBoilerplate.utils.fetch.bool(config,'drawGrid',true),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            // rebuild               : function() { rebuild(); },\n            saveFile: function () { _self.saveFile(); },\n            setToRetina: function () { _self._setToRetina(); },\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            //drawBezierHandleLines : PlotBoilerplate.utils.fetch.bool(config,'drawBezierHandleLines',true),\n            //drawBezierHandlePoints : PlotBoilerplate.utils.fetch.bool(config,'drawBezierHandlePoints',true),\n            // drawHandleLines       : PlotBoilerplate.utils.fetch.bool(config,'drawHandleLines',true),\n            // drawHandlePoints      : PlotBoilerplate.utils.fetch.bool(config,'drawHandlePoints',true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            //drawHandleLines : true,\n            //drawHandlePoints: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.getElementById(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            this.draw = new drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new drawutils(this.ctx, false);\n            this.fill = new drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            saveFile: this._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for 'global', too!\n        if (window)\n            window.addEventListener('resize', this.resizeCanvas);\n        this.resizeCanvas();\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype._saveFile = function () {\n        var _self = this; // Does this work with self?\n        var svgCode = new SVGBuilder().build(_self.drawables, { canvasSize: _self.canvasSize, offset: _self.draw.offset, zoom: _self.draw.scale });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        //var blob:Blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" } );\n        //saveAs(blob, \"plot-boilerplate.svg\");\n        // TODO\n        console.warn(\"Sorry, the typescript version does not yet saveFile again. Coming back soon.\");\n    };\n    ;\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.cssScaleX = this.config.cssScaleY = 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = 2.0;\n        //this.config.fullSize = false;\n        this.config.fitToParent = false;\n        this.resizeCanvas();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        if (typeof con.log != 'function')\n            throw \"Console object must have a 'log' function.\";\n        if (typeof con.warn != 'function')\n            throw \"Console object must have a 'warn' function.\";\n        if (typeof con.error != 'function')\n            throw \"Console object must have a 'error' function.\";\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            // for( var i in bezierPath.bezierCurves ) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            // for( var i in drawable.bezierCurves ) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartPoint(e.params.vertex);\n                    drawable.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    drawable.moveCurvePoint(cindex * 1, drawable.START_POINT, new Vertex(e.params.dragAmount) // TODO: change the signature of moveCurvePoint to (,XYCoords...)     \n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[(cindex) % drawable.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                if (i + 1 > bezierPath.bezierCurves.length) {\n                    // Move last control point with the end point (if not circular)\n                    drawable.bezierCurves[drawable.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!drawable.adjustCircular) {\n                            var cindex = drawable.locateCurveByEndPoint(e.params.vertex);\n                            drawable.moveCurvePoint(cindex * 1, drawable.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x / 2, y: e.params.dragAmount.y / 2 }));\n                        }\n                        drawable.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type.\"; // : \" + drawable.constructor.name;\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw) {\n        if (drawable instanceof Vertex)\n            this.removeVertex(drawable, false);\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = { x: Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x),\n            y: Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.draggable ? color : 'rgba(128,128,128,0.5)';\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        // Draw drawables\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, 'orange'));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, 'orange'));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 7, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 7, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices)\n                        d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable)) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable) {\n                    this.draw.circleHandle(d.b, 7, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 7, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime) {\n                this.draw.squareHandle(this.vertices[i], 5, this.vertices[i].attr.isSelected ? 'rgba(192,128,0)' : this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that the image might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return { min: this.transformMousePosition(0, 0),\n            max: this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY)\n        };\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile();\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        // console.log( 'w', w, 'h', h, 'border', border, 'padding', padding, pl, pr, pt, pb, bl, br, bt, bb );\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = width + 'px';\n            _self.canvas.style.height = height + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace(); //  _self.canvas.parentNode );\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {Draggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new Draggable(vert, Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {object} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new Draggable(_self.vertices[i], Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('ctrl') || this.keyHandler.isDown('spacebar')) {\n            _self.draw.offset.add(e.params.dragAmount);\n            _self.fill.offset.set(_self.draw.offset);\n            _self.config.offsetX = _self.draw.offset.x;\n            _self.config.offsetY = _self.draw.offset.y;\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        var oldPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        if (we.deltaY < 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = _self.config.scaleX * zoomStep;\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = _self.config.scaleY * zoomStep;\n        }\n        else if (we.deltaY > 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = Math.max(_self.config.scaleX / zoomStep, 0.01);\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = Math.max(_self.config.scaleY / zoomStep, 0.01);\n        }\n        var newPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        // Apply relative positioned zoom\n        var newOffsetX = _self.draw.offset.x + (newPos.x - oldPos.x) * _self.draw.scale.x;\n        var newOffsetY = _self.draw.offset.y + (newPos.y - oldPos.y) * _self.draw.scale.y;\n        _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = newOffsetX;\n        _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = newOffsetY;\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            if (!window[\"Touchy\"] || typeof window[\"Touchy\"] != \"function\") {\n                console.warn(\"Cannot initialize the touch handler. Touchy is missig. Did you include it?\");\n            }\n            else {\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n                var relPos_1 = function (pos) {\n                    return { x: pos.x - _self.canvas.offsetLeft,\n                        y: pos.y - _self.canvas.offsetTop\n                    };\n                };\n                // Some private vars to store the current mouse/position/button state.\n                var touchMovePos = null;\n                var touchDownPos = null;\n                var draggedElement = null;\n                // TODO\n                // ERROR, THIS DOES NOT COMPILE WITH TYPESCRIPT.\n                var Touchy = (window[\"Touchy\"]);\n                new Touchy(this.canvas, { one: function (hand, finger) {\n                        touchMovePos = new Vertex(relPos_1(finger.lastPoint));\n                        touchDownPos = new Vertex(relPos_1(finger.lastPoint));\n                        draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                        if (draggedElement) {\n                            // The Touchy-points also have 'id' and 'time' attributes\n                            // which we are not interested in here.\n                            hand.on('move', function (points) {\n                                var rel = relPos_1(points[0]);\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            });\n                        }\n                    }\n                });\n            } // END else\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            // var keyHandler : KeyHandler = new KeyHandler( { trackAll : true } )\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            })\n                .down('e', function () { _self.console.log('e was hit. shift is pressed?', this.keyHandler.isDown('shift')); });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    // }; // END construcor 'PlotBoilerplate'\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in base) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                var type = typeof base[k];\n                try {\n                    if (type == 'boolean')\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (type == 'number')\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (type == 'function' && typeof extension[k] == 'function')\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error('error in key ', k, extension[k], e);\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'number')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'boolean')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        } // END fetch\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\n// const test : PlotBoilerplate = new PlotBoilerplate( ({} as unknown) as Config );\n//exposeClass(PlotBoilerplate);\n//getGlobal()[\"PlotBoilerplate\"] = PlotBoilerplate;\n// NOT WORKING\n// console.log( \"exposeClass\", classObject.constructor.name );\n/* ((_context:any) => {\n    // console.log( \"exposeClass\", classObject, classObject.constructor );\n    // const exposeClass : string = \"TEST\";\n    console.log('Expose plotboilerplate');\n    _context.PlotBoilerplate = PlotBoilerplate;\n})(typeof window !== 'undefined' ? window : this);\n*/\n// ((window || globalThis) as any)[\"PlotBoilerplate\"] = PlotBoilerplate;\n// console.log('test');\n// (window as any).PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map\n\n/***/ })\n/******/ ]);\n});"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","\"use strict\";\n/* Imports for webpack */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"./exposeClass.js\");\n// import './extend.js';\nrequire(\"./VertexAttr.js\");\nrequire(\"./VertexListeners.js\");\nrequire(\"./Vertex.js\");\n//const Vertex = require('./Vertex.js').default;\nrequire(\"./Grid.js\");\nrequire(\"./Line.js\");\nrequire(\"./Vector.js\");\nrequire(\"./CubicBezierCurve.js\");\nrequire(\"./BezierPath.js\");\nrequire(\"./Polygon.js\");\nrequire(\"./Triangle.js\");\nrequire(\"./VEllipse.js\");\nrequire(\"./PBImage.js\");\nrequire(\"./MouseHandler.js\");\nrequire(\"./KeyHandler.js\");\nrequire(\"./draw.js\");\nrequire(\"./PlotBoilerplate.js\");\n//const PlotBoilerplate = require('./PlotBoilerplate.js').default;\n// import './PlotBoilerplate.RectSelector.js';\n// module.exports = [ Vertex, PlotBoilerplate ];\n//module.exports = PlotBoilerplate; // HelloWorld;\n// export Vertex;\n// const HelloWorld = require('./components/hello-world').default;\n// module.exports = PlotBoilerplate;\n//# sourceMappingURL=entry.js.map","/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false\n    };\n    return VertexAttr;\n}());\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        this.drag.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        this.dragStart.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        this.dragEnd.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    return VertexListeners;\n}());\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-05-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.3.1\n *\n * @file Vertex\n * @public\n **/\n/*\ntype XYTuple = {\n    x : number;\n    y : number;\n}\n*/\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /*if( x instanceof Vertex ) {\n            this.x = x.x;\n            this.y = x.y;\n            } */\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x = x.x;\n            this.y = x.y;\n        } else {\n            this.x = x;\n            this.y = y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        /*\n        if( typeof x == 'number' ) {\n            this.x += x;\n            if( typeof y == 'number' )\n            this.y += y;\n        } else {\n            this.x += x.x;\n            this.y += x.y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\n//# sourceMappingURL=Vertex.js.map","/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\n//# sourceMappingURL=Grid.js.map","/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        return _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple));\n//# sourceMappingURL=Line.js.map","/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        return _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone(); // .sub( this.a );\n        v.sub(this.a);\n        //return new Vector( new Vertex(), new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        // v.b.y = -v.b.y; // new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means a stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple));\n//# sourceMappingURL=Vector.js.map","/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @version 2.3.2\n *\n * @file CubicBezierCurve\n * @public\n **/\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {Vertex} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Vertex, CubicBezierCurve\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 2.1.2\n *\n * @file BezierPath\n * @public\n **/\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {Vertex} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        /* return ? */ this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        return this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.prototype.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, // * (neighbourHandleLength/mainHandleLength),\n            neighbourPoint.y - mainHandleBounds.y // * (neighbourHandleLength/mainHandleLength)\n            );\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.prototype.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().y, digits, false));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().y, digits, false));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    /**\n     * A helper function.\n     *\n     * @method _roundToDigits\n     * @param {number} number -\n     * @param {number} digits -\n     * @param {boolean} enforceInvisibleDigits -\n     * @private\n     * @memberof BezierPath\n     * @return {string}\n     **/\n    // !!! TODO: isn't Number.toFixed(...) doing this job???\n    BezierPath._roundToDigits = function (num, digits, enforceInvisibleDigits) {\n        if (digits <= 0)\n            return Math.round(num).toString();\n        var magnitude = Math.pow(10, digits); // This could be LARGE :/\n        num = Math.round(num * magnitude);\n        var result = \"\" + (num / magnitude);\n        var index = result.lastIndexOf(\".\");\n        if (index == -1) {\n            index = result.length;\n        }\n        if (enforceInvisibleDigits) {\n            var digitsAfterPoint = result.length - index - 1;\n            //var digitsMissing : number    = enforceInvisibleDigits - digitsAfterPoint;\n            var digitsMissing = digits - digitsAfterPoint;\n            while (digitsMissing-- > 0)\n                result += \"&nbsp;\";\n        }\n        return result;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\n//# sourceMappingURL=BezierPath.js.map","/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\n//# sourceMappingURL=Polygon.js.map","/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon\n *\n * Inspired by Delaunay at Travellermap\n *   http://www.travellermap.com/tmp/delaunay.htm\n *\n * Todo:\n *   + Add and use a proper Bounds class.\n *   + Add and use a proper Circle class.\n *   + Think about the importance of storing the circumcircle data in the Triangle.\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version   2.2.2\n *\n * @file Triangle\n * @public\n **/\nvar Triangle = /** @class */ (function () {\n    /**\n     * Used in the bounds() function.\n     *\n     * @private\n     **/\n    //function max3( a, b, c ) { return ( a >= b && a >= c ) ? a : ( b >= a && b >= c ) ? b : c; }\n    // function min3( a, b, c ) { return ( a <= b && a <= c ) ? a : ( b <= a && b <= c ) ? b : c; }\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    /* function pointIsInTriangle( px, py, p0x, p0y, p1x, p1y, p2x, p2y ) {\n    //\n    // Point-in-Triangle test found at\n    //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n    //\n    var area = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n\n    var s = 1/(2*area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);\n    var t = 1/(2*area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);\n\n    return s > 0 && t > 0 && (1-s-t) > 0;\n    }; */\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return { center: this.center.clone(), radius: this.radius };\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex((bounds.xMin + bounds.xMax) / 2, (bounds.yMin + bounds.yMax) / 2);\n            dx = this.center.x - bounds.xMin;\n            dy = this.center.y - bounds.yMin;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Object} - { xMin:float, xMax:float, yMin:float, yMax:float, width:float, height:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        var minx = Triangle.utils.min3(this.a.x, this.b.x, this.c.x);\n        var miny = Triangle.utils.min3(this.a.y, this.b.y, this.c.y);\n        var maxx = Triangle.utils.max3(this.a.x, this.b.x, this.c.x);\n        var maxy = Triangle.utils.max3(this.a.y, this.b.y, this.c.y);\n        return { xMin: minx, yMin: miny, xMax: maxx, yMax: maxy, width: maxx - minx, height: maxy - miny };\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\n//# sourceMappingURL=Triangle.js.map","/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\n//# sourceMappingURL=VEllipse.js.map","/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\n//# sourceMappingURL=PBImage.js.map","/**\n * A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * Usage:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up.' );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.9\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nvar MouseHandler = /** @class */ (function () {\n    // private wheelHandlers  : Record<string,(e:XWheelEvent)=>void> = {};\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element) {\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        // private wheelListeners : Record<string,(e:XWheelEvent)=>void> = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = null;\n            _self.mouseDownPos = null;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        this.element.addEventListener(eventName, this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        this.element.removeEventListener(eventName, this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n    };\n    return MouseHandler;\n}());\n//# sourceMappingURL=MouseHandler.js.map","/**\n * A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n **/\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // For later retrieval\n        // this._keyDownListener = null;\n        // this._keyPressListener = null;\n        // this._keyUpListener = null;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        'delete': 8,\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        // 'delete'\t : 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\n//# sourceMappingURL=KeyHandler.js.map","/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.5.3\n **/\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        // center to right\n        var x = 0;\n        while (x < width / 2) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y - (center.y - height * 0.5) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y - (center.y + height * 0.5) * this.scale.y);\n            x += sizeX;\n        }\n        x = sizeX;\n        while (x < width / 2) {\n            this.ctx.moveTo(this.offset.x + (center.x - x) * this.scale.x, this.offset.y - (center.y - height * 0.5) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x - x) * this.scale.x, this.offset.y - (center.y + height * 0.5) * this.scale.y);\n            x += sizeX;\n        }\n        var y = 0;\n        while (y < height / 2) {\n            this.ctx.moveTo(this.offset.x - (center.x - width * 0.5) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x - (center.x + width * 0.5) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y);\n            y += sizeY;\n        }\n        var y = sizeY;\n        while (y < height / 2) {\n            this.ctx.moveTo(this.offset.x - (center.x - width * 0.5) * this.scale.x, this.offset.y + (center.y - y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x - (center.x + width * 0.5) * this.scale.x, this.offset.y + (center.y - y) * this.scale.y);\n            y += sizeY;\n        }\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, size, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=black} color - The color to render the text with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\n//# sourceMappingURL=draw.js.map","/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @version  1.7.2\n *\n * @file PlotBoilerplate\n * @public\n **/\n//import { GUI } from \"dat.gui\";\n// import { saveAs } from 'file-saver';\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nvar Draggable = /** @class */ (function () {\n    function Draggable(item, typeName) {\n        this.item = item;\n        this.typeName = typeName;\n        //this.vindex = null;\n        //this.pindex = null;\n        //this.cindex = null;\n    }\n    ;\n    Draggable.prototype.isVertex = function () { return this.typeName == Draggable.VERTEX; };\n    ;\n    Draggable.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n    ;\n    Draggable.VERTEX = 'vertex';\n    return Draggable;\n}());\n/**\n * The main class.\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // config = config || {};\n        // This should be in some static block ...\n        VertexAttr.model = { bezierAutoAdjust: false, renderTime: 0, selectable: true, isSelected: false, draggable: true };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        // +---------------------------------------------------------------------------------\n        // | A global config that's attached to the dat.gui control interface.\n        // +-------------------------------\n        /**\n         * A config.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            // drawGrid              : PlotBoilerplate.utils.fetch.bool(config,'drawGrid',true),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            // rebuild               : function() { rebuild(); },\n            saveFile: function () { _self.saveFile(); },\n            setToRetina: function () { _self._setToRetina(); },\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            //drawBezierHandleLines : PlotBoilerplate.utils.fetch.bool(config,'drawBezierHandleLines',true),\n            //drawBezierHandlePoints : PlotBoilerplate.utils.fetch.bool(config,'drawBezierHandlePoints',true),\n            // drawHandleLines       : PlotBoilerplate.utils.fetch.bool(config,'drawHandleLines',true),\n            // drawHandlePoints      : PlotBoilerplate.utils.fetch.bool(config,'drawHandlePoints',true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            //drawHandleLines : true,\n            //drawHandlePoints: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.getElementById(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            this.draw = new drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new drawutils(this.ctx, false);\n            this.fill = new drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            saveFile: this._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for 'global', too!\n        if (window)\n            window.addEventListener('resize', this.resizeCanvas);\n        this.resizeCanvas();\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype._saveFile = function () {\n        var _self = this; // Does this work with self?\n        var svgCode = new SVGBuilder().build(_self.drawables, { canvasSize: _self.canvasSize, offset: _self.draw.offset, zoom: _self.draw.scale });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        //var blob:Blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" } );\n        //saveAs(blob, \"plot-boilerplate.svg\");\n        // TODO\n        console.warn(\"Sorry, the typescript version does not yet saveFile again. Coming back soon.\");\n    };\n    ;\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.cssScaleX = this.config.cssScaleY = 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = 2.0;\n        //this.config.fullSize = false;\n        this.config.fitToParent = false;\n        this.resizeCanvas();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        if (typeof con.log != 'function')\n            throw \"Console object must have a 'log' function.\";\n        if (typeof con.warn != 'function')\n            throw \"Console object must have a 'warn' function.\";\n        if (typeof con.error != 'function')\n            throw \"Console object must have a 'error' function.\";\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            // for( var i in bezierPath.bezierCurves ) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            // for( var i in drawable.bezierCurves ) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartPoint(e.params.vertex);\n                    drawable.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    drawable.moveCurvePoint(cindex * 1, drawable.START_POINT, new Vertex(e.params.dragAmount) // TODO: change the signature of moveCurvePoint to (,XYCoords...)     \n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[(cindex) % drawable.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                if (i + 1 > bezierPath.bezierCurves.length) {\n                    // Move last control point with the end point (if not circular)\n                    drawable.bezierCurves[drawable.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!drawable.adjustCircular) {\n                            var cindex = drawable.locateCurveByEndPoint(e.params.vertex);\n                            drawable.moveCurvePoint(cindex * 1, drawable.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x / 2, y: e.params.dragAmount.y / 2 }));\n                        }\n                        drawable.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type.\"; // : \" + drawable.constructor.name;\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw) {\n        if (drawable instanceof Vertex)\n            this.removeVertex(drawable, false);\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = { x: Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x),\n            y: Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.draggable ? color : 'rgba(128,128,128,0.5)';\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        // Draw drawables\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, 'orange'));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, 'orange'));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 7, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 7, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices)\n                        d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable)) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable) {\n                    this.draw.circleHandle(d.b, 7, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 7, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime) {\n                this.draw.squareHandle(this.vertices[i], 5, this.vertices[i].attr.isSelected ? 'rgba(192,128,0)' : this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that the image might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return { min: this.transformMousePosition(0, 0),\n            max: this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY)\n        };\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile();\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        // console.log( 'w', w, 'h', h, 'border', border, 'padding', padding, pl, pr, pt, pb, bl, br, bt, bb );\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = width + 'px';\n            _self.canvas.style.height = height + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace(); //  _self.canvas.parentNode );\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {Draggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new Draggable(vert, Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {object} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new Draggable(_self.vertices[i], Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('ctrl') || this.keyHandler.isDown('spacebar')) {\n            _self.draw.offset.add(e.params.dragAmount);\n            _self.fill.offset.set(_self.draw.offset);\n            _self.config.offsetX = _self.draw.offset.x;\n            _self.config.offsetY = _self.draw.offset.y;\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        var oldPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        if (we.deltaY < 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = _self.config.scaleX * zoomStep;\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = _self.config.scaleY * zoomStep;\n        }\n        else if (we.deltaY > 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = Math.max(_self.config.scaleX / zoomStep, 0.01);\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = Math.max(_self.config.scaleY / zoomStep, 0.01);\n        }\n        var newPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        // Apply relative positioned zoom\n        var newOffsetX = _self.draw.offset.x + (newPos.x - oldPos.x) * _self.draw.scale.x;\n        var newOffsetY = _self.draw.offset.y + (newPos.y - oldPos.y) * _self.draw.scale.y;\n        _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = newOffsetX;\n        _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = newOffsetY;\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            if (!window[\"Touchy\"] || typeof window[\"Touchy\"] != \"function\") {\n                console.warn(\"Cannot initialize the touch handler. Touchy is missig. Did you include it?\");\n            }\n            else {\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n                var relPos_1 = function (pos) {\n                    return { x: pos.x - _self.canvas.offsetLeft,\n                        y: pos.y - _self.canvas.offsetTop\n                    };\n                };\n                // Some private vars to store the current mouse/position/button state.\n                var touchMovePos = null;\n                var touchDownPos = null;\n                var draggedElement = null;\n                // TODO\n                // ERROR, THIS DOES NOT COMPILE WITH TYPESCRIPT.\n                var Touchy = (window[\"Touchy\"]);\n                new Touchy(this.canvas, { one: function (hand, finger) {\n                        touchMovePos = new Vertex(relPos_1(finger.lastPoint));\n                        touchDownPos = new Vertex(relPos_1(finger.lastPoint));\n                        draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                        if (draggedElement) {\n                            // The Touchy-points also have 'id' and 'time' attributes\n                            // which we are not interested in here.\n                            hand.on('move', function (points) {\n                                var rel = relPos_1(points[0]);\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            });\n                        }\n                    }\n                });\n            } // END else\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            // var keyHandler : KeyHandler = new KeyHandler( { trackAll : true } )\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            })\n                .down('e', function () { _self.console.log('e was hit. shift is pressed?', this.keyHandler.isDown('shift')); });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    // }; // END construcor 'PlotBoilerplate'\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in base) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                var type = typeof base[k];\n                try {\n                    if (type == 'boolean')\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (type == 'number')\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (type == 'function' && typeof extension[k] == 'function')\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error('error in key ', k, extension[k], e);\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'number')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'boolean')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        } // END fetch\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\n// const test : PlotBoilerplate = new PlotBoilerplate( ({} as unknown) as Config );\n//exposeClass(PlotBoilerplate);\n//getGlobal()[\"PlotBoilerplate\"] = PlotBoilerplate;\n// NOT WORKING\n// console.log( \"exposeClass\", classObject.constructor.name );\n/* ((_context:any) => {\n    // console.log( \"exposeClass\", classObject, classObject.constructor );\n    // const exposeClass : string = \"TEST\";\n    console.log('Expose plotboilerplate');\n    _context.PlotBoilerplate = PlotBoilerplate;\n})(typeof window !== 'undefined' ? window : this);\n*/\n// ((window || globalThis) as any)[\"PlotBoilerplate\"] = PlotBoilerplate;\n// console.log('test');\n// (window as any).PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map"],"sourceRoot":""}