{"version":3,"sources":["webpack://pb/webpack/universalModuleDefinition","webpack://pb/plotboilerplate.min.js","webpack://pb/webpack/bootstrap","webpack://pb/./src/js/Vertex.js","webpack://pb/./src/js/VertexAttr.js","webpack://pb/./src/js/Vector.js","webpack://pb/./src/js/CubicBezierCurve.js","webpack://pb/./src/js/BezierPath.js","webpack://pb/./src/js/Polygon.js","webpack://pb/./src/js/VertexListeners.js","webpack://pb/./src/js/Grid.js","webpack://pb/./src/js/Line.js","webpack://pb/./src/js/VertTuple.js","webpack://pb/./src/js/Triangle.js","webpack://pb/./src/js/VEllipse.js","webpack://pb/./src/js/PBImage.js","webpack://pb/./src/js/MouseHandler.js","webpack://pb/./src/js/KeyHandler.js","webpack://pb/./src/js/draw.js","webpack://pb/./src/js/drawgl.js","webpack://pb/./src/js/entry.js","webpack://pb/./src/js/PlotBoilerplate.js","webpack://pb/./src/js/SVGBuilder.js"],"names":["root","factory","exports","module","define","amd","window","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","VertexAttr_1","VertexListeners_1","Vertex","x","y","this","className","tuple","NaN","attr","VertexAttr","listeners","VertexListeners","set","setX","setY","invX","invY","add","console","warn","addXY","amountX","amountY","sub","equals","vertex","eqX","Math","abs","EPSILON","eqY","result","clone","distance","vert","sqrt","pow","difference","scale","factor","center","rotate","angle","atan2","len","ZERO","cos","sin","multiplyScalar","scalar","round","inv","toString","toSVGString","options","buffer","push","join","randomVertex","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","PI","draggable","selectable","isSelected","model","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","VertTuple_1","Vertex_1","Vector","_super","vertA","vertB","_this","a","perp","v","inverse","tmp","intersection","line","denominator","numerator1","numerator2","length","VertTuple","Vector_1","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","log","translate","amount","reverse","getLength","pointA","pointB","curveStep","tmpLength","newLength","getPointAt","getPointByID","id","Error","getPoint","u","getTangentAt","t2","nt2","tX","tY","getSubCurveAt","tStart","tEnd","startVec","endVec","convertU2T","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","curve","isInstance","obj","toSVGPathData","toJSON","prettyFormat","jsonString","fromJSON","JSON","parse","fromObject","fromArray","arr","isArray","CubicBezierCurve_1","BezierPath","pathPoints","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","point","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaling","uTemp","bCurve","relativeU","uResult","_locateUIndex","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","predecessor","successor","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","bPath","lastCurve","toReducedListRepresentation","digits","_roundToDigits","fromReducedListRepresentation","listJSON","pointArray","bezierPath","num","enforceInvisibleDigits","magnitude","index","lastIndexOf","digitsAfterPoint","digitsMissing","BezierPath_1","Polygon","isOpen","containsVert","inside","j","xi","yi","xj","yj","intersect","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","drag","dragStart","dragEnd","addDragListener","listener","addDragStartListener","addDragEndListener","fireDragEvent","e","_fireEvent","fireDragStartEvent","fireDragEndEvent","_self","ve","params","Grid","size","baseLog","base","mapRasterScale","adjustFactor","gf","floor","Line","setLength","normalize","moveTo","newA","diff","v0","v1","vertAt","colinear","getClosestT","l2","vtutils","dist2","pointDistance","w","distToSegmentSquared","getClosestLineT","Polygon_1","Triangle","calcCircumcircle","getCentroid","scaleToCentroid","centroid","getCircumcircle","radius","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","bounds","xMin","xMax","yMin","yMax","cx","cy","radius_squared","inCircumcircle","dist_squared","minx","min3","miny","maxx","max3","maxy","width","height","toPolygon","determinant","containsPoint","pointIsInTriangle","px","py","p0x","p0y","p1x","p1y","p2x","p2y","area","VEllipse","axis","PBImage","image","upperLeft","lowerRight","XMouseEvent","apply","arguments","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","element","mouseDownPos","undefined","mouseDragPos","mousePos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","click","wheel","addEventListener","offsetX","offsetY","eventName","rel","xEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","move","up","down","destroy","removeEventListener","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","event","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","press","isDown","break","backspace","delete","tab","clear","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","end","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","h","k","q","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","next","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","drawutils","context","fillShapes","ctx","offset","beginDrawCycle","color","lineWidth","save","beginPath","lineTo","strokeStyle","stroke","restore","arrow","_fillOrDraw","position","drawImage","naturalWidth","naturalHeight","fillStyle","fill","cubicBezier","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","closePath","handle","square","handleLine","dot","arc","circle","ellipse","radiusX","radiusY","rect","grid","sizeX","sizeY","ceil","raster","diamondHandle","squareHandle","circleHandle","crosshair","polygon","polyline","setLineDash","label","text","rotation","fillText","strokeText","fillRect","canvas","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","copyInstance","copy","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","currentRotation","uniform2fv","drawArrays","LINES","cubicBezierCurveHandleLines","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","vertStatus","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","PlotBoilerplate","draw_1","drawgl_1","Grid_1","KeyHandler_1","Line_1","MouseHandler_1","PBImage_1","SVGBuilder_1","Triangle_1","VEllipse_1","Draggable","item","typeName","isVertex","VERTEX","setVIndex","vindex","config","bezierAutoAdjust","renderTime","fullSize","fetch","val","fitToParent","bool","rasterGrid","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","triangle","vector","document","getElementById","getContext","draw","canvasSize","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","svgCode","SVGBuilder","build","zoom","blob","Blob","type","saveAs","setConsole","con","error","setCSSscale","drawable","cindex","remove","removeVertex","splice","gScale","gSize","cs","_handleColor","drawDrawables","drawSelectPolygon","Date","getTime","clearSelection","transformMousePosition","getAvailableContainerSpace","container","parentNode","style","display","padding","parseFloat","getComputedStyle","getPropertyValue","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_setSize","innerWidth","documentElement","body","innerHeight","top","left","space","selectVerticesInPolygon","locatePointNear","tolerance","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","pid","mouseDownHandler","which","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","oldPos","deltaY","newPos","newOffsetX","newOffsetY","preventDefault","relPos_1","offsetLeft","offsetTop","touchMovePos","touchDownPos","draggedElement","Touchy","one","hand","finger","lastPoint","DEFAULT_TOUCH_TOLERANCE","on","points","trans","draggingVertex","fakeEvent","createGUI","safeMergeByKeys","extension","transform","fallback","nl","indent"],"mappings":"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","file":"plotboilerplate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn ","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 17);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-05-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.3.1\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr_1 = __webpack_require__(1);\nvar VertexListeners_1 = __webpack_require__(6);\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        /*if( x instanceof Vertex ) {\n            this.x = x.x;\n            this.y = x.y;\n            } */\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x = x.x;\n            this.y = x.y;\n        } else {\n            this.x = x;\n            this.y = y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        /*\n        if( typeof x == 'number' ) {\n            this.x += x;\n            if( typeof y == 'number' )\n            this.y += y;\n        } else {\n            this.x += x.x;\n            this.y += x.y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = __webpack_require__(9);\nvar Vertex_1 = __webpack_require__(0);\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone(); // .sub( this.a );\n        v.sub(this.a);\n        //return new Vector( new Vertex(), new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        // v.b.y = -v.b.y; // new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means a stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @version 2.3.2\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = __webpack_require__(0);\nvar Vector_1 = __webpack_require__(2);\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {Vertex} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex_1.Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Vertex, CubicBezierCurve\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 2.1.2\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = __webpack_require__(3);\nvar Vertex_1 = __webpack_require__(0);\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {Vertex} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        /* return ? */ this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        return this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.prototype.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, // * (neighbourHandleLength/mainHandleLength),\n            neighbourPoint.y - mainHandleBounds.y // * (neighbourHandleLength/mainHandleLength)\n            );\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.prototype.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().y, digits, false));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().y, digits, false));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    /**\n     * A helper function.\n     *\n     * @method _roundToDigits\n     * @param {number} number -\n     * @param {number} digits -\n     * @param {boolean} enforceInvisibleDigits -\n     * @private\n     * @memberof BezierPath\n     * @return {string}\n     **/\n    // !!! TODO: isn't Number.toFixed(...) doing this job???\n    BezierPath._roundToDigits = function (num, digits, enforceInvisibleDigits) {\n        if (digits <= 0)\n            return Math.round(num).toString();\n        var magnitude = Math.pow(10, digits); // This could be LARGE :/\n        num = Math.round(num * magnitude);\n        var result = \"\" + (num / magnitude);\n        var index = result.lastIndexOf(\".\");\n        if (index == -1) {\n            index = result.length;\n        }\n        if (enforceInvisibleDigits) {\n            var digitsAfterPoint = result.length - index - 1;\n            //var digitsMissing : number    = enforceInvisibleDigits - digitsAfterPoint;\n            var digitsMissing = digits - digitsAfterPoint;\n            while (digitsMissing-- > 0)\n                result += \"&nbsp;\";\n        }\n        return result;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BezierPath_1 = __webpack_require__(4);\nvar Vertex_1 = __webpack_require__(0);\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        this.drag.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        this.dragStart.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        this.dragEnd.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = __webpack_require__(9);\nvar Vertex_1 = __webpack_require__(0);\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = __webpack_require__(0);\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof Line\n     * @return {Line} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {Vertex} amount The amount (x,y) to substract.\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {Vertex} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {Line} [line] - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (typeof line == 'undefined')\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0)); // new Line( new Vertex(0,0), new Vertex(100,0) );\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @param {Line} line\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @param {Line} line\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @method getClosestT\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Wrap to [0,1]?\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        function dist2(v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n        // p - point\n        // v - start point of segment\n        // w - end point of segment\n        function distToSegmentSquared(p, v, w) {\n            //var l2 = dist2(v, w);\n            //if( l2 === 0 ) return dist2(p, v);\n            //var t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n            //t = Math.max(0, Math.min(1, t));\n            return dist2(p, this.vertAt(this.getClosestLineT(p))); // dist2(p, [ v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1]) ]);\n        }\n        // p - point\n        // v - start point of segment\n        // w - end point of segment\n        //function distToSegment (p, v, w) {\n        //    return Math.sqrt(distToSegmentSquared(p, v, w));\n        //}\n        return Math.sqrt(distToSegmentSquared(p, this.a, this.b));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n        //distToSegmentSquared (p, v, w) {\n        //    return VertTuple.utils.dist2(p, this.vertAt(this.getClosestLineT(p)));\n        //}\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon\n *\n * Inspired by Delaunay at Travellermap\n *   http://www.travellermap.com/tmp/delaunay.htm\n *\n * Todo:\n *   + Add and use a proper Bounds class.\n *   + Add and use a proper Circle class.\n *   + Think about the importance of storing the circumcircle data in the Triangle.\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version   2.2.2\n *\n * @file Triangle\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Polygon_1 = __webpack_require__(5);\nvar Vertex_1 = __webpack_require__(0);\nvar Triangle = /** @class */ (function () {\n    /**\n     * Used in the bounds() function.\n     *\n     * @private\n     **/\n    //function max3( a, b, c ) { return ( a >= b && a >= c ) ? a : ( b >= a && b >= c ) ? b : c; }\n    // function min3( a, b, c ) { return ( a <= b && a <= c ) ? a : ( b <= a && b <= c ) ? b : c; }\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    /* function pointIsInTriangle( px, py, p0x, p0y, p1x, p1y, p2x, p2y ) {\n    //\n    // Point-in-Triangle test found at\n    //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n    //\n    var area = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n\n    var s = 1/(2*area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);\n    var t = 1/(2*area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);\n\n    return s > 0 && t > 0 && (1-s-t) > 0;\n    }; */\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return { center: this.center.clone(), radius: this.radius };\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.xMin + bounds.xMax) / 2, (bounds.yMin + bounds.yMax) / 2);\n            dx = this.center.x - bounds.xMin;\n            dy = this.center.y - bounds.yMin;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Object} - { xMin:float, xMax:float, yMin:float, yMax:float, width:float, height:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        var minx = Triangle.utils.min3(this.a.x, this.b.x, this.c.x);\n        var miny = Triangle.utils.min3(this.a.y, this.b.y, this.c.y);\n        var maxx = Triangle.utils.max3(this.a.x, this.b.x, this.c.x);\n        var maxy = Triangle.utils.max3(this.a.y, this.b.y, this.c.y);\n        return { xMin: minx, yMin: miny, xMax: maxx, yMax: maxy, width: maxx - minx, height: maxy - miny };\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n *\n * Usage\n * =====\n * Javascript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n * Typescript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( (e:XMouseEvent) => {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( (e:XMouseEvent) => {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( (e:XMouseEvent) => {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( (e:XMouseEvent) => {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @version  1.1.0\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.addEventListener(eventName,this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.removeEventListener(eventName,this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // For later retrieval\n        // this._keyDownListener = null;\n        // this._keyPressListener = null;\n        // this._keyUpListener = null;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        'delete': 8,\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        // 'delete'\t : 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.5.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = __webpack_require__(3);\nvar Vertex_1 = __webpack_require__(0);\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=black} color - The color to render the text with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @version  0.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = __webpack_require__(0);\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function () {\n        this._zindex = 0.0;\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierCurveHandleLines = function (curve) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* Imports for webpack */\n// Object.defineProperty(exports, \"__esModule\", { value: true });\n\nwindow.VertexAttr = __webpack_require__(1).VertexAttr;\nwindow.VertexListeners = __webpack_require__(6).VertexListeners;\nwindow.Vertex = __webpack_require__(0).Vertex;\n\nwindow.Grid = __webpack_require__(7).Grid;\nwindow.Line = __webpack_require__(8).Line;\nwindow.Vector = __webpack_require__(2).Vector;\nwindow.CubicBezierCurve = __webpack_require__(3).CubicBezierCurve;\nwindow.BezierPath = __webpack_require__(4).BezierPath;\nwindow.Polygon = __webpack_require__(5).Polygon;\nwindow.Triangle = __webpack_require__(10).Triangle;\nwindow.VEllipse = __webpack_require__(11).VEllipse;\nwindow.PBImage = __webpack_require__(12).PBImage;\nwindow.MouseHandler = __webpack_require__(13).MouseHandler;\nwindow.KeyHandler = __webpack_require__(14).KeyHandler;\nwindow.drawutils = __webpack_require__(15).drawutils;\nwindow.drawutilsgl = __webpack_require__(16).drawutilsgl;\nwindow.PlotBoilerplate = __webpack_require__(18).PlotBoilerplate;\n\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @version  1.7.2\n *\n * @file PlotBoilerplate\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar draw_1 = __webpack_require__(15);\nvar drawgl_1 = __webpack_require__(16);\nvar BezierPath_1 = __webpack_require__(4);\nvar Grid_1 = __webpack_require__(7);\nvar KeyHandler_1 = __webpack_require__(14);\nvar Line_1 = __webpack_require__(8);\nvar MouseHandler_1 = __webpack_require__(13);\nvar PBImage_1 = __webpack_require__(12);\nvar Polygon_1 = __webpack_require__(5);\nvar SVGBuilder_1 = __webpack_require__(19);\nvar Triangle_1 = __webpack_require__(10);\nvar VEllipse_1 = __webpack_require__(11);\nvar Vector_1 = __webpack_require__(2);\nvar Vertex_1 = __webpack_require__(0);\nvar VertexAttr_1 = __webpack_require__(1);\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nvar Draggable = /** @class */ (function () {\n    function Draggable(item, typeName) {\n        this.item = item;\n        this.typeName = typeName;\n    }\n    ;\n    Draggable.prototype.isVertex = function () { return this.typeName == Draggable.VERTEX; };\n    ;\n    Draggable.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n    ;\n    Draggable.VERTEX = 'vertex';\n    return Draggable;\n}());\n/**\n * The main class.\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false, renderTime: 0, selectable: true, isSelected: false, draggable: true };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.getElementById(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            this.draw = new drawgl_1.drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new draw_1.drawutils(this.ctx, false);\n            this.fill = new draw_1.drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for 'global', too!\n        if (window)\n            window.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        var svgCode = new SVGBuilder_1.SVGBuilder().build(pb.drawables, { canvasSize: pb.canvasSize, offset: pb.draw.offset, zoom: pb.draw.scale });\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof window[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function an the eligrey/SaveFile library?\";\n        var saveAs = window[\"saveAs\"];\n        saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.cssScaleX = this.config.cssScaleY = 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = 2.0;\n        //this.config.fullSize = false;\n        this.config.fitToParent = false;\n        this.resizeCanvas();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        if (typeof con.log != 'function')\n            throw \"Console object must have a 'log' function.\";\n        if (typeof con.warn != 'function')\n            throw \"Console object must have a 'warn' function.\";\n        if (typeof con.error != 'function')\n            throw \"Console object must have a 'error' function.\";\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            // for( var i in bezierPath.bezierCurves ) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartPoint(e.params.vertex);\n                    drawable.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    drawable.moveCurvePoint(cindex * 1, drawable.START_POINT, new Vertex_1.Vertex(e.params.dragAmount) // TODO: change the signature of moveCurvePoint to (,XYCoords...)     \n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[(cindex) % drawable.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                if (i + 1 > bezierPath.bezierCurves.length) {\n                    // Move last control point with the end point (if not circular)\n                    drawable.bezierCurves[drawable.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!drawable.adjustCircular) {\n                            var cindex = drawable.locateCurveByEndPoint(e.params.vertex);\n                            drawable.moveCurvePoint(cindex * 1, drawable.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x / 2, y: e.params.dragAmount.y / 2 }));\n                        }\n                        drawable.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type.\"; // : \" + drawable.constructor.name;\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = { x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x),\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.draggable ? color : 'rgba(128,128,128,0.5)';\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        // Draw drawables\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath_1.BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, 'orange'));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, 'orange'));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 7, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 7, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon_1.Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices)\n                        d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Triangle_1.Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse_1.VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Vertex_1.Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable)) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line_1.Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector_1.Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable) {\n                    this.draw.circleHandle(d.b, 7, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage_1.PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 7, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime) {\n                this.draw.squareHandle(this.vertices[i], 5, this.vertices[i].attr.isSelected ? 'rgba(192,128,0)' : this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that the image might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return { min: this.transformMousePosition(0, 0),\n            max: this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY)\n        };\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        // console.log( 'w', w, 'h', h, 'border', border, 'padding', padding, pl, pr, pt, pb, bl, br, bt, bb );\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = width + 'px';\n            _self.canvas.style.height = height + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {Draggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new Draggable(vert, Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {object} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new Draggable(_self.vertices[i], Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('ctrl') || this.keyHandler.isDown('spacebar')) {\n            _self.draw.offset.add(e.params.dragAmount);\n            _self.fill.offset.set(_self.draw.offset);\n            _self.config.offsetX = _self.draw.offset.x;\n            _self.config.offsetY = _self.draw.offset.y;\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        var oldPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        if (we.deltaY < 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = _self.config.scaleX * zoomStep;\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = _self.config.scaleY * zoomStep;\n        }\n        else if (we.deltaY > 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = Math.max(_self.config.scaleX / zoomStep, 0.01);\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = Math.max(_self.config.scaleY / zoomStep, 0.01);\n        }\n        var newPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        // Apply relative positioned zoom\n        var newOffsetX = _self.draw.offset.x + (newPos.x - oldPos.x) * _self.draw.scale.x;\n        var newOffsetY = _self.draw.offset.y + (newPos.y - oldPos.y) * _self.draw.scale.y;\n        _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = newOffsetX;\n        _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = newOffsetY;\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            if (!window[\"Touchy\"] || typeof window[\"Touchy\"] != \"function\") {\n                console.warn(\"Cannot initialize the touch handler. Touchy is missig. Did you include it?\");\n            }\n            else {\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n                var relPos_1 = function (pos) {\n                    return { x: pos.x - _self.canvas.offsetLeft,\n                        y: pos.y - _self.canvas.offsetTop\n                    };\n                };\n                // Some private vars to store the current mouse/position/button state.\n                var touchMovePos = null;\n                var touchDownPos = null;\n                var draggedElement = null;\n                // TODO\n                // ERROR, THIS DOES NOT COMPILE WITH TYPESCRIPT.\n                var Touchy = (window[\"Touchy\"]);\n                new Touchy(this.canvas, { one: function (hand, finger) {\n                        touchMovePos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        touchDownPos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                        if (draggedElement) {\n                            // The Touchy-points also have 'id' and 'time' attributes\n                            // which we are not interested in here.\n                            hand.on('move', function (points) {\n                                var rel = relPos_1(points[0]);\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            });\n                        }\n                    }\n                });\n            } // END else\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            // var keyHandler : KeyHandler = new KeyHandler( { trackAll : true } )\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            })\n                .down('e', function () { _self.console.log('e was hit. shift is pressed?', this.keyHandler.isDown('shift')); });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    // }; // END construcor 'PlotBoilerplate'\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in base) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                var type = typeof base[k];\n                try {\n                    if (type == 'boolean')\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (type == 'number')\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (type == 'function' && typeof extension[k] == 'function')\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error('error in key ', k, extension[k], e);\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'number')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'boolean')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        } // END fetch\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n// const test : PlotBoilerplate = new PlotBoilerplate( ({} as unknown) as Config );\n//exposeClass(PlotBoilerplate);\n//getGlobal()[\"PlotBoilerplate\"] = PlotBoilerplate;\n// NOT WORKING\n// console.log( \"exposeClass\", classObject.constructor.name );\n/* ((_context:any) => {\n    // console.log( \"exposeClass\", classObject, classObject.constructor );\n    // const exposeClass : string = \"TEST\";\n    console.log('Expose plotboilerplate');\n    _context.PlotBoilerplate = PlotBoilerplate;\n})(typeof window !== 'undefined' ? window : this);\n*/\n// ((window || globalThis) as any)[\"PlotBoilerplate\"] = PlotBoilerplate;\n// console.log('test');\n// (window as any).PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A default SVG builder.\n *\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVGBuilder = /** @class */ (function () {\n    function SVGBuilder() {\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    SVGBuilder.prototype.build = function (drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    };\n    ;\n    return SVGBuilder;\n}());\nexports.SVGBuilder = SVGBuilder;\n//# sourceMappingURL=SVGBuilder.js.map\n\n/***/ })\n/******/ ]);\n});"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","\"use strict\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-05-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.3.1\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        /*if( x instanceof Vertex ) {\n            this.x = x.x;\n            this.y = x.y;\n            } */\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x = x.x;\n            this.y = x.y;\n        } else {\n            this.x = x;\n            this.y = y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        /*\n        if( typeof x == 'number' ) {\n            this.x += x;\n            if( typeof y == 'number' )\n            this.y += y;\n        } else {\n            this.x += x.x;\n            this.y += x.y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone(); // .sub( this.a );\n        v.sub(this.a);\n        //return new Vector( new Vertex(), new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        // v.b.y = -v.b.y; // new Vertex(-v.b.y,v.b.x) ).add( this.a );\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means a stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @version 2.3.2\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {Vertex} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex_1.Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Vertex, CubicBezierCurve\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 2.1.2\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {Vertex} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        /* return ? */ this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        return this.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.prototype.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, // * (neighbourHandleLength/mainHandleLength),\n            neighbourPoint.y - mainHandleBounds.y // * (neighbourHandleLength/mainHandleLength)\n            );\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.prototype.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getStartControlPoint().y, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndControlPoint().y, digits, false));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().x, digits, false));\n            buffer.push(\",\");\n            buffer.push(BezierPath._roundToDigits(curve.getEndPoint().y, digits, false));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    /**\n     * A helper function.\n     *\n     * @method _roundToDigits\n     * @param {number} number -\n     * @param {number} digits -\n     * @param {boolean} enforceInvisibleDigits -\n     * @private\n     * @memberof BezierPath\n     * @return {string}\n     **/\n    // !!! TODO: isn't Number.toFixed(...) doing this job???\n    BezierPath._roundToDigits = function (num, digits, enforceInvisibleDigits) {\n        if (digits <= 0)\n            return Math.round(num).toString();\n        var magnitude = Math.pow(10, digits); // This could be LARGE :/\n        num = Math.round(num * magnitude);\n        var result = \"\" + (num / magnitude);\n        var index = result.lastIndexOf(\".\");\n        if (index == -1) {\n            index = result.length;\n        }\n        if (enforceInvisibleDigits) {\n            var digitsAfterPoint = result.length - index - 1;\n            //var digitsMissing : number    = enforceInvisibleDigits - digitsAfterPoint;\n            var digitsMissing = digits - digitsAfterPoint;\n            while (digitsMissing-- > 0)\n                result += \"&nbsp;\";\n        }\n        return result;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        this.drag.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        this.dragStart.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        this.dragEnd.push(listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof Line\n     * @return {Line} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {Vertex} amount The amount (x,y) to substract.\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {Vertex} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {Line} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {Line} [line] - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (typeof line == 'undefined')\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0)); // new Line( new Vertex(0,0), new Vertex(100,0) );\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @param {Line} line\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @param {Line} line\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @method getClosestT\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Wrap to [0,1]?\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        function dist2(v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n        // p - point\n        // v - start point of segment\n        // w - end point of segment\n        function distToSegmentSquared(p, v, w) {\n            //var l2 = dist2(v, w);\n            //if( l2 === 0 ) return dist2(p, v);\n            //var t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n            //t = Math.max(0, Math.min(1, t));\n            return dist2(p, this.vertAt(this.getClosestLineT(p))); // dist2(p, [ v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1]) ]);\n        }\n        // p - point\n        // v - start point of segment\n        // w - end point of segment\n        //function distToSegment (p, v, w) {\n        //    return Math.sqrt(distToSegmentSquared(p, v, w));\n        //}\n        return Math.sqrt(distToSegmentSquared(p, this.a, this.b));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n        //distToSegmentSquared (p, v, w) {\n        //    return VertTuple.utils.dist2(p, this.vertAt(this.getClosestLineT(p)));\n        //}\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon\n *\n * Inspired by Delaunay at Travellermap\n *   http://www.travellermap.com/tmp/delaunay.htm\n *\n * Todo:\n *   + Add and use a proper Bounds class.\n *   + Add and use a proper Circle class.\n *   + Think about the importance of storing the circumcircle data in the Triangle.\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version   2.2.2\n *\n * @file Triangle\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Triangle = /** @class */ (function () {\n    /**\n     * Used in the bounds() function.\n     *\n     * @private\n     **/\n    //function max3( a, b, c ) { return ( a >= b && a >= c ) ? a : ( b >= a && b >= c ) ? b : c; }\n    // function min3( a, b, c ) { return ( a <= b && a <= c ) ? a : ( b <= a && b <= c ) ? b : c; }\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    /* function pointIsInTriangle( px, py, p0x, p0y, p1x, p1y, p2x, p2y ) {\n    //\n    // Point-in-Triangle test found at\n    //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n    //\n    var area = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n\n    var s = 1/(2*area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);\n    var t = 1/(2*area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);\n\n    return s > 0 && t > 0 && (1-s-t) > 0;\n    }; */\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return { center: this.center.clone(), radius: this.radius };\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.xMin + bounds.xMax) / 2, (bounds.yMin + bounds.yMax) / 2);\n            dx = this.center.x - bounds.xMin;\n            dy = this.center.y - bounds.yMin;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Object} - { xMin:float, xMax:float, yMin:float, yMax:float, width:float, height:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        var minx = Triangle.utils.min3(this.a.x, this.b.x, this.c.x);\n        var miny = Triangle.utils.min3(this.a.y, this.b.y, this.c.y);\n        var maxx = Triangle.utils.max3(this.a.x, this.b.x, this.c.x);\n        var maxy = Triangle.utils.max3(this.a.y, this.b.y, this.c.y);\n        return { xMin: minx, yMin: miny, xMax: maxx, yMax: maxy, width: maxx - minx, height: maxy - miny };\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n *\n * Usage\n * =====\n * Javascript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n * Typescript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( (e:XMouseEvent) => {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( (e:XMouseEvent) => {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( (e:XMouseEvent) => {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( (e:XMouseEvent) => {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @version  1.1.0\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.addEventListener(eventName,this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.removeEventListener(eventName,this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // For later retrieval\n        // this._keyDownListener = null;\n        // this._keyPressListener = null;\n        // this._keyUpListener = null;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        'delete': 8,\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        // 'delete'\t : 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.5.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @param {string=black} color - The color to render the text with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @version  0.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function () {\n        this._zindex = 0.0;\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierCurveHandleLines = function (curve) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/* Imports for webpack */\n// Object.defineProperty(exports, \"__esModule\", { value: true });\n\nwindow.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nwindow.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nwindow.Vertex = require(\"./Vertex.js\").Vertex;\n\nwindow.Grid = require(\"./Grid.js\").Grid;\nwindow.Line = require(\"./Line.js\").Line;\nwindow.Vector = require(\"./Vector.js\").Vector;\nwindow.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nwindow.BezierPath = require(\"./BezierPath.js\").BezierPath;\nwindow.Polygon = require(\"./Polygon.js\").Polygon;\nwindow.Triangle = require(\"./Triangle.js\").Triangle;\nwindow.VEllipse = require(\"./VEllipse.js\").VEllipse;\nwindow.PBImage = require(\"./PBImage.js\").PBImage;\nwindow.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nwindow.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nwindow.drawutils = require(\"./draw.js\").drawutils;\nwindow.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;\nwindow.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n\n","\"use strict\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @version  1.7.2\n *\n * @file PlotBoilerplate\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar SVGBuilder_1 = require(\"./SVGBuilder\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nvar Draggable = /** @class */ (function () {\n    function Draggable(item, typeName) {\n        this.item = item;\n        this.typeName = typeName;\n    }\n    ;\n    Draggable.prototype.isVertex = function () { return this.typeName == Draggable.VERTEX; };\n    ;\n    Draggable.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n    ;\n    Draggable.VERTEX = 'vertex';\n    return Draggable;\n}());\n/**\n * The main class.\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false, renderTime: 0, selectable: true, isSelected: false, draggable: true };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.getElementById(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            this.draw = new drawgl_1.drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new draw_1.drawutils(this.ctx, false);\n            this.fill = new draw_1.drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for 'global', too!\n        if (window)\n            window.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        var svgCode = new SVGBuilder_1.SVGBuilder().build(pb.drawables, { canvasSize: pb.canvasSize, offset: pb.draw.offset, zoom: pb.draw.scale });\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof window[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function an the eligrey/SaveFile library?\";\n        var saveAs = window[\"saveAs\"];\n        saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.cssScaleX = this.config.cssScaleY = 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = 2.0;\n        //this.config.fullSize = false;\n        this.config.fitToParent = false;\n        this.resizeCanvas();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        if (typeof con.log != 'function')\n            throw \"Console object must have a 'log' function.\";\n        if (typeof con.warn != 'function')\n            throw \"Console object must have a 'warn' function.\";\n        if (typeof con.error != 'function')\n            throw \"Console object must have a 'error' function.\";\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            // for( var i in bezierPath.bezierCurves ) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartPoint(e.params.vertex);\n                    drawable.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    drawable.moveCurvePoint(cindex * 1, drawable.START_POINT, new Vertex_1.Vertex(e.params.dragAmount) // TODO: change the signature of moveCurvePoint to (,XYCoords...)     \n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = drawable.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!drawable.bezierCurves[(cindex) % drawable.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    drawable.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    drawable.updateArcLengths();\n                });\n                if (i + 1 > bezierPath.bezierCurves.length) {\n                    // Move last control point with the end point (if not circular)\n                    drawable.bezierCurves[drawable.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!drawable.adjustCircular) {\n                            var cindex = drawable.locateCurveByEndPoint(e.params.vertex);\n                            drawable.moveCurvePoint(cindex * 1, drawable.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x / 2, y: e.params.dragAmount.y / 2 }));\n                        }\n                        drawable.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type.\"; // : \" + drawable.constructor.name;\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = { x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x),\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.draggable ? color : 'rgba(128,128,128,0.5)';\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        // Draw drawables\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath_1.BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, 'orange'));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, 'orange'));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 7, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 7, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon_1.Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices)\n                        d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Triangle_1.Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse_1.VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Vertex_1.Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable)) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line_1.Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector_1.Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable) {\n                    this.draw.circleHandle(d.b, 7, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage_1.PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 7, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime) {\n                this.draw.squareHandle(this.vertices[i], 5, this.vertices[i].attr.isSelected ? 'rgba(192,128,0)' : this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that the image might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return { min: this.transformMousePosition(0, 0),\n            max: this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY)\n        };\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        // console.log( 'w', w, 'h', h, 'border', border, 'padding', padding, pl, pr, pt, pb, bl, br, bt, bb );\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = width + 'px';\n            _self.canvas.style.height = height + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {Draggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new Draggable(vert, Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {object} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new Draggable(_self.vertices[i], Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('ctrl') || this.keyHandler.isDown('spacebar')) {\n            _self.draw.offset.add(e.params.dragAmount);\n            _self.fill.offset.set(_self.draw.offset);\n            _self.config.offsetX = _self.draw.offset.x;\n            _self.config.offsetY = _self.draw.offset.y;\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        var oldPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        if (we.deltaY < 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = _self.config.scaleX * zoomStep;\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = _self.config.scaleY * zoomStep;\n        }\n        else if (we.deltaY > 0) {\n            _self.draw.scale.x = _self.fill.scale.x = _self.config.scaleX = Math.max(_self.config.scaleX / zoomStep, 0.01);\n            _self.draw.scale.y = _self.fill.scale.y = _self.config.scaleY = Math.max(_self.config.scaleY / zoomStep, 0.01);\n        }\n        var newPos = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n        // Apply relative positioned zoom\n        var newOffsetX = _self.draw.offset.x + (newPos.x - oldPos.x) * _self.draw.scale.x;\n        var newOffsetY = _self.draw.offset.y + (newPos.y - oldPos.y) * _self.draw.scale.y;\n        _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = newOffsetX;\n        _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = newOffsetY;\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            if (!window[\"Touchy\"] || typeof window[\"Touchy\"] != \"function\") {\n                console.warn(\"Cannot initialize the touch handler. Touchy is missig. Did you include it?\");\n            }\n            else {\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n                var relPos_1 = function (pos) {\n                    return { x: pos.x - _self.canvas.offsetLeft,\n                        y: pos.y - _self.canvas.offsetTop\n                    };\n                };\n                // Some private vars to store the current mouse/position/button state.\n                var touchMovePos = null;\n                var touchDownPos = null;\n                var draggedElement = null;\n                // TODO\n                // ERROR, THIS DOES NOT COMPILE WITH TYPESCRIPT.\n                var Touchy = (window[\"Touchy\"]);\n                new Touchy(this.canvas, { one: function (hand, finger) {\n                        touchMovePos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        touchDownPos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                        if (draggedElement) {\n                            // The Touchy-points also have 'id' and 'time' attributes\n                            // which we are not interested in here.\n                            hand.on('move', function (points) {\n                                var rel = relPos_1(points[0]);\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            });\n                        }\n                    }\n                });\n            } // END else\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            // var keyHandler : KeyHandler = new KeyHandler( { trackAll : true } )\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            })\n                .down('e', function () { _self.console.log('e was hit. shift is pressed?', this.keyHandler.isDown('shift')); });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    // }; // END construcor 'PlotBoilerplate'\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in base) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                var type = typeof base[k];\n                try {\n                    if (type == 'boolean')\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (type == 'number')\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (type == 'function' && typeof extension[k] == 'function')\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error('error in key ', k, extension[k], e);\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'number')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'boolean')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        } // END fetch\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n// const test : PlotBoilerplate = new PlotBoilerplate( ({} as unknown) as Config );\n//exposeClass(PlotBoilerplate);\n//getGlobal()[\"PlotBoilerplate\"] = PlotBoilerplate;\n// NOT WORKING\n// console.log( \"exposeClass\", classObject.constructor.name );\n/* ((_context:any) => {\n    // console.log( \"exposeClass\", classObject, classObject.constructor );\n    // const exposeClass : string = \"TEST\";\n    console.log('Expose plotboilerplate');\n    _context.PlotBoilerplate = PlotBoilerplate;\n})(typeof window !== 'undefined' ? window : this);\n*/\n// ((window || globalThis) as any)[\"PlotBoilerplate\"] = PlotBoilerplate;\n// console.log('test');\n// (window as any).PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * A default SVG builder.\n *\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVGBuilder = /** @class */ (function () {\n    function SVGBuilder() {\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    SVGBuilder.prototype.build = function (drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    };\n    ;\n    return SVGBuilder;\n}());\nexports.SVGBuilder = SVGBuilder;\n//# sourceMappingURL=SVGBuilder.js.map"],"sourceRoot":""}