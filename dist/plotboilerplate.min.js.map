{"version":3,"sources":["webpack:///../src/js/BezierPath.js","webpack:///../src/js/Bounds.js","webpack:///../src/js/Circle.js","webpack:///../src/js/CubicBezierCurve.js","webpack:///../src/js/Grid.js","webpack:///../src/js/KeyHandler.js","webpack:///../src/js/Line.js","webpack:///../src/js/MouseHandler.js","webpack:///../src/js/PBImage.js","webpack:///../src/js/PlotBoilerplate.js","webpack:///../src/js/Polygon.js","webpack:///../src/js/SVGBuilder.js","webpack:///../src/js/Triangle.js","webpack:///../src/js/VEllipse.js","webpack:///../src/js/Vector.js","webpack:///../src/js/VertTuple.js","webpack:///../src/js/Vertex.js","webpack:///../src/js/VertexAttr.js","webpack:///../src/js/VertexListeners.js","webpack:///../src/js/draw.js","webpack:///../src/js/drawgl.js","webpack:///../src/js/geomutils.js","webpack:///webpack/bootstrap","webpack:///../src/js/entry.js"],"names":["Object","defineProperty","exports","value","Bounds_1","CubicBezierCurve_1","Vertex_1","BezierPath","pathPoints","this","className","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","totalArcLength","adjustCircular","bezierCurves","prototype","addCurve","curve","push","length","startPoint","endPoint","adjustSuccessorControlPoint","getLength","locateCurveByStartPoint","point","i","equals","locateCurveByEndPoint","locateCurveByStartControlPoint","startControlPoint","locateCurveByEndControlPoint","endControlPoint","updateArcLengths","getCurveCount","getCurveAt","curveIndex","translate","amount","getStartPoint","add","getStartControlPoint","getEndControlPoint","getEndPoint","scale","anchor","scaling","rotate","angle","center","getClosestT","p","minIndex","minDist","dist","curveT","uMin","u","getPointAt","distance","Math","max","min","getPoint","console","log","uTemp","clone","relativeU","t","getTangentAt","getTangent","warn","getPerpendicularAt","getPerpendicular","uResult","_locateUIndex","bCurve","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","fromArray","curves","reverse","moveCurvePoint","pointID","moveAmount","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","mainHandleBounds","Vertex","x","y","neighbourHandleBounds","mainHandleLength","sqrt","pow","neighbourHandleLength","set","getBounds","b","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","Bounds","toSVGString","options","buffer","c","toSVGPathData","join","toJSON","prettyFormat","fromJSON","jsonString","obj","JSON","parse","Array","isArray","arr","bPath","lastCurve","CubicBezierCurve","isInstance","fromObject","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","bezierPath","width","height","computeFromVertices","vertices","vert","xMin","xMax","yMin","yMax","Line_1","Vector_1","Circle","radius","containsCircle","circle","lineDistance","line","getClosestPoint","vertAt","circleUtils","tangentAt","pointA","Vector","perp","circleIntersection","abs","p0","p1","d","a","h","p2","x3","y3","x4","y4","Line","cos","sin","curveIntervals","segmentCache","segmentLengths","arcLength","moveControlPoint","tmp","pointB","curveStep","tmpLength","newLength","result","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","tDiff","v","getPointByID","id","Error","t2","nt2","tX","tY","startVec","endVec","inv","convertU2T","tangentVector","toString","Grid","size","utils","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","fireEvent","event","listeners","hasListener","lis","keyCode","listener","fireDownEvent","e","handler","firePressEvent","fireUpEvent","key2code","key","KEY_CODES","_self","addEventListener","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","removeEventListener","down","press","up","isDown","extendStatics","__extends","setPrototypeOf","__proto__","hasOwnProperty","__","constructor","create","VertTuple_1","_super","_this","call","intersection","denominator","numerator1","numerator2","VertTuple","MouseHandler","name","mouseDownPos","undefined","mouseDragPos","mousePos","mouseButton","installed","handlers","mousemove","mkParams","drag","relPos","mouseup","button","mousedown","click","wheel","offsetX","offsetY","eventName","rel","xEvent","params","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","move","destroy","XMouseEvent","apply","arguments","MouseEvent","XWheelEvent","WheelEvent","PBImage","image","upperLeft","lowerRight","draw_1","drawgl_1","BezierPath_1","Circle_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","Polygon_1","SVGBuilder_1","Triangle_1","VEllipse_1","VertexAttr_1","PlotBoilerplate","config","VertexAttr","model","bezierAutoAdjust","renderTime","selectable","isSelected","draggable","visible","canvas","fullSize","fetch","val","fitToParent","bool","scaleX","scaleY","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","color","lineWidth","handleLine","polygon","triangle","ellipse","vertex","selectedVertex","vector","document","querySelector","ctx","getContext","draw","drawutilsgl","fill","copyInstance","drawutils","grid","canvasSize","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","_a","pb","svgCode","SVGBuilder","build","offset","zoom","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","bounds","canvasCenter","canvasRatio","ratio","addXY","setOffset","newUniformZoom","setZoom","setConsole","con","setCSSscale","drawable","VEllipse","axis","addDragListener","Polygon","Triangle","attr","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","splice","disableBezierPathAutoAdjust","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","round","raster","crosshair","_handleColor","drawDrawables","cubicBezier","diamondHandle","circleHandle","polyline","arrow","sub","error","drawSelectPolygon","squareHandle","Date","getTime","clear","beginDrawCycle","clearSelection","viewport","getAvailableContainerSpace","container","parentNode","style","display","padding","parseFloat","getComputedStyle","getPropertyValue","border","pl","pr","pt","bl","br","bt","bb","w","clientWidth","clientHeight","_setSize","innerWidth","documentElement","body","innerHeight","position","top","left","space","selectVerticesInPolygon","containsVert","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","which","fireDragStartEvent","mouseDragHandler","oldDragAmount","fireDragEvent","mouseUpHandler","fireDragEndEvent","mouseWheelHandler","zoomStep","we","deltaY","preventDefault","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","relPos_1","offsetLeft","offsetTop","AF","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch_1","touchStart","touches","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","touchMove","stopPropagation","trans","diff","difference","deltaX","touchEnd","touchCancel","multipointStart","multipointEnd","pinch","fingerA","item","fingerB","createGUI","class_1","isVertex","safeMergeByKeys","extension","k","typ","transform","fallback","isOpen","addVertex","getVertexAt","index","inside","j","xi","yi","xj","yj","factor","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","indent","geomutils_1","calcCircumcircle","getCentroid","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","EPSILON","cx","cy","radius_squared","inCircumcircle","min3","max3","toPolygon","determinant","containsPoint","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","getIncircle","getIncenter","px","py","p0x","p0y","p1x","p1y","p2x","p2y","area","s","vertA","vertB","inverse","buildArrowHead","zA","zB","headlen","atan2","PI","factory","setLength","normalize","moveTo","newA","v0","v1","colinear","l2","vtutils","dist2","pointDistance","VertexListeners_1","tuple","NaN","VertexListeners","setX","setY","invX","invY","amountX","amountY","addX","addY","eqX","eqY","len","ZERO","multiplyScalar","scalar","randomVertex","viewPort","random","dragStart","dragEnd","_addListener","removeDragListener","_removeListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","_fireEvent","ve","newListener","oldListener","context","fillShapes","save","beginPath","lineTo","strokeStyle","stroke","restore","_fillOrDraw","drawImage","naturalWidth","naturalHeight","rect","closePath","fillStyle","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","handle","square","dot","arc","circleArc","startAngle","endAngle","radiusX","radiusY","sizeX","sizeY","ceil","setLineDash","text","fillText","strokeText","label","rotation","clearRect","fillRect","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","copy","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","cubicBezierCurveHandleLines","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","pA","pB","pC","n","lineAB","lineAC","insideAngle","clockwise","scaleFactor","__webpack_module_cache__","__webpack_require__","moduleId","module","__webpack_modules__"],"mappings":"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","file":"plotboilerplate.min.js","sourcesContent":["\"use strict\";\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Bounds, Vertex, CubicBezierCurve, XYCoords, SVGSerializable\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @version 2.2.2\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /*\n    insertVertexAt( t:number ) : void {\n    console.log('Inserting vertex at', t );\n    // Find the curve index\n    var u : number = 0;\n    var curveIndex : number = -1;\n    var localT : number = 0.0;\n    for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n        \n    }\n    }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        // var i : number = 0;\n        var uTemp = 0.0;\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @module PlotBoilerplate\n * @classdesc A bounds class with min and max values.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n *\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @version  1.1.0\n *\n * @file Bounds\n * @fileoverview A simple bounds class implementing IBounds.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    ;\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    Bounds.computeFromVertices = function (vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        var xMin = vertices[0].x;\n        var xMax = vertices[0].x;\n        var yMin = vertices[0].y;\n        var yMax = vertices[0].y;\n        var vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    ;\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n *\n * @author   Ikaros Kappler\n * @version  1.1.0\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n *\n * @file Circle\n * @fileoverview A simple circle class: center point and radius.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = require(\"./Line\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    Circle.prototype.containsCircle = function (circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    };\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    Circle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                       Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @version 2.4.2\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex_1.Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var t = 0.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-14 Changed `window` to `globalThis`.\n * @version  1.0.3\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * Usage\n * =====\n * @example\n *   // Javascript\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n * @example\n *   // Typescript\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( (e:XMouseEvent) => {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( (e:XMouseEvent) => {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( (e:XMouseEvent) => {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( (e:XMouseEvent) => {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @version  1.1.0\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.addEventListener(eventName,this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.removeEventListener(eventName,this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex, SVGSerializable\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @version  1.9.1\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar SVGBuilder_1 = require(\"./SVGBuilder\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterScaleX: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleX', 1.0),\n            rasterScaleY: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleY', 1.0),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            autoDetectRetina: PlotBoilerplate.utils.fetch.bool(config, 'autoDetectRetina', true),\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            circle: {\n                color: '#22a8a8',\n                lineWidth: 2\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: '#c08000',\n                lineWidth: 2\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.querySelector(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            this.draw = new drawgl_1.drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new draw_1.drawutils(this.ctx, false);\n            this.fill = new draw_1.drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for modules/global, too!\n        globalThis.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        var svgCode = new SVGBuilder_1.SVGBuilder().build(pb.drawables, { canvasSize: pb.canvasSize, offset: pb.draw.offset, zoom: pb.draw.scale });\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function an the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio; // 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    ;\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        //const viewport:Bounds = this.viewport();\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        PlotBoilerplate.utils.disableBezierPathAutoAdjust(drawable);\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = {\n            x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX / this.config.cssScaleX,\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY / this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : (h.attr.draggable ? color : 'rgba(128,128,128,0.5)');\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath_1.BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            if (d.bezierCurves[c].startPoint.attr.visible)\n                                this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            if (d.bezierCurves[c].endPoint.attr.visible)\n                                this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        if (d.bezierCurves[c].startControlPoint.attr.visible)\n                            this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        if (d.bezierCurves[c].endControlPoint.attr.visible)\n                            this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon_1.Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices) {\n                        d.vertices[i].attr.renderTime = renderTime;\n                    }\n                }\n            }\n            else if (d instanceof Triangle_1.Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse_1.VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Circle_1.Circle) {\n                this.draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n            }\n            else if (d instanceof Vertex_1.Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line_1.Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector_1.Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                    this.draw.circleHandle(d.b, 3, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage_1.PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                this.draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(globalThis.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(globalThis.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(globalThis.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(globalThis.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(globalThis.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(globalThis.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(globalThis.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(globalThis.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(globalThis.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(globalThis.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX,\n            y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    ;\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar')) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    ;\n    /**\n    * Set a new zoom value (and re-adjust the draw offset).\n    *\n    * Note: the function will not trigger any redraws.\n    *\n    * @param {number} zoomFactorX - The new horizontal zoom value.\n    * @param {number} zoomFactorY - The new vertical zoom value.\n    * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n    **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                return { x: pos.x - _self.canvas.offsetLeft,\n                    y: pos.y - _self.canvas.offsetTop\n                };\n            };\n            if (globalThis[\"AlloyFinger\"] && typeof globalThis[\"AlloyFinger\"] == \"function\") {\n                try {\n                    // Do not include AlloyFinger itself to the library\n                    // (17kb, but we want to keep this lib as tiny as possible).\n                    var AF = globalThis[\"AlloyFinger\"];\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var af = new AF(this.canvas, {\n                        touchStart: function (e) {\n                            if (e.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == 'vertex') {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (e) {\n                            if (e.touches.length == 1 && draggedElement) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var rel = relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }); //  points[0] );\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (e.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                e.preventDefault();\n                                e.stopPropagation();\n                                _self.setOffset(_self.draw.offset.clone().addXY(e.deltaX, e.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (e) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == 'vertex') {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = { params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (e) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (e) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (e) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (e) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(e.touches.item(0).clientX, e.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(e.touches.item(1).clientX, e.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * e.zoom, multiTouchStartScale.y * e.zoom, center);\n                            _self.redraw();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n                ;\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error('[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.');\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            ;\n            class_1.prototype.isVertex = function () { return this.typeName == PlotBoilerplate.Draggable.VERTEX; };\n            ;\n            class_1.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n            ;\n            return class_1;\n        }()),\n        _a.VERTEX = 'vertex',\n        _a);\n    /**\n     * A set of helper functions.\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == 'boolean')\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == 'number')\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == 'function' && typeof extension[k] == 'function')\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error('error in key ', k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === 'number')\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'boolean')\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) { // && !bezierPath.adjustCircular ) { \n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        },\n        /**\n         * Removes vertex listeners from the path's vertices. This needs to be called\n         * when BezierPaths are removed from the canvas.\n         *\n         * Sorry, this is not yet implemented.\n         *\n         * @param {BezierPath} bezierPath - The path to use un-auto-adjustment for.\n         **/\n        disableBezierPathAutoAdjust: function (bezierPath) {\n            // How to determine which listeners are mine???\n            /*\n              for( var i = 0; i < bezierPath.bezierCurves.length; i++ ) {\n            // Just try to remove listeners from all vertices on the Bézier path.\n            // No matter if there are not listeners installed for some reason.\n            bezierPath.bezierCurves[i].startPoint.listeners.removeDragListener( );\n            }\n            */\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added thet `getVertexAt` function.\n * @version 1.3.0\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertex = function (vert) {\n        this.vertices.push(vert);\n    };\n    ;\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    Polygon.prototype.getVertexAt = function (index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    };\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * A default SVG builder.\n *\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVGBuilder = /** @class */ (function () {\n    function SVGBuilder() {\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    SVGBuilder.prototype.build = function (drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    };\n    ;\n    return SVGBuilder;\n}());\nexports.SVGBuilder = SVGBuilder;\n//# sourceMappingURL=SVGBuilder.js.map","\"use strict\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon, SVGSerializale\n *\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the getIncenter function.\n * @version   2.3.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires Vertex\n *\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modofied 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @version 1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {Vertex} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {Vertex} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @method getClosestT\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Wrap to [0,1]?\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        //function dist2(v, w) {\n        //    return (v.x - w.x)*(v.x - w.x) + (v.y - w.y)*(v.y - w.y);\n        //}\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modifeid 2020-10-30 Change the warnings in `sub(...)` and `add(...)` into real errors.\n * @version  2.4.1\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        // this.drag.push( listener );\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        // this.drag.push( listener );\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        //this.dragStart.push( listener );\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragEnd listener.\n     *\n     * @method addDragEndListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @version  1.8.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        // this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    drawutils.prototype.text = function (text, x, y, options) {\n        options = options || {};\n        this.ctx.save();\n        x = this.offset.x + x * this.scale.x;\n        y = this.offset.y + y * this.scale.y;\n        var color = options.color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, x, y);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, x, y);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @version  0.0.4\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function () {\n        this._zindex = 0.0;\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierCurveHandleLines = function (curve) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    drawutilsgl.prototype.text = function (text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\n/**\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the slope (theta) of line AB and line AC\n        var thetaAB = lineAB.angle();\n        var thetaAC = lineAC.angle();\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    }\n};\n//# sourceMappingURL=geomutils.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n/* Imports for webpack */\n\nglobalThis.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nglobalThis.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nglobalThis.Vertex = require(\"./Vertex.js\").Vertex;\n\nglobalThis.Bounds = require(\"./Bounds.js\").Bounds;\nglobalThis.Grid = require(\"./Grid.js\").Grid;\nglobalThis.Line = require(\"./Line.js\").Line;\nglobalThis.Vector = require(\"./Vector.js\").Vector;\nglobalThis.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nglobalThis.BezierPath = require(\"./BezierPath.js\").BezierPath;\nglobalThis.Polygon = require(\"./Polygon.js\").Polygon;\nglobalThis.Triangle = require(\"./Triangle.js\").Triangle;\nglobalThis.VEllipse = require(\"./VEllipse.js\").VEllipse;\nglobalThis.Circle = require(\"./Circle.js\").Circle;\nglobalThis.PBImage = require(\"./PBImage.js\").PBImage;\nglobalThis.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nglobalThis.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nglobalThis.drawutils = require(\"./draw.js\").drawutils;\nglobalThis.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;\nglobalThis.geomutils = require(\"./geomutils.js\").geomutils;\nglobalThis.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n\n"],"sourceRoot":""}