{"version":3,"sources":["webpack://pb/webpack/universalModuleDefinition","webpack://pb/plotboilerplate.min.js","webpack://pb/webpack/bootstrap","webpack://pb/./src/js/Vertex.js","webpack://pb/./src/js/Bounds.js","webpack://pb/./src/js/Line.js","webpack://pb/./src/js/Vector.js","webpack://pb/./src/js/VertexAttr.js","webpack://pb/./src/js/CubicBezierCurve.js","webpack://pb/./src/js/BezierPath.js","webpack://pb/./src/js/Polygon.js","webpack://pb/./src/js/Triangle.js","webpack://pb/./src/js/Circle.js","webpack://pb/./src/js/VertexListeners.js","webpack://pb/./src/js/Grid.js","webpack://pb/./src/js/VertTuple.js","webpack://pb/./src/js/geomutils.js","webpack://pb/./src/js/VEllipse.js","webpack://pb/./src/js/PBImage.js","webpack://pb/./src/js/MouseHandler.js","webpack://pb/./src/js/KeyHandler.js","webpack://pb/./src/js/draw.js","webpack://pb/./src/js/drawgl.js","webpack://pb/./src/js/entry.js","webpack://pb/./src/js/PlotBoilerplate.js","webpack://pb/./src/js/SVGBuilder.js"],"names":["root","factory","exports","module","define","amd","window","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","VertexAttr_1","VertexListeners_1","Vertex","x","y","this","className","tuple","NaN","attr","VertexAttr","listeners","VertexListeners","set","setX","setY","invX","invY","add","console","warn","addXY","amountX","amountY","addX","addY","sub","equals","vertex","eqX","Math","abs","EPSILON","eqY","result","clone","distance","vert","sqrt","pow","difference","scale","factor","center","rotate","angle","atan2","len","ZERO","cos","sin","multiplyScalar","scalar","round","inv","toString","toSVGString","options","buffer","push","join","randomVertex","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","PI","Bounds","width","height","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","VertTuple_1","Vertex_1","Line","_super","a","_this","intersection","line","denominator","numerator1","numerator2","VertTuple","Vector","vertA","vertB","perp","v","inverse","tmp","length","draggable","selectable","isSelected","visible","model","Bounds_1","Vector_1","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","log","translate","amount","reverse","getLength","pointA","pointB","curveStep","tmpLength","newLength","getPointAt","getClosestT","desiredEpsilon","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","dist","getBounds","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getPointByID","id","Error","getPoint","u","getTangentAt","t2","nt2","tX","tY","getSubCurveAt","startVec","endVec","convertU2T","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","curve","isInstance","obj","toSVGPathData","toJSON","prettyFormat","jsonString","fromJSON","JSON","parse","fromObject","fromArray","arr","isArray","CubicBezierCurve_1","BezierPath","pathPoints","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","point","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaling","curveT","uMin","uTemp","bCurve","relativeU","uResult","_locateUIndex","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","predecessor","successor","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","bPath","lastCurve","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","bezierPath","BezierPath_1","Polygon","isOpen","containsVert","inside","j","xi","yi","xj","yj","intersect","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","Circle_1","Line_1","Polygon_1","geomutils_1","Triangle","calcCircumcircle","getCentroid","scaleToCentroid","centroid","getCircumcircle","radius","Circle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","bounds","cx","cy","radius_squared","inCircumcircle","dist_squared","min3","max3","toPolygon","determinant","containsPoint","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","circleIntersA","getClosestPoint","circleIntersB","circleIntersC","getIncircle","getIncenter","px","py","p0x","p0y","p1x","p1y","p2x","p2y","area","lineDistance","closestPointOnLine","vertAt","circleUtils","tangentAt","circleIntersection","circle","p0","p1","h","p2","x3","y3","x4","y4","drag","dragStart","dragEnd","addDragListener","listener","_addListener","removeDragListener","_removeListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","fireDragEvent","e","_fireEvent","fireDragStartEvent","fireDragEndEvent","_self","ve","params","newListener","oldListener","splice","Grid","size","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","setLength","normalize","moveTo","newA","diff","v0","v1","colinear","l2","vtutils","dist2","pointDistance","w","Triangle_1","pA","pB","pC","triangle","lineAB","lineAC","insideAngle","clockwise","lineLength","scaleFactor","VEllipse","axis","PBImage","image","upperLeft","lowerRight","MouseHandler","element","mouseDownPos","undefined","mouseDragPos","mousePos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","click","wheel","addEventListener","offsetX","offsetY","eventName","rel","xEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","move","up","down","destroy","removeEventListener","XMouseEvent","apply","arguments","MouseEvent","XWheelEvent","WheelEvent","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","event","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","press","isDown","break","backspace","tab","clear","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","end","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","delete","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","k","q","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","next","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","drawutils","context","fillShapes","ctx","offset","beginDrawCycle","color","lineWidth","save","beginPath","lineTo","strokeStyle","stroke","restore","arrow","_fillOrDraw","position","drawImage","naturalWidth","naturalHeight","rect","closePath","fillStyle","fill","cubicBezier","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","handle","square","handleLine","dot","arc","ellipse","circleArc","startAngle","endAngle","radiusX","radiusY","grid","sizeX","sizeY","yMin","ceil","yMax","xMin","xMax","raster","diamondHandle","squareHandle","circleHandle","crosshair","polygon","polyline","setLineDash","label","text","rotation","fillText","strokeText","clearRect","canvas","fillRect","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","copyInstance","copy","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","currentRotation","uniform2fv","drawArrays","LINES","cubicBezierCurveHandleLines","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","vertStatus","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","PlotBoilerplate","draw_1","drawgl_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","SVGBuilder_1","VEllipse_1","config","bezierAutoAdjust","renderTime","fullSize","fetch","val","fitToParent","bool","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","selectedVertex","vector","document","querySelector","getContext","draw","canvasSize","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","svgCode","SVGBuilder","build","zoom","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","setCSSscale","drawable","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","disableBezierPathAutoAdjust","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","_handleColor","drawDrawables","error","drawSelectPolygon","Date","getTime","clearSelection","getAvailableContainerSpace","container","parentNode","style","display","padding","parseFloat","getComputedStyle","getPropertyValue","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_setSize","innerWidth","documentElement","body","innerHeight","top","left","space","selectVerticesInPolygon","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","which","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","deltaY","preventDefault","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","relPos_1","offsetLeft","offsetTop","AF","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch_1","touchStart","touches","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","touchMove","stopPropagation","trans","deltaX","touchEnd","touchCancel","multipointStart","multipointEnd","pinch","fingerA","item","fingerB","createGUI","_a","class_1","isVertex","safeMergeByKeys","extension","typ","transform","fallback","nl","indent"],"mappings":"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","file":"plotboilerplate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn ","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @version  2.4.0\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr_1 = __webpack_require__(4);\nvar VertexListeners_1 = __webpack_require__(10);\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A bounds class with min and max values.\n *\n * @requires XYCoords, Vertex, IBounds\n *\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @version  1.0.0\n *\n * @file Bopunds\n * @fileoverview A simple bounds class implementing IBounds.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    ;\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = __webpack_require__(12);\nvar Vertex_1 = __webpack_require__(0);\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = __webpack_require__(12);\nvar Vertex_1 = __webpack_require__(0);\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @version 2.4.2\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = __webpack_require__(1);\nvar Vertex_1 = __webpack_require__(0);\nvar Vector_1 = __webpack_require__(3);\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex_1.Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var t = 0.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Bounds, Vertex, CubicBezierCurve, XYCoords, SVGSerializable\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @version 2.2.2\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = __webpack_require__(1);\nvar CubicBezierCurve_1 = __webpack_require__(5);\nvar Vertex_1 = __webpack_require__(0);\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /*\n    insertVertexAt( t:number ) : void {\n    console.log('Inserting vertex at', t );\n    // Find the curve index\n    var u : number = 0;\n    var curveIndex : number = -1;\n    var localT : number = 0.0;\n    for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n        \n    }\n    }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        // var i : number = 0;\n        var uTemp = 0.0;\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BezierPath_1 = __webpack_require__(6);\nvar Vertex_1 = __webpack_require__(0);\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon, SVGSerializale\n *\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the getIncenter function.\n * @version   2.3.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = __webpack_require__(1);\nvar Circle_1 = __webpack_require__(9);\nvar Line_1 = __webpack_require__(2);\nvar Polygon_1 = __webpack_require__(7);\nvar Vertex_1 = __webpack_require__(0);\nvar geomutils_1 = __webpack_require__(13);\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line, Vector, VertTuple, Vertex, SVGSerializale\n *\n * @author   Ikaros Kappler\n * @version  1.0.1\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n *\n * @file Circle\n * @fileoverview A simple circle class: center point and radius.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = __webpack_require__(2);\nvar Vector_1 = __webpack_require__(3);\nvar Vertex_1 = __webpack_require__(0);\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    Circle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                       Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        // this.drag.push( listener );\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        // this.drag.push( listener );\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        //this.dragStart.push( listener );\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragEnd listener.\n     *\n     * @method addDragEndListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires Vertex\n *\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modofied 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @version 1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = __webpack_require__(0);\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {Vertex} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {Vertex} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @method getClosestT\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Wrap to [0,1]?\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        //function dist2(v, w) {\n        //    return (v.x - w.x)*(v.x - w.x) + (v.y - w.y)*(v.y - w.y);\n        //}\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = __webpack_require__(2);\nvar Triangle_1 = __webpack_require__(8);\n/**\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the slope (theta) of line AB and line AC\n        var thetaAB = lineAB.angle();\n        var thetaAC = lineAC.angle();\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    }\n};\n//# sourceMappingURL=geomutils.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex, SVGSerializable\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * Usage\n * =====\n * Javascript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n * Typescript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( (e:XMouseEvent) => {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( (e:XMouseEvent) => {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( (e:XMouseEvent) => {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( (e:XMouseEvent) => {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @version  1.1.0\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.addEventListener(eventName,this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.removeEventListener(eventName,this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n//# sourceMappingURL=MouseHandler.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the 'delete' key code from 8 to 46.\n * @version  1.0.2\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @version  1.6.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = __webpack_require__(5);\nvar Vertex_1 = __webpack_require__(0);\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @version  0.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = __webpack_require__(0);\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function () {\n        this._zindex = 0.0;\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierCurveHandleLines = function (curve) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* Imports for webpack */\n\nwindow.VertexAttr = __webpack_require__(4).VertexAttr;\nwindow.VertexListeners = __webpack_require__(10).VertexListeners;\nwindow.Vertex = __webpack_require__(0).Vertex;\n\nwindow.Bounds = __webpack_require__(1).Bounds;\nwindow.Grid = __webpack_require__(11).Grid;\nwindow.Line = __webpack_require__(2).Line;\nwindow.Vector = __webpack_require__(3).Vector;\nwindow.CubicBezierCurve = __webpack_require__(5).CubicBezierCurve;\nwindow.BezierPath = __webpack_require__(6).BezierPath;\nwindow.Polygon = __webpack_require__(7).Polygon;\nwindow.Triangle = __webpack_require__(8).Triangle;\nwindow.VEllipse = __webpack_require__(14).VEllipse;\nwindow.Circle = __webpack_require__(9).Circle;\nwindow.PBImage = __webpack_require__(15).PBImage;\nwindow.MouseHandler = __webpack_require__(16).MouseHandler;\nwindow.KeyHandler = __webpack_require__(17).KeyHandler;\nwindow.drawutils = __webpack_require__(18).drawutils;\nwindow.drawutilsgl = __webpack_require__(19).drawutilsgl;\nwindow.geomutils = __webpack_require__(13).geomutils;\nwindow.PlotBoilerplate = __webpack_require__(21).PlotBoilerplate;\n\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, VEllipse, Circle, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @version  1.9.1\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar draw_1 = __webpack_require__(18);\nvar drawgl_1 = __webpack_require__(19);\nvar BezierPath_1 = __webpack_require__(6);\nvar Bounds_1 = __webpack_require__(1);\nvar Circle_1 = __webpack_require__(9);\nvar Grid_1 = __webpack_require__(11);\nvar KeyHandler_1 = __webpack_require__(17);\nvar Line_1 = __webpack_require__(2);\nvar MouseHandler_1 = __webpack_require__(16);\nvar PBImage_1 = __webpack_require__(15);\nvar Polygon_1 = __webpack_require__(7);\nvar SVGBuilder_1 = __webpack_require__(22);\nvar Triangle_1 = __webpack_require__(8);\nvar VEllipse_1 = __webpack_require__(14);\nvar Vector_1 = __webpack_require__(3);\nvar Vertex_1 = __webpack_require__(0);\nvar VertexAttr_1 = __webpack_require__(4);\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterScaleX: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleX', 1.0),\n            rasterScaleY: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleY', 1.0),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            autoDetectRetina: PlotBoilerplate.utils.fetch.bool(config, 'autoDetectRetina', true),\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            circle: {\n                color: '#22a8a8',\n                lineWidth: 2\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: '#c08000',\n                lineWidth: 2\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.querySelector(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            this.draw = new drawgl_1.drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new draw_1.drawutils(this.ctx, false);\n            this.fill = new draw_1.drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for modules/global, too!\n        if (window)\n            window.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        var svgCode = new SVGBuilder_1.SVGBuilder().build(pb.drawables, { canvasSize: pb.canvasSize, offset: pb.draw.offset, zoom: pb.draw.scale });\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof window[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function an the eligrey/SaveFile library?\";\n        var _saveAs = window[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = window.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio; // 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    ;\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        //const viewport:Bounds = this.viewport();\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        PlotBoilerplate.utils.disableBezierPathAutoAdjust(drawable);\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = {\n            x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX / this.config.cssScaleX,\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY / this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : (h.attr.draggable ? color : 'rgba(128,128,128,0.5)');\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath_1.BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            if (d.bezierCurves[c].startPoint.attr.visible)\n                                this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            if (d.bezierCurves[c].endPoint.attr.visible)\n                                this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        if (d.bezierCurves[c].startControlPoint.attr.visible)\n                            this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        if (d.bezierCurves[c].endControlPoint.attr.visible)\n                            this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon_1.Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices) {\n                        d.vertices[i].attr.renderTime = renderTime;\n                    }\n                }\n            }\n            else if (d instanceof Triangle_1.Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse_1.VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Circle_1.Circle) {\n                this.draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n            }\n            else if (d instanceof Vertex_1.Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line_1.Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector_1.Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                    this.draw.circleHandle(d.b, 3, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage_1.PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                this.draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            // window.alert( space.width + \" \" + space.height );\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX,\n            y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    ;\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar')) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    ;\n    /**\n    * Set a new zoom value (and re-adjust the draw offset).\n    *\n    * Note: the function will not trigger any redraws.\n    *\n    * @param {number} zoomFactorX - The new horizontal zoom value.\n    * @param {number} zoomFactorY - The new vertical zoom value.\n    * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n    **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                return { x: pos.x - _self.canvas.offsetLeft,\n                    y: pos.y - _self.canvas.offsetTop\n                };\n            };\n            if (window[\"AlloyFinger\"] && typeof window[\"AlloyFinger\"] == \"function\") {\n                try {\n                    // Do not include AlloyFinger itself to the library\n                    // (17kb, but we want to keep this lib as tiny as possible).\n                    var AF = window[\"AlloyFinger\"];\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var af = new AF(this.canvas, {\n                        touchStart: function (e) {\n                            if (e.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == 'vertex') {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (e) {\n                            if (e.touches.length == 1 && draggedElement) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var rel = relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }); //  points[0] );\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (e.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                e.preventDefault();\n                                e.stopPropagation();\n                                _self.setOffset(_self.draw.offset.clone().addXY(e.deltaX, e.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (e) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == 'vertex') {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = { params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (e) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (e) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (e) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (e) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(e.touches.item(0).clientX, e.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(e.touches.item(1).clientX, e.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * e.zoom, multiTouchStartScale.y * e.zoom, center);\n                            _self.redraw();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n                ;\n            }\n            else if (window[\"Touchy\"] && typeof window[\"Touchy\"] == \"function\") {\n                console.error('[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.');\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            ;\n            class_1.prototype.isVertex = function () { return this.typeName == PlotBoilerplate.Draggable.VERTEX; };\n            ;\n            class_1.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n            ;\n            return class_1;\n        }()),\n        _a.VERTEX = 'vertex',\n        _a);\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == 'boolean')\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == 'number')\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == 'function' && typeof extension[k] == 'function')\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error('error in key ', k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === 'number')\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'boolean')\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) { // && !bezierPath.adjustCircular ) { \n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        },\n        /**\n         * Removes vertex listeners from the path's vertices. This needs to be called\n         * when BezierPaths are removed from the canvas.\n         *\n         * Sorry, this is not yet implemented.\n         *\n         * @param {BezierPath} bezierPath - The path to use un-auto-adjustment for.\n         **/\n        disableBezierPathAutoAdjust: function (bezierPath) {\n            // How to determine which listeners are mine???\n            /*\n              for( var i = 0; i < bezierPath.bezierCurves.length; i++ ) {\n            // Just try to remove listeners from all vertices on the Bézier path.\n            // No matter if there are not listeners installed for some reason.\n            bezierPath.bezierCurves[i].startPoint.listeners.removeDragListener( );\n            }\n            */\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A default SVG builder.\n *\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVGBuilder = /** @class */ (function () {\n    function SVGBuilder() {\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    SVGBuilder.prototype.build = function (drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    };\n    ;\n    return SVGBuilder;\n}());\nexports.SVGBuilder = SVGBuilder;\n//# sourceMappingURL=SVGBuilder.js.map\n\n/***/ })\n/******/ ]);\n});"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","\"use strict\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @version  2.4.0\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @classdesc A bounds class with min and max values.\n *\n * @requires XYCoords, Vertex, IBounds\n *\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @version  1.0.0\n *\n * @file Bopunds\n * @fileoverview A simple bounds class implementing IBounds.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    ;\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @version 2.4.2\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex_1.Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var t = 0.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Bounds, Vertex, CubicBezierCurve, XYCoords, SVGSerializable\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @version 2.2.2\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /*\n    insertVertexAt( t:number ) : void {\n    console.log('Inserting vertex at', t );\n    // Find the curve index\n    var u : number = 0;\n    var curveIndex : number = -1;\n    var localT : number = 0.0;\n    for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n        \n    }\n    }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        // var i : number = 0;\n        var uTemp = 0.0;\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon, SVGSerializale\n *\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the getIncenter function.\n * @version   2.3.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line, Vector, VertTuple, Vertex, SVGSerializale\n *\n * @author   Ikaros Kappler\n * @version  1.0.1\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n *\n * @file Circle\n * @fileoverview A simple circle class: center point and radius.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = require(\"./Line\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    Circle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                       Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        // this.drag.push( listener );\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        // this.drag.push( listener );\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        //this.dragStart.push( listener );\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragEnd listener.\n     *\n     * @method addDragEndListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires Vertex\n *\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modofied 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @version 1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {Vertex} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {Vertex} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @method getClosestT\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Wrap to [0,1]?\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        //function dist2(v, w) {\n        //    return (v.x - w.x)*(v.x - w.x) + (v.y - w.y)*(v.y - w.y);\n        //}\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\n/**\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the slope (theta) of line AB and line AC\n        var thetaAB = lineAB.angle();\n        var thetaAC = lineAC.angle();\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    }\n};\n//# sourceMappingURL=geomutils.js.map","\"use strict\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex, SVGSerializable\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * Usage\n * =====\n * Javascript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n * Typescript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( (e:XMouseEvent) => {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( (e:XMouseEvent) => {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( (e:XMouseEvent) => {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( (e:XMouseEvent) => {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @version  1.1.0\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.addEventListener(eventName,this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.removeEventListener(eventName,this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the 'delete' key code from 8 to 46.\n * @version  1.0.2\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @version  1.6.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @version  0.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function () {\n        this._zindex = 0.0;\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierCurveHandleLines = function (curve) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/* Imports for webpack */\n\nwindow.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nwindow.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nwindow.Vertex = require(\"./Vertex.js\").Vertex;\n\nwindow.Bounds = require(\"./Bounds.js\").Bounds;\nwindow.Grid = require(\"./Grid.js\").Grid;\nwindow.Line = require(\"./Line.js\").Line;\nwindow.Vector = require(\"./Vector.js\").Vector;\nwindow.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nwindow.BezierPath = require(\"./BezierPath.js\").BezierPath;\nwindow.Polygon = require(\"./Polygon.js\").Polygon;\nwindow.Triangle = require(\"./Triangle.js\").Triangle;\nwindow.VEllipse = require(\"./VEllipse.js\").VEllipse;\nwindow.Circle = require(\"./Circle.js\").Circle;\nwindow.PBImage = require(\"./PBImage.js\").PBImage;\nwindow.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nwindow.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nwindow.drawutils = require(\"./draw.js\").drawutils;\nwindow.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;\nwindow.geomutils = require(\"./geomutils.js\").geomutils;\nwindow.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n\n","\"use strict\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, VEllipse, Circle, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @version  1.9.1\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar SVGBuilder_1 = require(\"./SVGBuilder\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterScaleX: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleX', 1.0),\n            rasterScaleY: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleY', 1.0),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            autoDetectRetina: PlotBoilerplate.utils.fetch.bool(config, 'autoDetectRetina', true),\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            circle: {\n                color: '#22a8a8',\n                lineWidth: 2\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: '#c08000',\n                lineWidth: 2\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.querySelector(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            this.draw = new drawgl_1.drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new draw_1.drawutils(this.ctx, false);\n            this.fill = new draw_1.drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for modules/global, too!\n        if (window)\n            window.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        var svgCode = new SVGBuilder_1.SVGBuilder().build(pb.drawables, { canvasSize: pb.canvasSize, offset: pb.draw.offset, zoom: pb.draw.scale });\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof window[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function an the eligrey/SaveFile library?\";\n        var _saveAs = window[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = window.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio; // 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    ;\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        //const viewport:Bounds = this.viewport();\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        PlotBoilerplate.utils.disableBezierPathAutoAdjust(drawable);\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = {\n            x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX / this.config.cssScaleX,\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY / this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : (h.attr.draggable ? color : 'rgba(128,128,128,0.5)');\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath_1.BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            if (d.bezierCurves[c].startPoint.attr.visible)\n                                this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            if (d.bezierCurves[c].endPoint.attr.visible)\n                                this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        if (d.bezierCurves[c].startControlPoint.attr.visible)\n                            this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        if (d.bezierCurves[c].endControlPoint.attr.visible)\n                            this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon_1.Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices) {\n                        d.vertices[i].attr.renderTime = renderTime;\n                    }\n                }\n            }\n            else if (d instanceof Triangle_1.Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse_1.VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Circle_1.Circle) {\n                this.draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n            }\n            else if (d instanceof Vertex_1.Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line_1.Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector_1.Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                    this.draw.circleHandle(d.b, 3, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage_1.PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime && this.vertices[i].attr.visible) {\n                this.draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            // window.alert( space.width + \" \" + space.height );\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX,\n            y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    ;\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar')) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    ;\n    /**\n    * Set a new zoom value (and re-adjust the draw offset).\n    *\n    * Note: the function will not trigger any redraws.\n    *\n    * @param {number} zoomFactorX - The new horizontal zoom value.\n    * @param {number} zoomFactorY - The new vertical zoom value.\n    * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n    **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                return { x: pos.x - _self.canvas.offsetLeft,\n                    y: pos.y - _self.canvas.offsetTop\n                };\n            };\n            if (window[\"AlloyFinger\"] && typeof window[\"AlloyFinger\"] == \"function\") {\n                try {\n                    // Do not include AlloyFinger itself to the library\n                    // (17kb, but we want to keep this lib as tiny as possible).\n                    var AF = window[\"AlloyFinger\"];\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var af = new AF(this.canvas, {\n                        touchStart: function (e) {\n                            if (e.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == 'vertex') {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (e) {\n                            if (e.touches.length == 1 && draggedElement) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var rel = relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }); //  points[0] );\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (e.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                e.preventDefault();\n                                e.stopPropagation();\n                                _self.setOffset(_self.draw.offset.clone().addXY(e.deltaX, e.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (e) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == 'vertex') {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = { params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (e) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (e) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (e) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (e) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(e.touches.item(0).clientX, e.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(e.touches.item(1).clientX, e.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * e.zoom, multiTouchStartScale.y * e.zoom, center);\n                            _self.redraw();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n                ;\n            }\n            else if (window[\"Touchy\"] && typeof window[\"Touchy\"] == \"function\") {\n                console.error('[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.');\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            ;\n            class_1.prototype.isVertex = function () { return this.typeName == PlotBoilerplate.Draggable.VERTEX; };\n            ;\n            class_1.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n            ;\n            return class_1;\n        }()),\n        _a.VERTEX = 'vertex',\n        _a);\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == 'boolean')\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == 'number')\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == 'function' && typeof extension[k] == 'function')\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error('error in key ', k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === 'number')\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'boolean')\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) { // && !bezierPath.adjustCircular ) { \n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        },\n        /**\n         * Removes vertex listeners from the path's vertices. This needs to be called\n         * when BezierPaths are removed from the canvas.\n         *\n         * Sorry, this is not yet implemented.\n         *\n         * @param {BezierPath} bezierPath - The path to use un-auto-adjustment for.\n         **/\n        disableBezierPathAutoAdjust: function (bezierPath) {\n            // How to determine which listeners are mine???\n            /*\n              for( var i = 0; i < bezierPath.bezierCurves.length; i++ ) {\n            // Just try to remove listeners from all vertices on the Bézier path.\n            // No matter if there are not listeners installed for some reason.\n            bezierPath.bezierCurves[i].startPoint.listeners.removeDragListener( );\n            }\n            */\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * A default SVG builder.\n *\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVGBuilder = /** @class */ (function () {\n    function SVGBuilder() {\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    SVGBuilder.prototype.build = function (drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    };\n    ;\n    return SVGBuilder;\n}());\nexports.SVGBuilder = SVGBuilder;\n//# sourceMappingURL=SVGBuilder.js.map"],"sourceRoot":""}