{"version":3,"sources":["webpack://pb/webpack/universalModuleDefinition","webpack://pb/plotboilerplate.min.js","webpack://pb/webpack/bootstrap","webpack://pb/./src/js/Vertex.js","webpack://pb/./src/js/Bounds.js","webpack://pb/./src/js/Line.js","webpack://pb/./src/js/Vector.js","webpack://pb/./src/js/VertexAttr.js","webpack://pb/./src/js/CubicBezierCurve.js","webpack://pb/./src/js/BezierPath.js","webpack://pb/./src/js/Polygon.js","webpack://pb/./src/js/Triangle.js","webpack://pb/./src/js/Circle.js","webpack://pb/./src/js/VertexListeners.js","webpack://pb/./src/js/Grid.js","webpack://pb/./src/js/VertTuple.js","webpack://pb/./src/js/geomutils.js","webpack://pb/./src/js/VEllipse.js","webpack://pb/./src/js/PBImage.js","webpack://pb/./src/js/MouseHandler.js","webpack://pb/./src/js/KeyHandler.js","webpack://pb/./src/js/draw.js","webpack://pb/./src/js/drawgl.js","webpack://pb/./src/js/entry.js","webpack://pb/./src/js/PlotBoilerplate.js","webpack://pb/./src/js/SVGBuilder.js"],"names":["root","factory","exports","module","define","amd","window","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","VertexAttr_1","VertexListeners_1","Vertex","x","y","this","className","tuple","NaN","attr","VertexAttr","listeners","VertexListeners","set","setX","setY","invX","invY","add","console","warn","addXY","amountX","amountY","addX","addY","sub","equals","vertex","eqX","Math","abs","EPSILON","eqY","result","clone","distance","vert","sqrt","pow","difference","scale","factor","center","rotate","angle","atan2","len","ZERO","cos","sin","multiplyScalar","scalar","round","inv","toString","toSVGString","options","buffer","push","join","randomVertex","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","PI","Bounds","width","height","__extends","extendStatics","b","setPrototypeOf","__proto__","Array","__","constructor","VertTuple_1","Vertex_1","Line","_super","a","_this","intersection","line","denominator","numerator1","numerator2","VertTuple","Vector","vertA","vertB","perp","v","inverse","tmp","length","draggable","selectable","isSelected","model","Bounds_1","Vector_1","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","moveCurvePoint","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","log","translate","amount","reverse","getLength","pointA","pointB","curveStep","tmpLength","newLength","getPointAt","getBounds","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","getPointByID","id","Error","getPoint","u","getTangentAt","t2","nt2","tX","tY","getSubCurveAt","tStart","tEnd","startVec","endVec","convertU2T","getTangent","getPerpendicular","getPerpendicularAt","tangentVector","curve","isInstance","obj","toSVGPathData","toJSON","prettyFormat","jsonString","fromJSON","JSON","parse","fromObject","fromArray","arr","isArray","CubicBezierCurve_1","BezierPath","pathPoints","totalArcLength","adjustCircular","bezierCurves","addCurve","adjustSuccessorControlPoint","locateCurveByStartPoint","point","locateCurveByEndPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","getCurveCount","getCurveAt","curveIndex","anchor","scaling","uTemp","bCurve","relativeU","uResult","_locateUIndex","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","curves","predecessor","successor","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","bPath","lastCurve","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","bezierPath","BezierPath_1","Polygon","isOpen","containsVert","inside","j","xi","yi","xj","yj","intersect","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","Circle_1","Line_1","Polygon_1","geomutils_1","Triangle","calcCircumcircle","getCentroid","scaleToCentroid","centroid","getCircumcircle","radius","Circle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","bounds","cx","cy","radius_squared","inCircumcircle","dist_squared","min3","max3","toPolygon","determinant","containsPoint","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","circleIntersA","getClosestPoint","circleIntersB","circleIntersC","getIncircle","getIncenter","px","py","p0x","p0y","p1x","p1y","p2x","p2y","area","lineDistance","closestPointOnLine","vertAt","circleUtils","tangentAt","drag","dragStart","dragEnd","addDragListener","listener","_addListener","removeDragListener","_removeListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","fireDragEvent","e","_fireEvent","fireDragStartEvent","fireDragEndEvent","_self","ve","params","newListener","oldListener","splice","Grid","size","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","setLength","normalize","moveTo","newA","diff","v0","v1","colinear","getClosestT","l2","vtutils","dist2","pointDistance","w","Triangle_1","pA","pB","pC","triangle","lineAB","lineAC","insideAngle","clockwise","lineLength","scaleFactor","VEllipse","axis","PBImage","image","upperLeft","lowerRight","XMouseEvent","apply","arguments","MouseEvent","XWheelEvent","WheelEvent","MouseHandler","element","mouseDownPos","undefined","mouseDragPos","mousePos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","click","wheel","addEventListener","offsetX","offsetY","eventName","rel","xEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","move","up","down","destroy","removeEventListener","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","event","hasListener","lis","keyCode","fireDownEvent","handler","firePressEvent","fireUpEvent","key2code","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","press","isDown","break","backspace","delete","tab","clear","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","end","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","h","k","q","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","next","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","drawutils","context","fillShapes","ctx","offset","beginDrawCycle","color","lineWidth","save","beginPath","lineTo","strokeStyle","stroke","restore","arrow","_fillOrDraw","position","drawImage","naturalWidth","naturalHeight","rect","closePath","fillStyle","fill","cubicBezier","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","handle","square","handleLine","dot","arc","circle","ellipse","radiusX","radiusY","grid","sizeX","sizeY","yMin","ceil","yMax","xMin","xMax","raster","diamondHandle","squareHandle","circleHandle","crosshair","polygon","polyline","setLineDash","label","text","rotation","fillText","strokeText","clearRect","canvas","fillRect","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","copyInstance","copy","_x2rel","_y2rel","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","currentRotation","uniform2fv","drawArrays","LINES","cubicBezierCurveHandleLines","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","vertStatus","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","PlotBoilerplate","draw_1","drawgl_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","SVGBuilder_1","VEllipse_1","config","bezierAutoAdjust","renderTime","fullSize","fetch","val","fitToParent","bool","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","vector","document","querySelector","getContext","draw","canvasSize","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","svgCode","SVGBuilder","build","zoom","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","fitToView","canvasCenter","canvasRatio","ratio","setOffset","newUniformZoom","setZoom","setConsole","con","error","setCSSscale","drawable","enableBezierPathAutoAdjust","remove","removeVertex","disableBezierPathAutoAdjust","gScale","gSize","cs","_handleColor","drawDrawables","drawSelectPolygon","Date","getTime","clearSelection","transformMousePosition","getAvailableContainerSpace","container","parentNode","style","display","padding","parseFloat","getComputedStyle","getPropertyValue","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_setSize","innerWidth","documentElement","body","innerHeight","top","left","space","selectVerticesInPolygon","locatePointNear","tolerance","vindex","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","keyHandler","typeName","paths","pindex","cindex","pid","mouseDownHandler","which","mouseDragHandler","oldDragAmount","mouseUpHandler","mouseWheelHandler","zoomStep","we","deltaY","preventDefault","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","relPos_1","offsetLeft","offsetTop","AF","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","touchStart","touches","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","touchMove","stopPropagation","trans","draggingVertex","fakeEvent","deltaX","touchEnd","touchCancel","multipointStart","multipointEnd","pinch","fingerA","item","fingerB","Touchy","one","hand","finger","lastPoint","on","points","createGUI","_a","class_1","isVertex","safeMergeByKeys","extension","typ","transform","fallback","nl","indent"],"mappings":"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","file":"plotboilerplate.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn ","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pb\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pb\"] = factory();\n\telse\n\t\troot[\"pb\"] = factory();\n})(window, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @version  2.4.0\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr_1 = __webpack_require__(4);\nvar VertexListeners_1 = __webpack_require__(10);\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        /*if( x instanceof Vertex ) {\n            this.x = x.x;\n            this.y = x.y;\n            } */\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x = x.x;\n            this.y = x.y;\n        } else {\n            this.x = x;\n            this.y = y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A bounds class with min and max values.\n *\n * @requires XYCoords, Vertex, IBounds\n *\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @version  1.0.0\n *\n * @file Bopunds\n * @fileoverview A simple bounds class implementing IBounds.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    ;\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = __webpack_require__(12);\nvar Vertex_1 = __webpack_require__(0);\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = __webpack_require__(12);\nvar Vertex_1 = __webpack_require__(0);\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @version 2.4.1\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = __webpack_require__(1);\nvar Vertex_1 = __webpack_require__(0);\nvar Vector_1 = __webpack_require__(3);\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex_1.Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Bounds, Vertex, CubicBezierCurve, XYCoords, SVGSerializable\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @version 2.2.1\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = __webpack_require__(1);\nvar CubicBezierCurve_1 = __webpack_require__(5);\nvar Vertex_1 = __webpack_require__(0);\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BezierPath_1 = __webpack_require__(6);\nvar Vertex_1 = __webpack_require__(0);\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon, SVGSerializale\n *\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the getIncenter function.\n * @version   2.3.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = __webpack_require__(1);\nvar Circle_1 = __webpack_require__(9);\nvar Line_1 = __webpack_require__(2);\nvar Polygon_1 = __webpack_require__(7);\nvar Vertex_1 = __webpack_require__(0);\nvar geomutils_1 = __webpack_require__(13);\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line, Vector, VertTuple, Vertex, SVGSerializale\n *\n * @author   Ikaros Kappler\n * @version  1.0.1\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n *\n * @file Circle\n * @fileoverview A simple circle class: center point and radius.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vector_1 = __webpack_require__(3);\nvar Vertex_1 = __webpack_require__(0);\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @param {number} angle - The angle (in radians) to use.\n     * @retrn {Vertex} Te the vertex (point) at the given angle.\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    Circle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            return new Vertex_1.Vertex(Math.sin(angle) * radius, Math.cos(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        // this.drag.push( listener );\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        // this.drag.push( listener );\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        //this.dragStart.push( listener );\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragEnd listener.\n     *\n     * @method addDragEndListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires Vertex\n *\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modofied 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @version 1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = __webpack_require__(0);\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {Vertex} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {Vertex} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (typeof line == 'undefined')\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @method getClosestT\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Wrap to [0,1]?\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        //function dist2(v, w) {\n        //    return (v.x - w.x)*(v.x - w.x) + (v.y - w.y)*(v.y - w.y);\n        //}\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = __webpack_require__(2);\nvar Triangle_1 = __webpack_require__(8);\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the slope (theta) of line AB and line AC\n        var thetaAB = lineAB.angle();\n        var thetaAC = lineAC.angle();\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    }\n};\n//# sourceMappingURL=geomutils.js.map\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex, SVGSerializable\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n *\n * Usage\n * =====\n * Javascript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n * Typescript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( (e:XMouseEvent) => {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( (e:XMouseEvent) => {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( (e:XMouseEvent) => {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( (e:XMouseEvent) => {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @version  1.1.0\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.addEventListener(eventName,this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.removeEventListener(eventName,this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        'delete': 8,\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        // 'delete'\t : 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @version  1.5.6\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = __webpack_require__(5);\nvar Vertex_1 = __webpack_require__(0);\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @version  0.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = __webpack_require__(0);\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function () {\n        this._zindex = 0.0;\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierCurveHandleLines = function (curve) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/* Imports for webpack */\n\nwindow.VertexAttr = __webpack_require__(4).VertexAttr;\nwindow.VertexListeners = __webpack_require__(10).VertexListeners;\nwindow.Vertex = __webpack_require__(0).Vertex;\n\nwindow.Bounds = __webpack_require__(1).Bounds;\nwindow.Grid = __webpack_require__(11).Grid;\nwindow.Line = __webpack_require__(2).Line;\nwindow.Vector = __webpack_require__(3).Vector;\nwindow.CubicBezierCurve = __webpack_require__(5).CubicBezierCurve;\nwindow.BezierPath = __webpack_require__(6).BezierPath;\nwindow.Polygon = __webpack_require__(7).Polygon;\nwindow.Triangle = __webpack_require__(8).Triangle;\nwindow.VEllipse = __webpack_require__(14).VEllipse;\nwindow.Circle = __webpack_require__(9).Circle;\nwindow.PBImage = __webpack_require__(15).PBImage;\nwindow.MouseHandler = __webpack_require__(16).MouseHandler;\nwindow.KeyHandler = __webpack_require__(17).KeyHandler;\nwindow.drawutils = __webpack_require__(18).drawutils;\nwindow.drawutilsgl = __webpack_require__(19).drawutilsgl;\nwindow.geomutils = __webpack_require__(13).geomutils;\nwindow.PlotBoilerplate = __webpack_require__(21).PlotBoilerplate;\n\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, VEllipse, Circle, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-06-06 Replacing Touchy.js by AlloyFinger.js\n * @version  1.8.2\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar draw_1 = __webpack_require__(18);\nvar drawgl_1 = __webpack_require__(19);\nvar BezierPath_1 = __webpack_require__(6);\nvar Bounds_1 = __webpack_require__(1);\nvar Circle_1 = __webpack_require__(9);\nvar Grid_1 = __webpack_require__(11);\nvar KeyHandler_1 = __webpack_require__(17);\nvar Line_1 = __webpack_require__(2);\nvar MouseHandler_1 = __webpack_require__(16);\nvar PBImage_1 = __webpack_require__(15);\nvar Polygon_1 = __webpack_require__(7);\nvar SVGBuilder_1 = __webpack_require__(22);\nvar Triangle_1 = __webpack_require__(8);\nvar VEllipse_1 = __webpack_require__(14);\nvar Vector_1 = __webpack_require__(3);\nvar Vertex_1 = __webpack_require__(0);\nvar VertexAttr_1 = __webpack_require__(4);\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false, renderTime: 0, selectable: true, isSelected: false, draggable: true };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterScaleX: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleX', 1.0),\n            rasterScaleY: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleY', 1.0),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            autoDetectRetina: PlotBoilerplate.utils.fetch.bool(config, 'autoDetectRetina', true),\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            circle: {\n                color: '#22a8a8',\n                lineWidth: 2\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.querySelector(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            console.log(drawgl_1.drawutilsgl);\n            this.draw = new drawgl_1.drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new draw_1.drawutils(this.ctx, false);\n            this.fill = new draw_1.drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for modules/global, too!\n        if (window)\n            window.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        var svgCode = new SVGBuilder_1.SVGBuilder().build(pb.drawables, { canvasSize: pb.canvasSize, offset: pb.draw.offset, zoom: pb.draw.scale });\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof window[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function an the eligrey/SaveFile library?\";\n        var _saveAs = window[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = window.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio; // 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n        // this.config.fullSize = false;\n        // this.config.fitToParent = false;\n        //console.log( 'pixelRatio', pixelRatio );\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    ;\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        //const viewport:Bounds = this.viewport();\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        // const center:Vertex = new Vertex( bounds.max.x - bounds.width/2.0, bounds.max.y - bounds.height/2.0 );\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        //center.addXY( this.canvasSize.width/2.0, this.canvasSize.height/2.0 );\n        // But keep the old center of bounds\n        //this.setOffset( center.clone().inv().addXY( this.canvasSize.width/2.0, this.canvasSize.height/2.0 ) );\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n            // this.setZoom( viewport.height/bounds.height, viewport.height/bounds.height, center );\n            //this.setZoom( viewport.width/bounds.width, viewport.width/bounds.width, center );\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n            // this.setZoom( this.canvasSize.width/bounds.width, this.canvasSize.width/bounds.width, center );\n        }\n        this.redraw();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        if (typeof con.log != 'function')\n            throw \"Console object must have a 'log' function.\";\n        if (typeof con.warn != 'function')\n            throw \"Console object must have a 'warn' function.\";\n        if (typeof con.error != 'function')\n            throw \"Console object must have a 'error' function.\";\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                // Check if some listeners need to be removed\n                if (drawable instanceof BezierPath_1.BezierPath)\n                    PlotBoilerplate.utils.disableBezierPathAutoAdjust(drawable);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = {\n            x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX / this.config.cssScaleX,\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY / this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.draggable ? color : 'rgba(128,128,128,0.5)';\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        // Draw drawables\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath_1.BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, 'orange'));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, 'orange'));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon_1.Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices)\n                        d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Triangle_1.Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse_1.VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Circle_1.Circle) {\n                this.draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n            }\n            else if (d instanceof Vertex_1.Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable)) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line_1.Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector_1.Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable) {\n                    this.draw.circleHandle(d.b, 3, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage_1.PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime) {\n                this.draw.squareHandle(this.vertices[i], 5, this.vertices[i].attr.isSelected ? 'rgba(192,128,0)' : this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            // window.alert( space.width + \" \" + space.height );\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {object} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar')) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    ;\n    /**\n    * Set a new zoom value (and re-adjust the draw offset).\n    *\n    * Note: the function will not trigger any redraws.\n    *\n    * @param {number} zoomFactorX - The new horizontal zoom value.\n    * @param {number} zoomFactorY - The new vertical zoom value.\n    * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n    **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                return { x: pos.x - _self.canvas.offsetLeft,\n                    y: pos.y - _self.canvas.offsetTop\n                };\n            };\n            if (window[\"AlloyFinger\"] && typeof window[\"AlloyFinger\"] == \"function\") {\n                // console.log('Alloy finger found.');\n                try {\n                    // Do not include AlloyFinger itself to the library\n                    // (17kb, but we want to keep this lib as tiny as possible).\n                    var AF = window[\"AlloyFinger\"];\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                    };\n                    var af = new AF(this.canvas, {\n                        touchStart: function (e) {\n                            if (e.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                            }\n                        },\n                        touchMove: function (e) {\n                            if (e.touches.length == 1 && draggedElement) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var rel = relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }); //  points[0] );\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (e.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                e.preventDefault();\n                                e.stopPropagation();\n                                _self.setOffset(_self.draw.offset.clone().addXY(e.deltaX, e.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (e) {\n                            clearTouch();\n                        },\n                        touchCancel: function (e) {\n                            clearTouch();\n                        },\n                        multipointStart: function (e) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (e) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (e) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(e.touches.item(0).clientX, e.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(e.touches.item(1).clientX, e.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * e.zoom, multiTouchStartScale.y * e.zoom, center);\n                            _self.redraw();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n                ;\n            }\n            else if (window[\"Touchy\"] && typeof window[\"Touchy\"] == \"function\") {\n                console.warn('(Deprecation) Found Touchy which support will stop soon. Please use AlloyFinger instead.');\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n                // Some private vars to store the current mouse/position/button state.\n                var touchMovePos = null;\n                var touchDownPos = null;\n                var draggedElement = null;\n                var Touchy = (window[\"Touchy\"]);\n                new Touchy(this.canvas, { one: function (hand, finger) {\n                        touchMovePos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        touchDownPos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                        if (draggedElement) {\n                            // The Touchy-points also have 'id' and 'time' attributes\n                            // which we are not interested in here.\n                            hand.on('move', function (points) {\n                                var rel = relPos_1(points[0]);\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            });\n                        }\n                    }\n                });\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. Touchy and AlloyFinger are missig. Did you include at least one of them?\");\n            }\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            ;\n            class_1.prototype.isVertex = function () { return this.typeName == PlotBoilerplate.Draggable.VERTEX; };\n            ;\n            class_1.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n            ;\n            return class_1;\n        }()),\n        _a.VERTEX = 'vertex',\n        _a);\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                console.log(k, extension[k]);\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == 'boolean')\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == 'number')\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == 'function' && typeof extension[k] == 'function')\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error('error in key ', k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === 'number')\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'boolean')\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) { // && !bezierPath.adjustCircular ) { \n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        },\n        /**\n         * Removes vertex listeners from the path's vertices. This needs to be called\n         * when BezierPaths are removed from the canvas.\n         *\n         * Sorry, this is not yet implemented.\n         *\n         * @param {BezierPath} bezierPath - The path to use un-auto-adjustment for.\n         **/\n        disableBezierPathAutoAdjust: function (bezierPath) {\n            // How to determine which listeners are mine???\n            /*\n              for( var i = 0; i < bezierPath.bezierCurves.length; i++ ) {\n            // Just try to remove listeners from all vertices on the Bézier path.\n            // No matter if there are not listeners installed for some reason.\n            bezierPath.bezierCurves[i].startPoint.listeners.removeDragListener( );\n            }\n            */\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * A default SVG builder.\n *\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVGBuilder = /** @class */ (function () {\n    function SVGBuilder() {\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    SVGBuilder.prototype.build = function (drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    };\n    ;\n    return SVGBuilder;\n}());\nexports.SVGBuilder = SVGBuilder;\n//# sourceMappingURL=SVGBuilder.js.map\n\n/***/ })\n/******/ ]);\n});"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 20);\n","\"use strict\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires VertexAttr\n *\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @version  2.4.0\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        /*if( x instanceof Vertex ) {\n            this.x = x.x;\n            this.y = x.y;\n            } */\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x = x.x;\n            this.y = x.y;\n        } else {\n            this.x = x;\n            this.y = y;\n            }*/\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invy\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        /* if( typeof x == 'object' && typeof x.x == 'number' && typeof x.y == 'number' ) {\n            this.x -= x.x;\n            this.y -= x.y;\n        } else {\n            this.x -= x;\n            this.y -= y;\n            } */\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    console.warn(\"Cannot add \" + typeof x + \" to numeric x component!\");\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    console.warn(\"Cannot add \" + typeof y + \" to numeric y component!\");\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {Vertex} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        var lenX = this.x;\n        var lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @classdesc A bounds class with min and max values.\n *\n * @requires XYCoords, Vertex, IBounds\n *\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @version  1.0.0\n *\n * @file Bopunds\n * @fileoverview A simple bounds class implementing IBounds.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    ;\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  2.1.2\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.2.1\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n *\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Vertex, Vector\n *\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @version 2.4.1\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone(), pointB = new Vertex_1.Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        var u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        var t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @classdesc A refactored BezierPath class.\n *\n * @require Bounds, Vertex, CubicBezierCurve, XYCoords, SVGSerializable\n *\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @version 2.2.1\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n        //console.error( \"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\" );\n        //throw Error(\"THIS CONSTRUCTOR IS DEPRECATED. USE .fromArray INSTEAD.\");\n        /*\n        for( var i = 1; i < pathPoints.length; i++ ) {\n            var bounds = new THREE.Box2( pathPoints[i].x - pathPoints[i-1].x,\n                         pathPoints[i].y - pathPoints[i-1].y\n                           );\n            // Create a new Bezier curve inside the box\n            var bCurve =  new CubicBezierCurve( pathPoints[i-1],\n                            pathPoints[i],\n                            new Vertex( pathPoints[i-1].x,\n                                    pathPoints[i-1].y - bounds.min/2\n                                  ),\n                            // This control point will be auto-adjusted in the next step\n                            new Vertex( pathPoints[i].x + bounds.max/2,\n                                    pathPoints[i].y\n                                  )\n                              );\n            this.bezierCurves.push( bCurve );\n            this.totalArcLength += bCurve.getLength();\n            \n            // Auto adjust the second control point (should be on a linear sub-space)\n            if( this.bezierCurves.length >= 2 ) {\n            this.adjustSuccessorControlPoint( this.bezierCurves.length-2, // curveIndex,\n                              true,                       // obtain handle length?\n                              true                        // update arc lengths\n                            );\n            }\n        }\n        */\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            return null;\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    // !!! TODO: SHOULDNT THIS BE A STATIC FUNCTION ???\n    BezierPath.adjustNeighbourControlPoint = function (mainCurve, neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, updateArcLengths) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(null);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(null);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve = null;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint = null;\n        var startControlPoint = null;\n        var endControlPoint = null;\n        var endPoint = null;\n        var i = 0;\n        do {\n            if (i == 0)\n                startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @classdesc A polygon class.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @version 1.1.1\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {Vertex} vert - The vertex to check.The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        //    // ray-casting algorithm based on\n        //    // http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotatee the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Vertex, Polygon, SVGSerializale\n *\n *\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the getIncenter function.\n * @version   2.3.0\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        //if( !Array.isArray(arr) )\n        //    throw new Exception(\"Cannot create triangle fromArray from non-array.\");\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            //\n            var area = 1 / 2 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line, Vector, VertTuple, Vertex, SVGSerializale\n *\n * @author   Ikaros Kappler\n * @version  1.0.1\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n *\n * @file Circle\n * @fileoverview A simple circle class: center point and radius.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @param {number} angle - The angle (in radians) to use.\n     * @retrn {Vertex} Te the vertex (point) at the given angle.\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    Circle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            return new Vertex_1.Vertex(Math.sin(angle) * radius, Math.cos(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.0.4\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        // this.drag.push( listener );\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        // this.drag.push( listener );\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        //this.dragStart.push( listener );\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragEnd listener.\n     *\n     * @method addDragEndListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @classdesc A grid class with vertical and horizontal lines.\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires Vertex\n *\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modofied 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @version 1.0.1\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {Vertex} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {Vertex} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (typeof line == 'undefined')\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @method getClosestT\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Wrap to [0,1]?\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        //function dist2(v, w) {\n        //    return (v.x - w.x)*(v.x - w.x) + (v.y - w.y)*(v.y - w.y);\n        //}\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the slope (theta) of line AB and line AC\n        var thetaAB = lineAB.angle();\n        var thetaAC = lineAC.angle();\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    }\n};\n//# sourceMappingURL=geomutils.js.map","\"use strict\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * @classdesc A wrapper for image objects.\n *\n * @requires Vertex, SVGSerializable\n *\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version 1.0.2\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        /* if( typeof image == 'undefined' )\n            throw Error('image must not be null.');\n        if( typeof upperLeft == 'undefined' )\n            throw Error('upperLeft must not be null.');\n        if( typeof lowerRight == 'undefined' )\n            throw Error('lowerRight must not be null.'); */\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    // Implement SVGSerializable\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n *\n * Usage\n * =====\n * Javascript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( function(e) {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( function(e) {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( function(e) {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( function(e) {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( function(e) {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( function(e) {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n * Typescript:\n *   new MouseHandler( document.getElementById('mycanvas') )\n *\t    .drag( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n *\t\tif( e.params.leftMouse ) ;\n *\t\telse if( e.params.rightMouse ) ;\n *\t    } )\n *\t    .move( (e:XMouseEvent) => {\n *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n *\t    } )\n *          .up( (e:XMouseEvent) => {\n *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n *          } )\n *          .down( (e:XMouseEvent) => {\n *              console.log( 'Mouse down.' );\n *          } )\n *          .click( (e:XMouseEvent) => {\n *              console.log( 'Click.' );\n *          } )\n *          .wheel( (e:XMouseEvent) => {\n *              console.log( 'Wheel. delta='+e.deltaY );\n *          } )\n *\n *\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @version  1.1.0\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    // +----------------------------------------------------------------------\n    // | Some private vars to store the current mouse/position/button state.\n    // +-------------------------------------------------\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY // e.pageY - e.target.offsetTop\n        };\n    };\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.addEventListener(eventName,this.handlers[eventName]);\n        this.installed[eventName] = true;\n    };\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        // this.element.removeEventListener(eventName,this.handlers[eventName]);\n        delete this.installed[eventName];\n    };\n    // +----------------------------------------------------------------------\n    // | The installer functions.\n    // |\n    // | Pass your callbacks here.\n    // | Note: they support chaining.\n    // +-------------------------------------------------\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        //listeners.drag = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    // +----------------------------------------------------------------------\n    // | Call this when your work is done.\n    // |\n    // | The function will un-install all event listeners.\n    // +-------------------------------------------------\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * A generic key handler.\n *\n * Example\n * =======\n *\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n *\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.1\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @param options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : window;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     *  @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     *  @param {(e:KeyboardEvent)=>void) e - The callback to be triggered.\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     *  Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        'delete': 8,\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        // 'delete'\t : 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @version  1.5.6\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\n// Todo: rename this class to Drawutils\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutils.prototype.beginDrawCycle = function () {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number|string} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    /* cubicBezierCurveHandleLines( curve:CubicBezierCurve ) {\n    // Draw handle lines\n    this.cubicBezierHandleLines( curve.startPoint, curve.endPoint, curve.startControlPoint, curve.endControlPoint );\n    // this.draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    // this.draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n    }; */\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen && vertices.length > 2)\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    // THIS FUNCTION IS CURRENTLY NOT IN USE, AS SVG TO CANVAS ARC CONVERSION IS UN-NECESSARY COMPLICATED.\n    // BUT IT IS WORKING.\n    // Found in an old version of\n    //    https://github.com/canvg/canvg\n    /*\n    _context.drawutils.prototype.arcto = function(lastX,lastY,rx,ry,xAxisRotation,largeArcFlag,sweepFlag,x,y, color)\n    {\n    lastX = this.offset.x + this.scale.x*lastX;\n    lastY = this.offset.y + this.scale.y*lastY;\n    x = this.offset.x + this.scale.x*x;\n    y = this.offset.y + this.scale.y*y;\n    rx *= this.scale.x;\n    ry *= this.scale.y;\n    //--------------------\n    // rx, ry, xAxisRotation, largeArcFlag, sweepFlag, x, y\n    // are the 6 data items in the SVG path declaration following the A\n    //\n    // lastX and lastY are the previous point on the path before the arc\n    //--------------------\n    // useful functions\n    var m   = function (   v) {return Math.sqrt (Math.pow (v[0],2) + Math.pow (v[1],2))};\n    var r   = function (u, v) {return ( u[0]*v[0] + u[1]*v[1]) / (m(u) * m(v))};\n    var ang = function (u, v) {return ((u[0]*v[1] < u[1]*v[0])? -1 : 1) * Math.acos (r (u,v))};\n    //--------------------\n\n    var currpX =  Math.cos (xAxisRotation) * (lastX - x) / 2.0 + Math.sin (xAxisRotation) * (lastY - y) / 2.0 ;\n    var currpY = -Math.sin (xAxisRotation) * (lastX - x) / 2.0 + Math.cos (xAxisRotation) * (lastY - y) / 2.0 ;\n\n    var l = Math.pow (currpX,2) / Math.pow (rx,2) + Math.pow (currpY,2) / Math.pow (ry,2);\n    if (l > 1) {rx *= Math.sqrt (l); ry *= Math.sqrt (l)};\n    var s = ((largeArcFlag == sweepFlag)? -1 : 1) * Math.sqrt\n    (( (Math.pow (rx,2) * Math.pow (ry    ,2)) - (Math.pow (rx,2) * Math.pow (currpY,2)) - (Math.pow (ry,2) * Math.pow (currpX,2)))\n     / (Math.pow (rx,2) * Math.pow (currpY,2) +   Math.pow (ry,2) * Math.pow (currpX,2)));\n    if (isNaN (s)) s = 0 ;\n\n    var cppX = s *  rx * currpY / ry ;\n    var cppY = s * -ry * currpX / rx ;\n    var centpX = (lastX + x) / 2.0 + Math.cos (xAxisRotation) * cppX - Math.sin (xAxisRotation) * cppY ;\n    var centpY = (lastY + y) / 2.0 + Math.sin (xAxisRotation) * cppX + Math.cos (xAxisRotation) * cppY ;\n\n    var ang1 = ang ([1,0], [(currpX-cppX)/rx,(currpY-cppY)/ry]);\n    var a = [(  currpX-cppX)/rx,(currpY-cppY)/ry];\n    var b = [(-currpX-cppX)/rx,(-currpY-cppY)/ry];\n    var angd = ang (a,b);\n    if (r (a,b) <= -1) angd = Math.PI;\n    if (r (a,b) >=  1) angd = 0;\n\n    var rad = (rx > ry)? rx : ry;\n    var sx  = (rx > ry)? 1 : rx / ry;\n    var sy  = (rx > ry)? ry / rx : 1;\n\n    this.ctx.save();\n    this.ctx.beginPath();\n    this.ctx.moveTo( lastX, lastY );\n    this.ctx.translate (centpX,centpY);\n    this.ctx.rotate (xAxisRotation);\n    this.ctx.scale (sx, sy);\n    this.ctx.arc (0, 0, rad, ang1, ang1 + angd, 1 - sweepFlag);\n    this.ctx.scale (1/sx, 1/sy);\n    this.ctx.rotate (-xAxisRotation);\n    this.ctx.translate (-centpX, -centpY);\n    this._fillOrDraw( color );\n    this.ctx.restore();\n    };\n    */\n    // THIS FUNCTION IS CURRENTLY NOT IN USE\n    /*\n    _context.drawutils.prototype.text = function( text, x, y, options ) {\n    options = options || {};\n    //this.ctx.save();\n    x = this.offset.x+x*this.scale.x;\n    y = this.offset.y+y*this.scale.y;\n    var color = options.color || 'black';\n    if( this.fillShapes ) {\n        this.ctx.fillStyle = color;\n        this.ctx.fillText( text, x, y );\n    } else {\n        this.ctx.strokeStyle = color;\n        this.ctx.strokeText( text, x, y );\n    }\n    //this.ctx.restore();\n    };\n    */\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @version  0.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Vertex_1 = require(\"./Vertex\");\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function () {\n        this._zindex = 0.0;\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle cubic Bézier curve handle lines.\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method cubicBezierCurveHandleLines\n     * @param {CubicBezierCurve} curve - The curve.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierCurveHandleLines = function (curve) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/* Imports for webpack */\n\nwindow.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nwindow.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nwindow.Vertex = require(\"./Vertex.js\").Vertex;\n\nwindow.Bounds = require(\"./Bounds.js\").Bounds;\nwindow.Grid = require(\"./Grid.js\").Grid;\nwindow.Line = require(\"./Line.js\").Line;\nwindow.Vector = require(\"./Vector.js\").Vector;\nwindow.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nwindow.BezierPath = require(\"./BezierPath.js\").BezierPath;\nwindow.Polygon = require(\"./Polygon.js\").Polygon;\nwindow.Triangle = require(\"./Triangle.js\").Triangle;\nwindow.VEllipse = require(\"./VEllipse.js\").VEllipse;\nwindow.Circle = require(\"./Circle.js\").Circle;\nwindow.PBImage = require(\"./PBImage.js\").PBImage;\nwindow.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nwindow.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nwindow.drawutils = require(\"./draw.js\").drawutils;\nwindow.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;\nwindow.geomutils = require(\"./geomutils.js\").geomutils;\nwindow.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n\n","\"use strict\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex, Line, Vector, Polygon, PBImage, VEllipse, Circle, MouseHandler, KeyHandler, VertexAttr, CubicBezierCurve, BezierPath, Triangle, drawutils, drawutilsgl\n *\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-06-06 Replacing Touchy.js by AlloyFinger.js\n * @version  1.8.2\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar SVGBuilder_1 = require(\"./SVGBuilder\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false, renderTime: 0, selectable: true, isSelected: false, draggable: true };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.config = {\n            canvas: config.canvas,\n            fullSize: PlotBoilerplate.utils.fetch.val(config, 'fullSize', true),\n            fitToParent: PlotBoilerplate.utils.fetch.bool(config, 'fitToParent', true),\n            scaleX: PlotBoilerplate.utils.fetch.num(config, 'scaleX', 1.0),\n            scaleY: PlotBoilerplate.utils.fetch.num(config, 'scaleY', 1.0),\n            offsetX: PlotBoilerplate.utils.fetch.num(config, 'offsetX', 0.0),\n            offsetY: PlotBoilerplate.utils.fetch.num(config, 'offsetY', 0.0),\n            rasterGrid: PlotBoilerplate.utils.fetch.bool(config, 'rasterGrid', true),\n            rasterScaleX: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleX', 1.0),\n            rasterScaleY: PlotBoilerplate.utils.fetch.num(config, 'rasterScaleY', 1.0),\n            rasterAdjustFactor: PlotBoilerplate.utils.fetch.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: PlotBoilerplate.utils.fetch.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: PlotBoilerplate.utils.fetch.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: PlotBoilerplate.utils.fetch.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: PlotBoilerplate.utils.fetch.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: PlotBoilerplate.utils.fetch.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: PlotBoilerplate.utils.fetch.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: PlotBoilerplate.utils.fetch.num(config, 'cssScaleX', 1.0),\n            cssScaleY: PlotBoilerplate.utils.fetch.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: PlotBoilerplate.utils.fetch.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            autoDetectRetina: PlotBoilerplate.utils.fetch.bool(config, 'autoDetectRetina', true),\n            enableSVGExport: PlotBoilerplate.utils.fetch.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: PlotBoilerplate.utils.fetch.func(config, 'preClear', null),\n            preDraw: PlotBoilerplate.utils.fetch.func(config, 'preDraw', null),\n            postDraw: PlotBoilerplate.utils.fetch.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: PlotBoilerplate.utils.fetch.bool(config, 'enableMouse', true),\n            enableTouch: PlotBoilerplate.utils.fetch.bool(config, 'enableTouch', true),\n            enableKeys: PlotBoilerplate.utils.fetch.bool(config, 'enableKeys', true),\n            enableMouseWheel: PlotBoilerplate.utils.fetch.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: PlotBoilerplate.utils.fetch.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: PlotBoilerplate.utils.fetch.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: PlotBoilerplate.utils.fetch.bool(config, 'drawHandlePoints', true),\n            drawGrid: PlotBoilerplate.utils.fetch.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            circle: {\n                color: '#22a8a8',\n                lineWidth: 2\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.canvas = typeof config.canvas == 'string' ? document.querySelector(config.canvas) : config.canvas;\n        if (this.config.enableGL) {\n            this.ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n            console.log(drawgl_1.drawutilsgl);\n            this.draw = new drawgl_1.drawutilsgl(this.ctx, false);\n            // PROBLEM: same instance of fill and draw when using WebGL. Shader program cannot be duplicated on the same context\n            this.fill = this.draw.copyInstance(true);\n            console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n        }\n        else {\n            this.ctx = this.canvas.getContext('2d');\n            this.draw = new draw_1.drawutils(this.ctx, false);\n            this.fill = new draw_1.drawutils(this.ctx, true);\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        // TODO: this should be placed in the caller and work for modules/global, too!\n        if (window)\n            window.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        var svgCode = new SVGBuilder_1.SVGBuilder().build(pb.drawables, { canvasSize: pb.canvasSize, offset: pb.draw.offset, zoom: pb.draw.scale });\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof window[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function an the eligrey/SaveFile library?\";\n        var _saveAs = window[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = window.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio; // 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n        // this.config.fullSize = false;\n        // this.config.fitToParent = false;\n        //console.log( 'pixelRatio', pixelRatio );\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    ;\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        //const viewport:Bounds = this.viewport();\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        // const center:Vertex = new Vertex( bounds.max.x - bounds.width/2.0, bounds.max.y - bounds.height/2.0 );\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        //center.addXY( this.canvasSize.width/2.0, this.canvasSize.height/2.0 );\n        // But keep the old center of bounds\n        //this.setOffset( center.clone().inv().addXY( this.canvasSize.width/2.0, this.canvasSize.height/2.0 ) );\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n            // this.setZoom( viewport.height/bounds.height, viewport.height/bounds.height, center );\n            //this.setZoom( viewport.width/bounds.width, viewport.width/bounds.width, center );\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n            // this.setZoom( this.canvasSize.width/bounds.width, this.canvasSize.width/bounds.width, center );\n        }\n        this.redraw();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is window.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        if (typeof con.log != 'function')\n            throw \"Console object must have a 'log' function.\";\n        if (typeof con.warn != 'function')\n            throw \"Console object must have a 'warn' function.\";\n        if (typeof con.error != 'function')\n            throw \"Console object must have a 'error' function.\";\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++)\n                this.add(arr[i]);\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                // Check if some listeners need to be removed\n                if (drawable instanceof BezierPath_1.BezierPath)\n                    PlotBoilerplate.utils.disableBezierPathAutoAdjust(drawable);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        // for( var i in this.drawables ) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function () {\n        var gScale = {\n            x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX / this.config.cssScaleX,\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY / this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) // TODO: move config member to drawConfig\n                this.draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            else\n                this.draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function () {\n        // Add a crosshair to mark the origin\n        this.draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.draggable ? color : 'rgba(128,128,128,0.5)';\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @private\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime) {\n        // Draw drawables\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            if (d instanceof BezierPath_1.BezierPath) {\n                for (var c in d.bezierCurves) {\n                    this.draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                    if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                        if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, 'orange'));\n                            d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        }\n                        if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                            this.draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, 'orange'));\n                            d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        }\n                        this.draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                        this.draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    else {\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                        d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                    }\n                    if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                        this.draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                        this.draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    }\n                }\n            }\n            else if (d instanceof Polygon_1.Polygon) {\n                this.draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    for (var i in d.vertices)\n                        d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Triangle_1.Triangle) {\n                this.draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n                if (!this.drawConfig.drawHandlePoints)\n                    d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n            }\n            else if (d instanceof VEllipse_1.VEllipse) {\n                if (this.drawConfig.drawHandleLines) {\n                    this.draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                    this.draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n                }\n                this.draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n                if (!this.drawConfig.drawHandlePoints) {\n                    d.center.attr.renderTime = renderTime;\n                    d.axis.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Circle_1.Circle) {\n                this.draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n            }\n            else if (d instanceof Vertex_1.Vertex) {\n                if (this.drawConfig.drawVertices &&\n                    (!d.attr.selectable || !d.attr.draggable)) {\n                    // Draw as special point (grey)\n                    this.draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                    d.attr.renderTime = renderTime;\n                }\n            }\n            else if (d instanceof Line_1.Line) {\n                this.draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof Vector_1.Vector) {\n                this.draw.arrow(d.a, d.b, this.drawConfig.vector.color); // , this.drawConfig.vector.lineWidth );\n                if (this.drawConfig.drawHandlePoints && d.b.attr.selectable) {\n                    this.draw.circleHandle(d.b, 3, '#a8a8a8');\n                }\n                else {\n                    d.b.attr.renderTime = renderTime;\n                }\n                if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                    d.a.attr.renderTime = renderTime;\n                if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                    d.b.attr.renderTime = renderTime;\n            }\n            else if (d instanceof PBImage_1.PBImage) {\n                if (this.drawConfig.drawHandleLines)\n                    this.draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n                this.fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n                if (this.drawConfig.drawHandlePoints) {\n                    this.draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                    d.lowerRight.attr.renderTime = renderTime;\n                }\n            }\n            else {\n                this.console.error('Cannot draw object. Unknown class.'); //  ' + d.constructor.name + '.' );\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function () {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            this.draw.polygon(this.selectPolygon, '#888888');\n            this.draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices && this.vertices[i].attr.renderTime != renderTime) {\n                this.draw.squareHandle(this.vertices[i], 5, this.vertices[i].attr.isSelected ? 'rgba(192,128,0)' : this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        this.draw.beginDrawCycle();\n        this.fill.beginDrawCycle();\n        this.drawGrid();\n        if (this.config.drawOrigin)\n            this.drawOrigin();\n        this.drawDrawables(renderTime);\n        this.drawVertices(renderTime);\n        this.drawSelectPolygon();\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewPort\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        // var container : HTMLElement = _self.canvas.parentNode;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        var canvas = _self.canvas;\n        canvas.style.display = 'none';\n        var padding = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding')) || 0, border = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-width')) || 0, pl = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-left')) || padding, pr = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-right')) || padding, pt = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-top')) || padding, pb = parseFloat(window.getComputedStyle(container, null).getPropertyValue('padding-bottom')) || padding, bl = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-left-width')) || border, br = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-right-width')) || border, bt = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-top-width')) || border, bb = parseFloat(window.getComputedStyle(canvas, null).getPropertyValue('border-bottom-width')) || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvas.width = w;\n            _self.canvas.height = h;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            // window.alert( space.width + \" \" + space.height );\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        // var tolerance = 7;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (x, y) {\n        var _self = this;\n        var p = this.locatePointNear(_self.transformMousePosition(x, y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(x, y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {object} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1) // && !(window.TouchEvent && e.originalEvent instanceof TouchEvent) )\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar')) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged)\n            _self.handleClick(e.params.pos.x, e.params.pos.y);\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    ;\n    /**\n    * Set a new zoom value (and re-adjust the draw offset).\n    *\n    * Note: the function will not trigger any redraws.\n    *\n    * @param {number} zoomFactorX - The new horizontal zoom value.\n    * @param {number} zoomFactorY - The new vertical zoom value.\n    * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n    **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                return { x: pos.x - _self.canvas.offsetLeft,\n                    y: pos.y - _self.canvas.offsetTop\n                };\n            };\n            if (window[\"AlloyFinger\"] && typeof window[\"AlloyFinger\"] == \"function\") {\n                // console.log('Alloy finger found.');\n                try {\n                    // Do not include AlloyFinger itself to the library\n                    // (17kb, but we want to keep this lib as tiny as possible).\n                    var AF = window[\"AlloyFinger\"];\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                    };\n                    var af = new AF(this.canvas, {\n                        touchStart: function (e) {\n                            if (e.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                            }\n                        },\n                        touchMove: function (e) {\n                            if (e.touches.length == 1 && draggedElement) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var rel = relPos_1({ x: e.touches[0].clientX, y: e.touches[0].clientY }); //  points[0] );\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (e.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                e.preventDefault();\n                                e.stopPropagation();\n                                _self.setOffset(_self.draw.offset.clone().addXY(e.deltaX, e.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (e) {\n                            clearTouch();\n                        },\n                        touchCancel: function (e) {\n                            clearTouch();\n                        },\n                        multipointStart: function (e) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (e) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (e) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(e.touches.item(0).clientX, e.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(e.touches.item(1).clientX, e.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * e.zoom, multiTouchStartScale.y * e.zoom, center);\n                            _self.redraw();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n                ;\n            }\n            else if (window[\"Touchy\"] && typeof window[\"Touchy\"] == \"function\") {\n                console.warn('(Deprecation) Found Touchy which support will stop soon. Please use AlloyFinger instead.');\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n                // Some private vars to store the current mouse/position/button state.\n                var touchMovePos = null;\n                var touchDownPos = null;\n                var draggedElement = null;\n                var Touchy = (window[\"Touchy\"]);\n                new Touchy(this.canvas, { one: function (hand, finger) {\n                        touchMovePos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        touchDownPos = new Vertex_1.Vertex(relPos_1(finger.lastPoint));\n                        draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                        if (draggedElement) {\n                            // The Touchy-points also have 'id' and 'time' attributes\n                            // which we are not interested in here.\n                            hand.on('move', function (points) {\n                                var rel = relPos_1(points[0]);\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            });\n                        }\n                    }\n                });\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. Touchy and AlloyFinger are missig. Did you include at least one of them?\");\n            }\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        // TODO: move to demos.\n        if (window[\"utils\"] && typeof window[\"utils\"].createGUI == \"function\")\n            return window[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            ;\n            class_1.prototype.isVertex = function () { return this.typeName == PlotBoilerplate.Draggable.VERTEX; };\n            ;\n            class_1.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n            ;\n            return class_1;\n        }()),\n        _a.VERTEX = 'vertex',\n        _a);\n    /**\n     * A set of helper functions.\n     * @private\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                console.log(k, extension[k]);\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == 'boolean')\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == 'number')\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == 'function' && typeof extension[k] == 'function')\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error('error in key ', k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === 'number')\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'boolean')\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) { // && !bezierPath.adjustCircular ) { \n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        },\n        /**\n         * Removes vertex listeners from the path's vertices. This needs to be called\n         * when BezierPaths are removed from the canvas.\n         *\n         * Sorry, this is not yet implemented.\n         *\n         * @param {BezierPath} bezierPath - The path to use un-auto-adjustment for.\n         **/\n        disableBezierPathAutoAdjust: function (bezierPath) {\n            // How to determine which listeners are mine???\n            /*\n              for( var i = 0; i < bezierPath.bezierCurves.length; i++ ) {\n            // Just try to remove listeners from all vertices on the Bézier path.\n            // No matter if there are not listeners installed for some reason.\n            bezierPath.bezierCurves[i].startPoint.listeners.removeDragListener( );\n            }\n            */\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * A default SVG builder.\n *\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @version  1.0.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar SVGBuilder = /** @class */ (function () {\n    function SVGBuilder() {\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    SVGBuilder.prototype.build = function (drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    };\n    ;\n    return SVGBuilder;\n}());\nexports.SVGBuilder = SVGBuilder;\n//# sourceMappingURL=SVGBuilder.js.map"],"sourceRoot":""}