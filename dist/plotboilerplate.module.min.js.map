{"version":3,"file":"plotboilerplate.module.min.js","sources":["../src/ts/UIDGenerator.ts","../src/ts/VertexAttr.ts","../src/ts/VertexListeners.ts","../src/ts/Vertex.ts","../src/ts/Polygon.ts","../src/ts/Bounds.ts","../src/ts/VertTuple.ts","../src/ts/Vector.ts","../src/ts/CubicBezierCurve.ts","../src/ts/BezierPath.ts","../src/ts/Line.ts","../src/ts/Circle.ts","../src/ts/CircleSector.ts","../src/ts/draw.ts","../src/ts/drawgl.ts","../src/ts/Triangle.ts","../src/ts/geomutils.ts","../src/ts/Grid.ts","../src/ts/KeyHandler.ts","../src/ts/MouseHandler.ts","../src/ts/PBImage.ts","../src/ts/utils/helpers/drawutilssvg.ts","../src/ts/VEllipse.ts","../src/ts/PlotBoilerplate.ts","../src/ts/SVGBuilder.ts"],"sourcesContent":["/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\n\nimport { UID } from \"./interfaces\";\n\nexport abstract class UIDGenerator {\n    private static current : number = 0;\n    public static next() : UID { return `${UIDGenerator.current++}`; };\n};\n","/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\n\nexport interface IVertexAttr {\n    draggable : boolean;\n    selectable : boolean;\n    isSelected : boolean;\n    bezierAutoAdjust? : boolean;\n    renderTime? : number;\n    visible: boolean;\n}\n\n\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr implements IVertexAttr {\n\n    /** \n     * @member {boolean} \n     * @memberof VertexAttr\n     * @instance\n     */\n    draggable:boolean;\n\n    /** \n     * @member {boolean} \n     * @memberof VertexAttr\n     * @instance\n     */\n    selectable:boolean;\n\n    /** \n     * @member {boolean} \n     * @memberof VertexAttr\n     * @instance\n     */\n    isSelected:boolean;\n\n    /** \n     * @member {boolean} \n     * @memberof VertexAttr\n     * @instance\n     */\n    visible:boolean;\n    \n    \n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object \n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n\tthis.draggable = true;\n\tthis.selectable = true;\n\tthis.isSelected = false;\n\tthis.visible = true;\n\n\tfor( var key in VertexAttr.model ) \n\t    this[key] = VertexAttr.model[key];\n    };\n\n\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    static model:IVertexAttr = {\n\tdraggable : true,\n\tselectable: true,\n\tisSelected : false,\n\tvisible : true\n    };    \n}\n","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n\nimport { Vertex } from \"./Vertex\";\nimport { XMouseParams, XMouseEvent } from \"./MouseHandler\";\n\nexport interface VertEventParams extends XMouseParams {\n    vertex : Vertex;\n}\n\nexport interface VertEvent {\n    params : VertEventParams;\n}\n\nexport type VertListener = (e:VertEvent) => void;\n\n\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener \n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n\n    private click:Array<VertListener>;\n    private drag:Array<VertListener>;\n    private dragStart:Array<VertListener>;\n    private dragEnd:Array<VertListener>;\n    \n    private vertex:Vertex;\n    \n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor( vertex:Vertex ) {\n\tthis.click = [];\n\tthis.drag = [];\n\tthis.dragStart = [];\n\tthis.dragEnd = [];\n\tthis.vertex = vertex;\n    };\n\n\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener( listener:VertListener ) : VertexListeners {\n\tVertexListeners._addListener( this.click, listener );\n\treturn this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    \n\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener( listener:VertListener ) : VertexListeners {\n\tthis.click = VertexListeners._removeListener( this.click, listener );\n\treturn this;\n    };\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    \n\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener( listener:VertListener ) : VertexListeners {\n\tVertexListeners._addListener( this.drag, listener );\n\treturn this;\n    };\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    \n\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener( listener:VertListener ) : VertexListeners {\n\tthis.drag = VertexListeners._removeListener( this.drag, listener );\n\treturn this;\n    };\n    \n    \n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener( listener:VertListener) : VertexListeners {\n\tVertexListeners._addListener( this.dragStart, listener );\n\treturn this;\n    };\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n\n\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener( listener:VertListener ) : VertexListeners {\n\tthis.dragStart= VertexListeners._removeListener( this.dragStart, listener );\n\treturn this;\n    };\n    \n \n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener( listener:(e:VertEvent)=>void ) : VertexListeners {\n\t// this.dragEnd.push( listener );\n\tVertexListeners._addListener( this.dragEnd, listener );\n\treturn this;\n    };\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n\n\n     /**\n     * Remove a drag listener.\n     *\n     * @method removeDragEndListener\n     * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragEndListener( listener:(e:VertEvent)=>void ) : VertexListeners {\n\t// this.drag.push( listener );\n\tthis.dragEnd = VertexListeners._removeListener( this.dragEnd, listener );\n\treturn this;\n    };\n\n    \n     \n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent( e:VertEvent|XMouseEvent ) {\n\tVertexListeners._fireEvent(this,this.click,e);\n    };\n\n \n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent( e:VertEvent|XMouseEvent ) {\n\tVertexListeners._fireEvent(this,this.drag,e);\n    };\n\n\n    \n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent( e:VertEvent|XMouseEvent ) {\n\tVertexListeners._fireEvent(this,this.dragStart,e);\n    };\n\n\n    \n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent( e:VertEvent|XMouseEvent ) {\n\tVertexListeners._fireEvent(this,this.dragEnd,e);\n    };\n\n\n    \n    /**\n     * @private\n     **/\n    private static _fireEvent( _self:VertexListeners,\n\t\t\t       listeners:Array<(e:VertEvent)=>void>,\n\t\t\t       e:VertEvent|XMouseEvent\n\t\t\t     ) : void {\n\tconst ve : VertEvent = (e as unknown) as VertEvent;\n\tif( typeof ve.params == 'undefined' )\n\t    ve.params = ({ vertex : _self.vertex } as unknown) as VertEventParams;\n\telse\n\t    ve.params.vertex = _self.vertex; \n\tfor( var i in listeners ) {\n\t    listeners[i]( ve );\n\t}\n    };\n\n    /**\n     * @private\n     */\n    private static _addListener( listeners:Array<(e:VertEvent)=>void>,\n\t\t\t\t newListener:(e:VertEvent)=>void\n\t\t\t       ) : boolean {\n\tfor( var i in listeners ) {\n\t    if( listeners[i] == newListener )\n\t\treturn false;\n\t}\n\tlisteners.push( newListener );\n\treturn true;\n    };\n\n    /**\n     * @private\n     */\n    private static _removeListener( listeners:Array<(e:VertEvent)=>void>,\n\t\t\t\t    oldListener:(e:VertEvent)=>void\n\t\t\t       ) : Array<(e:VertEvent)=>void> {\n\tfor( var i = 0; i < listeners.length; i++ ) {\n\t    if( listeners[i] == oldListener )\n\t\treturn listeners.splice( i, 1 );\n\t}\n\treturn listeners;\n    };\n}\n","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modifeid 2020-10-30 Change the warnings in `sub(...)` and `add(...)` into real errors.\n * @version  2.4.1\n *\n * @file Vertex\n * @public\n **/\n\n\nimport { IVertexAttr, VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n * \n */\nexport class Vertex implements XYCoords, SVGSerializable {\n\n    private static readonly ZERO = new Vertex(0,0);\n\n    /**\n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"Vertex\";\n\n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof Vertex\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     * @readonly\n     **/\n    static readonly EPSILON = 1.0e-6;\n\n\n    /** \n     * @member {number} \n     * @memberof Vertex\n     * @instance\n     */\n    x:number;\n\n    /** \n     * @member {number} \n     * @memberof Vertex\n     * @instance\n     */\n    y:number;\n\n    /**\n     * @member {IVertexAttr}\n     * @memberof {Vertex}\n     * @instance\n     **/\n    attr:IVertexAttr;\n\n    /**\n     * @member {VertexListeners}\n     * @memberof {Vertex}\n     * @instance\n     **/\n    listeners:VertexListeners;\n    \n\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor( x?:number|XYCoords|undefined, y?:number|undefined ) {\n\tthis.uid = UIDGenerator.next();\n\tif( typeof x == 'undefined' ) {\n\t    this.x = 0;\n\t    this.y = 0;\n\t} else if( typeof x == 'number' && typeof y == 'number' ) {\n\t    this.x = x;\n\t    this.y = y;\n\t} else {\n\t    const tuple = (x as XYCoords);\n\t    if( typeof tuple.x == \"number\" && typeof tuple.y == \"number\" ) {\n\t\tthis.x = tuple.x;\n\t\tthis.y = tuple.y;\n\t    } else {\n\t\tif( typeof x == 'number' ) this.x = x;\n\t\telse if( typeof x == 'undefined' ) this.x = 0;\n\t\telse this.x = NaN;\n\t\tif( typeof y == 'number' ) this.y = y;\n\t\telse if( typeof y == 'undefined' ) this.y = 0;\n\t\telse this.y = NaN;\n\t    }\n\t}\n\tthis.attr = new VertexAttr();\n\tthis.listeners = new VertexListeners( this );\n    };\n\n\n    \n\n\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set( x:number|XYCoords, y?:number|undefined ):Vertex {\n\tif( typeof x == 'number' && typeof y == 'number' ) {\n\t    this.x = x;\n\t    this.y = y;\n\t} else {\n\t    const tuple = (x as XYCoords);\n\t    if( typeof tuple.x == \"number\" && typeof tuple.y == \"number\" ) {\n\t\tthis.x = tuple.x;\n\t\tthis.y = tuple.y;\n\t    } else {\n\t\tif( typeof x == 'number' ) this.x = x;\n\t\telse if( typeof x == 'undefined' ) this.x = 0;\n\t\telse this.x = NaN;\n\t\tif( typeof y == 'number' ) this.y = y;\n\t\telse if( typeof y == 'undefined' ) this.y = 0;\n\t\telse this.y = NaN;\n\t    }\n\t}\n\treturn this;\n    };\n\n\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX( x:number ):Vertex {\n\tthis.x = x;\n\treturn this;\n    };\n\n\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY( y:number ):Vertex {\n\tthis.y = y;\n\treturn this;\n    };\n\n\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX():Vertex {\n\tthis.x = -this.x;\n\treturn this;\n    };\n\n\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY():Vertex {\n\tthis.y = -this.y;\n\treturn this;\n    };\n    \n\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and \n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add( x:number|XYCoords, y?:number ):Vertex {\n\tif( typeof x == 'number' && typeof y == 'number' ) {\n\t    this.x += x;\n\t    this.y += y;\n\t} else {\n\t    const tuple = (x as XYCoords);\n\t    if( typeof tuple.x == \"number\" && typeof tuple.y == \"number\" ) {\n\t\tthis.x += tuple.x;\n\t\tthis.y += tuple.y;\n\t    } else {\n\t\tif( typeof x == 'number' ) this.x += x;\n\t\telse throw `Cannot add ${typeof x} to numeric x component!`;\n\t\tif( typeof y == 'number' ) this.y += y;\n\t\telse throw `Cannot add ${typeof y} to numeric y component!`;\n\t    }\n\t}\n\treturn this;\n    };\n\n\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     * \n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY( amountX:number, amountY:number ):Vertex {\n\tthis.x += amountX;\n\tthis.y += amountY;\n\treturn this;\n    };\n\n    \n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     * \n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX( amountX:number ):Vertex {\n\tthis.x += amountX;\n\treturn this;\n    };\n\n\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     * \n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY( amountY:number ):Vertex {\n\tthis.y += amountY;\n\treturn this;\n    };\n\n\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and \n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub( x:number|XYCoords, y?:number ):Vertex {\n\tif( typeof x == 'number' && typeof y == 'number' ) {\n\t    this.x -= x;\n\t    this.y -= y;\n\t} else {\n\t    const tuple = (x as XYCoords);\n\t    if( typeof tuple.x == \"number\" && typeof tuple.y == \"number\" ) {\n\t\tthis.x -= tuple.x;\n\t\tthis.y -= tuple.y;\n\t    } else {\n\t\tif( typeof x == 'number' ) this.x -= x;\n\t\telse throw `Cannot add ${typeof x} to numeric x component!`;\n\t\tif( typeof y == 'number' ) this.y -= y;\n\t\telse throw `Cannot add ${typeof y} to numeric y component!`;\n\t    }\n\t}\n\treturn this;\n    };\n    \n    \n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals( vertex:XYCoords ):boolean {\n\tvar eqX =  (Math.abs(this.x-vertex.x) < Vertex.EPSILON);\n\tvar eqY =  (Math.abs(this.y-vertex.y) < Vertex.EPSILON);\n\tvar result = eqX && eqY;\n\treturn result;\n    };\n\n\n    /**\n     * Create a copy of this vertex.\n     * \n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone():Vertex {\n\treturn new Vertex(this.x,this.y);\n    };\n\n\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance( vert:XYCoords ):number {\n\treturn Math.sqrt( Math.pow(vert.x-this.x,2) + Math.pow(vert.y-this.y,2) );\n    };\n\n    \n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle( origin?:XYCoords ) : number {\n\tconst a : number = (typeof origin === \"undefined\" ? Math.PI/2-Math.atan2( this.x, this.y ) : Math.PI/2-Math.atan2( origin.x-this.x, origin.y-this.y ));\n\t// Map to positive value\n\treturn a < 0 ? Math.PI*2+a : a;\n    };\n\n\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference( vert:XYCoords ):Vertex {\n\treturn new Vertex( vert.x-this.x, vert.y-this.y );\n    };\n\n\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale( factor:number, center:Vertex ):Vertex {\n\tif( !center || typeof center === \"undefined\" )\n\t    center = new Vertex(0,0);\n\tthis.x = center.x + (this.x-center.x)*factor;\n\tthis.y = center.y + (this.y-center.y)*factor; \n\treturn this;\n    };\n\n\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate( angle:number, center:Vertex|undefined ):Vertex {\n\tif( !center || typeof center === \"undefined\" )\n\t    center = new Vertex(0,0);\n\tthis.sub( center );\n\tangle += Math.atan2(this.y,this.x);\n\tlet len = this.distance(Vertex.ZERO); // {x:0,y:0});\n\tlet lenX = this.x;\n\tlet lenY = this.y;\n\tthis.x = len * Math.cos(angle);\n\tthis.y = len * Math.sin(angle);\n\tthis.add( center );\n\treturn this;\n    };\n\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar( scalar:number ) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n    };\n\n\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round():Vertex {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n    };\n\n\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv():Vertex {\n\tthis.x = -this.x;\n\tthis.y = -this.y;\n\treturn this;\n    };\n    \n    \n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString():string {\n\treturn '('+this.x+','+this.y+')';\n    };\n\n\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toSVGString( options:{ className?:string } ):string {\n\toptions = options || {};\n\tvar buffer = [];\n\tbuffer.push( '<circle' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tbuffer.push( ' cx=\"' + this.x + '\"' );\n\tbuffer.push( ' cy=\"' + this.y + '\"' );\n\tbuffer.push( ' r=\"2\"' );\n\tbuffer.push( ' />' );\n\treturn buffer.join('');\n    };\n    // END Vertex\n\n\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex( viewPort:{min:XYCoords,max:XYCoords} ):Vertex {\n\treturn new Vertex( viewPort.min.x + Math.random()*(viewPort.max.x-viewPort.min.x),\n\t\t\t   viewPort.min.y + Math.random()*(viewPort.max.y-viewPort.min.y)\n\t\t\t );\n    };\n\n\n    static utils = {\n\t/**\n\t * Generate a four-point arrow head, starting at the vector end minus the\n\t * arrow head length.\n\t *\n\t * The first vertex in the returned array is guaranteed to be the located\n\t * at the vector line end minus the arrow head length.\n\t *\n\t *\n\t * Due to performance all params are required.\n\t *\n\t * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n\t * scaling different). Arrow heads should not look distored on non-uniform scaling.\n\t *\n\t * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n\t * For headlen use 8, it's a good arrow head size.\n\t *\n\t * Example:\n\t *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n\t *\n\t * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n\t * @param {Vertex} zB - The end vertex of the vector.\n\t * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n\t * @param {number} scaleX  - The horizontal scaling during draw.\n\t * @param {number} scaleY  - the vertical scaling during draw.\n\t **/\n\t// @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n\tbuildArrowHead : ( zA:Vertex, zB:Vertex, headlen:number, scaleX:number, scaleY:number ) : Array<Vertex> => {\n\t    // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n\t    var angle :number = Math.atan2( (zB.y-zA.y)*scaleY, (zB.x-zA.x)*scaleX );\n\t    \n\t    var vertices : Array<Vertex>= [];\n\t    vertices.push( new Vertex(zB.x*scaleX-(headlen)*Math.cos(angle), zB.y*scaleY-(headlen)*Math.sin(angle)) );    \n\t    vertices.push( new Vertex(zB.x*scaleX-(headlen*1.35)*Math.cos(angle-Math.PI/8), zB.y*scaleY-(headlen*1.35)*Math.sin(angle-Math.PI/8) ) );\n\t    vertices.push( new Vertex(zB.x*scaleX, zB.y*scaleY) );\n\t    vertices.push( new Vertex(zB.x*scaleX-(headlen*1.35)*Math.cos(angle+Math.PI/8), zB.y*scaleY-(headlen*1.35)*Math.sin(angle+Math.PI/8)) );\n\n\t    return vertices;\n\t} \n\t\n    };\n    \n}\n","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.  \n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @version 1.7.0\n *\n * @file Polygon\n * @public\n **/\n\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon implements SVGSerializable {\n\n\n    /**\n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"Polygon\";\n\n    \n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof Polygon\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n    \n    /** \n     * @member {Array<Vertex>} \n     * @memberof Polygon\n     * @type {Array<Vertex>}\n     * @instance\n     */\n    vertices:Array<Vertex>;\n\n\n    /** \n     * @member {boolean} \n     * @memberof Polygon\n     * @type {boolean}\n     * @instance\n     */\n    isOpen:boolean;\n    \n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor( vertices?:Array<Vertex>, isOpen?:boolean ) {\n\tthis.uid = UIDGenerator.next();\n\tif( typeof vertices == 'undefined' )\n\t    vertices = [];\n\tthis.vertices = vertices;\n\tthis.isOpen = isOpen;\n    };\n\n\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex( vert:Vertex ) : void {\n\tthis.vertices.push( vert );\n    };\n\n\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt( index:number ) : Vertex {\n\tif( index < 0 ) \n\t    return this.vertices[ this.vertices.length - (Math.abs(index)%this.vertices.length) ];\n\telse\n\t    return this.vertices[ index % this.vertices.length ];\n    };\n\n\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move( vert:XYCoords ) : Polygon {\n\tfor( var i in this.vertices ) {\n\t    this.vertices[i].add( vert );\n\t}\n\treturn this;\n    };\n\n\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert( vert:XYCoords ) : boolean {\n\t// ray-casting algorithm based on\n\t//    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\tvar inside : boolean = false;\n\tfor (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi : number = this.vertices[i].x, yi : number = this.vertices[i].y;\n            let xj : number = this.vertices[j].x, yj : number = this.vertices[j].y;\n    \n            var intersect : boolean = ((yi > vert.y) != (yj > vert.y))\n\t\t&& (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect) inside = !inside;\n\t}\n\treturn inside;\n    };\n\n\n    /**\n     * Calculate the area of the given polygon (unsigned). \n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() : number {\n\t// Found at:\n\t//    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n\t/* let total : number = 0.0;\n\t\n\tfor (var i = 0, l = this.vertices.length; i < l; i++) {\n\t    const addX = vertices[i].x;\n\t    const addY = vertices[(i + 1)%l].y;\n\t    const subX = vertices[(i + 1)%l].x;\n\t    const subY = vertices[i].y;\n\n\t    total += (addX * addY * 0.5);\n\t    total -= (subX * subY * 0.5);\n\t}\n\treturn Math.abs(total); */\n\treturn Polygon.utils.area(this.vertices);\n    };\n\n\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() : number {\n\treturn Polygon.utils.signedArea(this.vertices)\n\t/* let sum : number = 0;\n\tconst n = this.vertices.length;\n\tfor (var i = 0; i < n; i++ ) {\n\t    const j = (i+1) % n;\n\t    sum += (this.vertices[j].x - this.vertices[i].x) * (this.vertices[i].y + this.vertices[j].y);\n\t}\n\treturn sum; */\n    };\n\n\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() : boolean {\n\treturn Polygon.utils.signedArea(this.vertices) < 0;\n    };\n    \n    \n\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale( factor:number, center:Vertex ) : Polygon {\n\tfor( var i in this.vertices ) {\n\t    if( typeof this.vertices[i].scale == 'function' ) \n\t\tthis.vertices[i].scale( factor, center );\n\t    else\n\t\tconsole.log( 'There seems to be a null vertex!', this.vertices[i] );\n\t}\n\treturn this;\n    };\n\n\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate( angle:number, center:Vertex ) : Polygon {\n\tfor( var i in this.vertices ) {\n\t    this.vertices[i].rotate( angle, center );\n\t}\n\treturn this;\n    };\n\n\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() : Bounds {\n\treturn Bounds.computeFromVertices( this.vertices );\n    };\n\n\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() : Array<Vertex> {\n\tif( this.vertices.length < 3 )\n\t    return [];\n\tvar qbezier : Array<Vertex> = [];\n\tvar cc0 : Vertex = this.vertices[0]; \n\tvar cc1 : Vertex = this.vertices[1]; \n\tvar edgeCenter : Vertex = new Vertex( cc0.x + (cc1.x-cc0.x)/2,\n\t\t\t\t\t      cc0.y + (cc1.y-cc0.y)/2 );\n\tqbezier.push( edgeCenter );\n\tvar limit = this.isOpen ? this.vertices.length : this.vertices.length+1;\n\tfor( var t = 1; t < limit; t++ ) {  \n\t    cc0 = this.vertices[ t%this.vertices.length ];\n\t    cc1 = this.vertices[ (t+1)%this.vertices.length ];\n\t    var edgeCenter : Vertex = new Vertex( cc0.x + (cc1.x-cc0.x)/2,\n\t\t\t\t\t\t  cc0.y + (cc1.y-cc0.y)/2 );\n\t    qbezier.push( cc0 );\n\t    qbezier.push( edgeCenter );\n\t    cc0 = cc1;\n\t}\n\treturn qbezier;\n    };\n\n\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() : string {\n\tvar qdata : Array<Vertex> = this.toQuadraticBezierData();\n\tif( qdata.length == 0 )\n\t    return \"\";\n\tvar buffer = [ 'M ' + qdata[0].x+' '+qdata[0].y ];\n\tfor( var i = 1; i < qdata.length; i+=2 ) {\n\t    buffer.push( 'Q ' + qdata[i].x+' '+qdata[i].y + ', ' + qdata[i+1].x+' '+qdata[i+1].y );\n\t}\n\treturn buffer.join(' ');\n    };\n\n\n    \n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments \n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best \n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData( threshold:number|undefined ) : Array<Vertex> {\n\tif( typeof threshold == 'undefined' )\n\t    threshold = 1.0;\n\t\n\tif( this.vertices.length < 3 )\n\t    return [];\n\tvar cbezier : Array<Vertex> = [];\n\tvar a : Vertex = this.vertices[0]; \n\tvar b : Vertex = this.vertices[1]; \n\tvar edgeCenter = new Vertex( a.x + (b.x-a.x)/2,   a.y + (b.y-a.y)/2 );\n\tcbezier.push( edgeCenter );\n\t\n\tvar limit : number = this.isOpen ? this.vertices.length-1 : this.vertices.length;\n\tfor( var t = 0; t < limit; t++ ) {\n\t    var a = this.vertices[ t%this.vertices.length ];\n\t    var b = this.vertices[ (t+1)%this.vertices.length ];\n\t    var c = this.vertices[ (t+2)%this.vertices.length ];\n\n\t    var aCenter : Vertex = new Vertex( a.x + (b.x-a.x)/2,   a.y + (b.y-a.y)/2 );\n\t    var bCenter : Vertex = new Vertex( b.x + (c.x-b.x)/2,   b.y + (c.y-b.y)/2 );\n\t    \n\t    var a2 : Vertex = new Vertex( aCenter.x + (b.x-aCenter.x)*threshold, aCenter.y + (b.y-aCenter.y)*threshold );\n\t    var b0 : Vertex = new Vertex( bCenter.x + (b.x-bCenter.x)*threshold, bCenter.y + (b.y-bCenter.y)*threshold );\n\n\t    cbezier.push( a2 );\n\t    cbezier.push( b0 );\n\t    cbezier.push( bCenter );\n\t    \n\t}\n\treturn cbezier;\n\t\n    };\n\n\n    \n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString( threshold:number ) : string {\n\tvar qdata : Array<Vertex> = this.toCubicBezierData( threshold );\n\tif( qdata.length == 0 )\n\t    return \"\";\n\tvar buffer = [ 'M ' + qdata[0].x+' '+qdata[0].y ];\n\tfor( var i = 1; i < qdata.length; i+=3 ) {\n\t    buffer.push( 'C ' + qdata[i].x+' '+qdata[i].y + ', ' + qdata[i+1].x+' '+qdata[i+1].y + ', ' + qdata[i+2].x + ' ' + qdata[i+2].y );\n\t}\n\treturn buffer.join(' ');\n    };\n\n    \n\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath( threshold:number ) : BezierPath {\n\tvar qdata : Array<Vertex> = this.toCubicBezierData( threshold );\n\t// Conver the linear path vertices to a two-dimensional path array\n\tvar pathdata : Array<Array<Vertex>> = [];\n\tfor( var i = 0; i+3 < qdata.length; i+=3 ) {\n\t    pathdata.push( [ qdata[i], qdata[i+3], qdata[i+1], qdata[i+2] ] );\n\t}\n\treturn BezierPath.fromArray( pathdata );\n    };\n\n \n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    toSVGString( options:{ className? : string }|undefined ) : string {\n\toptions = options || {};\n\tvar buffer : Array<string> = [];\n\tbuffer.push( '<path' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tbuffer.push( ' d=\"' );\n\tif( this.vertices.length > 0 ) {\n\t    buffer.push( 'M ' );\n\t    buffer.push( this.vertices[0].x.toString() )\n\t    buffer.push( ' ' );\n\t    buffer.push( this.vertices[0].y.toString() );\n\t    for( var i = 1; i < this.vertices.length; i++ ) {\n\t\tbuffer.push( ' L ' );\n\t\tbuffer.push( this.vertices[i].x.toString() )\n\t\tbuffer.push( ' ' );\n\t\tbuffer.push( this.vertices[i].y.toString() );\n\t    }\n\t    if( !this.isOpen ) {\n\t\tbuffer.push( ' Z' );\n\t    }\n\t}\n\tbuffer.push( '\" />' );\n\treturn buffer.join('');\n    };\n\n    static utils = {\n\n\t/**\n\t * Calculate the area of the given polygon (unsigned). \n\t *\n\t * Note that this does not work for self-intersecting polygons.\n\t *\n\t * @name area\n\t * @return {number}\n\t */\n\tarea( vertices : Array<XYCoords> ) : number {\n\t    // Found at:\n\t    //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n\t    let total : number = 0.0;\n\t    \n\t    for (var i = 0, l = vertices.length; i < l; i++) {\n\t\tconst addX = vertices[i].x;\n\t\tconst addY = vertices[(i + 1)%l].y;\n\t\tconst subX = vertices[(i + 1)%l].x;\n\t\tconst subY = vertices[i].y;\n\n\t\ttotal += (addX * addY * 0.5);\n\t\ttotal -= (subX * subY * 0.5);\n\t    }\n\t    return Math.abs(total);\n\t},\n\n\n\t/**\n\t * Calulate the signed polyon area by interpreting the polygon as a matrix\n\t * and calculating its determinant.\n\t *\n\t * @name signedArea\n\t * @return {number}\n\t */\n\tsignedArea( vertices : Array<XYCoords> ) : number {\n\t    let sum : number = 0;\n\t    const n = vertices.length;\n\t    for (var i = 0; i < n; i++ ) {\n\t\tconst j = (i+1) % n;\n\t\tsum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n\t    }\n\t    return sum;\n\t}\n\t\n    };\n    \n}\n","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @version  1.2.0\n **/\n\nimport { Polygon } from \"./Polygon\";\nimport { XYCoords, IBounds, XYDimension } from \"./interfaces\";\nimport { Vertex } from \"./Vertex\";\n\n\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords \n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds implements IBounds, XYDimension {\n\n    /** \n     * @member {XYCoords} \n     * @memberof Bounds\n     * @instance\n     * @public\n     */\n    readonly min:XYCoords;\n\n    /** \n     * @member {XYCoords} \n     * @memberof Bounds\n     * @instance\n     * @public\n     */\n    readonly max:XYCoords;\n\n    /** \n     * @member {number} \n     * @memberof Bounds\n     * @instance\n     * @public\n     */\n    readonly width:number;\n\n    /** \n     * @member {number} \n     * @memberof Bounds\n     * @instance\n     * @public\n     */\n    readonly height:number;\n\n    \n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor( min : XYCoords, max : XYCoords ) {\n\tthis.min = min;\n\tthis.max = max;\n\tthis.width = max.x-min.x;\n\tthis.height = max.y-min.y;\n    };\n\n\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() : Polygon {\n\treturn new Polygon( [\n\t    new Vertex(this.min),\n\t    new Vertex(this.max.x,this.min.y),\n\t    new Vertex(this.max),\n\t    new Vertex(this.min.x,this.max.y)\n\t], false );\n    };\n\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices( vertices:Array<Vertex> ) : Bounds {\n\tif( vertices.length == 0 )\n\t    return new Bounds( new Vertex(0, 0), new Vertex(0, 0) );\n\n\tlet xMin = vertices[0].x;\n\tlet xMax = vertices[0].x;\n\tlet yMin = vertices[0].y;\n\tlet yMax = vertices[0].y;\n\n\tlet vert:Vertex;\n\tfor( var i in vertices ) {\n\t    vert = vertices[ i ];\n\t    xMin = Math.min( xMin, vert.x );\n\t    xMax = Math.max( xMax, vert.x );\n\t    yMin = Math.min( yMin, vert.y );\n\t    yMax = Math.max( yMax, vert.y );\n\t}\n\treturn new Bounds( new Vertex(xMin, yMin), new Vertex(xMax, yMax) );\n    };\n\n} // END class bounds\n","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n */\n\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires SVGSerializable\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple<T extends VertTuple<T>> {\n\n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof VertTuple\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n\n    /** \n     * @member {Vertex} \n     * @memberof VertTuple\n     * @instance\n     */\n    a:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof VertTuple\n     * @instance\n     */\n    b:Vertex;\n\n    \n    /**\n     * The factory is used by the `clone` method.\n     */\n    private factory: (a:Vertex,b:Vertex)=>T;\n    \n\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a:Vertex,b:Vertex,factory:(a:Vertex,b:Vertex)=>T) {\n\tthis.uid = UIDGenerator.next();\n       \tthis.a = a;\n\tthis.b = b;\n\tthis.factory = factory;\n    }\n\n    \n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length():number {\n\treturn Math.sqrt( Math.pow(this.b.x-this.a.x,2) + Math.pow(this.b.y-this.a.y,2) );\n    };\n\n\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength( length:number ):VertTuple<T> {\n\treturn this.scale( length/this.length() );\n    };\n    \n\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub( amount:XYCoords ):VertTuple<T> {\n\tthis.a.sub( amount );\n\tthis.b.sub( amount );\n\treturn this;\n    };\n\n\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add( amount:XYCoords ):VertTuple<T> {\n\tthis.a.add( amount );\n\tthis.b.add( amount );\n\treturn this;\n    };\n\n\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize():VertTuple<T> {\n\tthis.b.set( this.a.x + (this.b.x-this.a.x)/this.length(),\n\t\t    this.a.y + (this.b.y-this.a.y)/this.length() );\n\treturn this;\n    }; \n    \n    \n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale( factor:number ):VertTuple<T> {\n\tthis.b.set( this.a.x + (this.b.x-this.a.x)*factor,\n\t\t    this.a.y + (this.b.y-this.a.y)*factor );\n\treturn this;\n    };\n\n\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo( newA:Vertex ):VertTuple<T> {\n\tlet diff = this.a.difference( newA );\n\tthis.a.add( diff );\n\tthis.b.add( diff );\n\treturn this;\n    };\n\n\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle( line?:VertTuple<any> ):number {\n\tif( line == null || typeof line == 'undefined' ) {\n\t    line = this.factory( new Vertex(0,0), new Vertex(100,0) );\n\t}\n\t// Compute the angle from x axis and the return the difference :)\n\tvar v0 = this.b.clone().sub( this.a );\n\tvar v1 = line.b.clone().sub( line.a );\n\t// Thank you, Javascript, for this second atan function. No additional math is needed here!\n\t// The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n\treturn Math.atan2( v1.x, v1.y ) - Math.atan2( v0.x, v0.y );\n    };\n\n\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t. \n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt( t:number ):Vertex {\n\treturn new Vertex( this.a.x + (this.b.x-this.a.x)*t,\n\t\t\t   this.a.y + (this.b.y-this.a.y)*t );\n    };\n\n\n    /**\n     * Get the denominator of this and the given line.\n     * \n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator( line:VertTuple<T> ):number {\n\t// http://jsfiddle.net/justin_c_rounds/Gd2S2/\n\treturn ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n\n\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear( line:VertTuple<T> ):boolean {\n\treturn Math.abs( this.denominator(line) ) < Vertex.EPSILON;\n    };\n\n\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT( p:XYCoords ):number {\n\tvar l2 = VertTuple.vtutils.dist2(this.a, this.b);\n\tif( l2 === 0 ) return 0; \n\tvar t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n\t// Do not wrap to [0,1] here.\n\t// Other results are of interest, too.\n\t// t = Math.max(0, Math.min(1, t));\n\treturn t;\n    };\n\n\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint( point:XYCoords, insideBoundsOnly?:boolean ) : boolean {\n\tconst t : number = this.getClosestT(point);\n\t// Compare to pointDistance?\n\tif( typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly ) {\n\t    const distance : number = Math.sqrt( VertTuple.vtutils.dist2(point, this.vertAt(t)) );\n\t    return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n\t} else {\n\t    return t >= 0 && t <= 1;\n\t}\n    }\n\n\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint( p:Vertex ):Vertex {\n\tvar t : number = this.getClosestT(p);\n\treturn this.vertAt(t);\n    };\n\n\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance( p:Vertex ):number {\n\t// Taken From:\n\t// https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n\treturn Math.sqrt( VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))) );\n    };\n\n\n        \n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/ \n    clone():T {\n\treturn this.factory(this.a.clone(),this.b.clone());\n    };\n\n\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString():string {\n\treturn \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n\n    \n    /**\n     * @private\n     **/\n    static vtutils = {\n\tdist2 : function(v:XYCoords, w:XYCoords) {\n\t    return (v.x - w.x)*(v.x - w.x) + (v.y - w.y)*(v.y - w.y);\n\t}\n    };\n}\n","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @version  1.3.0\n *\n * @file Vector\n * @public\n **/\n\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\nimport { XYCoords, SVGSerializable  } from \"./interfaces\";\n\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n **/\nexport class Vector extends VertTuple<Vector> implements SVGSerializable {  \n\n    /**\n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"Vector\";\n    \n    /**\n     * The constructor.\n     * \n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor( vertA:Vertex, vertB:Vertex ) {\n\tsuper(vertA,vertB,(a:Vertex,b:Vertex)=>new Vector(a,b));\n    };\n\n\n    \n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp():Vector {\n\tvar v : Vector = this.clone();\n\tv.sub( this.a );\n\tv = new Vector( new Vertex(), new Vertex(-v.b.y,v.b.x) );\n\tv.a.add( this.a );\n\tv.b.add( this.a );\n\treturn v;\n    };\n\n    \n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse():Vector {\n\tvar tmp = this.a;\n\tthis.a = this.b;\n\tthis.b = tmp;\n\treturn this;\n    };\n    \n\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv():Vector {\n\tthis.b.x = this.a.x-(this.b.x-this.a.x);\n\tthis.b.y = this.a.y-(this.b.y-this.a.y);\n\treturn this;\n    };\n\n\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection( line:Vector ):Vertex|null {\n\tvar denominator = this.denominator(line);\n\tif( denominator == 0 ) \n\t    return null;\n\t\n\tvar a = this.a.y - line.a.y; \n\tvar b = this.a.x - line.a.x; \n\tvar numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n\tvar numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n\ta = numerator1 / denominator; // NaN if parallel lines\n\tb = numerator2 / denominator;\n\n\t// TODO:\n\t// FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n\t\n\t// if we cast these lines infinitely in both directions, they intersect here:\n\treturn new Vertex( this.a.x + (a * (this.b.x - this.a.x)),\n\t\t\t   this.a.y + (a * (this.b.y - this.a.y)) );\n    };\n    \n    \n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    toSVGString( options:{className?:string} ) {\n\toptions = options || {};\n\tvar buffer = [];\n\tvar vertices = Vector.utils.buildArrowHead( this.a, this.b, 8, 1.0, 1.0 );\n\tbuffer.push( '<g' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tbuffer.push( '>' );\n\tbuffer.push( '   <line' );\n\tbuffer.push( ' x1=\"' + this.a.x + '\"' );\n\tbuffer.push( ' y1=\"' + this.a.y + '\"' );\n\tbuffer.push( ' x2=\"' + vertices[0].x + '\"' );\n\tbuffer.push( ' y2=\"' + vertices[0].y + '\"' );\n\tbuffer.push( ' />' );\n\t// Add arrow head\n\t\n\tbuffer.push( '   <polygon points=\"' );\n\tfor( var i = 0; i < vertices.length; i++ ) {\n\t    if( i > 0 )\n\t\tbuffer.push( ' ' );\n\t    buffer.push( '' + vertices[i].x + ',' + vertices[i].y );\n\t}\n\tbuffer.push( '\"/>' );\n\tbuffer.push( '</g>' );\n\treturn buffer.join('');\n    };\n\n    static utils = {\n\t/**\n\t * Generate a four-point arrow head, starting at the vector end minus the\n\t * arrow head length.\n\t *\n\t * The first vertex in the returned array is guaranteed to be the located\n\t * at the vector line end minus the arrow head length.\n\t *\n\t *\n\t * Due to performance all params are required.\n\t *\n\t * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n\t * scaling different). Arrow heads should not look distored on non-uniform scaling.\n\t *\n\t * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n\t * For headlen use 8, it's a good arrow head size.\n\t *\n\t * Example:\n\t *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n\t *\n\t * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n\t * @param {Vertex} zB - The end vertex of the vector.\n\t * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n\t * @param {number} scaleX  - The horizontal scaling during draw.\n\t * @param {number} scaleY  - the vertical scaling during draw.\n\t **/\n\tbuildArrowHead : function( zA:Vertex, zB:Vertex, headlen:number, scaleX:number, scaleY:number ) {\n\t    var angle = Math.atan2( (zB.y-zA.y)*scaleY, (zB.x-zA.x)*scaleX );   \n\t    var vertices = [];\n\t    vertices.push( new Vertex(zB.x*scaleX-(headlen)*Math.cos(angle), zB.y*scaleY-(headlen)*Math.sin(angle)) );    \n\t    vertices.push( new Vertex(zB.x*scaleX-(headlen*1.35)*Math.cos(angle-Math.PI/8), zB.y*scaleY-(headlen*1.35)*Math.sin(angle-Math.PI/8) ) );\n\t    vertices.push( new Vertex(zB.x*scaleX, zB.y*scaleY) );\n\t    vertices.push( new Vertex(zB.x*scaleX-(headlen*1.35)*Math.cos(angle+Math.PI/8), zB.y*scaleY-(headlen*1.35)*Math.sin(angle+Math.PI/8)) );\n\n\t    return vertices;\n\t} \n    }\n    \n}\n","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @version 2.5.0\n *\n * @file CubicBezierCurve\n * @public\n **/\n\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n\n    /** @constant {number} */\n    static readonly START_POINT:number         = 0;\n    /** @constant {number} */\n    static readonly START_CONTROL_POINT:number = 1;\n    /** @constant {number} */\n    static readonly END_CONTROL_POINT:number   = 2;\n    /** @constant {number} */\n    static readonly END_POINT:number           = 3;\n\n\n    /** @constant {number} */\n    readonly START_POINT:number          = CubicBezierCurve.START_POINT;\n    /** @constant {number} */\n    readonly START_CONTROL_POINT:number  = CubicBezierCurve.START_CONTROL_POINT;\n    /** @constant {number} */\n    readonly END_CONTROL_POINT:number    = CubicBezierCurve.END_CONTROL_POINT;\n    /** @constant {number} */\n    readonly END_POINT:number            = CubicBezierCurve.END_POINT;\n\n\n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof CubicBezierCurve\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    startPoint:Vertex;\n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    endPoint:Vertex;\n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    startControlPoint:Vertex;\n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    endControlPoint:Vertex;\n    \n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    curveIntervals:number;\n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    segmentCache:Array<Vertex>;\n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    segmentLengths:Array<number>;\n\n    /** \n     * @member {CubicBezierCurve} \n     * @memberof CubicBezierCurve\n     * @instance\n     */\n    arcLength:number;\n\n    \n    \n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor( startPoint:Vertex,\n\t\t endPoint:Vertex,\n\t\t startControlPoint:Vertex,\n\t\t endControlPoint:Vertex\n\t       ) {\n\tthis.uid                = UIDGenerator.next();\n\tthis.startPoint         = startPoint;\n\tthis.startControlPoint  = startControlPoint;\n\tthis.endPoint           = endPoint;\n\tthis.endControlPoint    = endControlPoint;\t\n\tthis.curveIntervals     = 30;\n\t// An array of vertices\n\tthis.segmentCache       = [];\n\t// An array of floats\n\tthis.segmentLengths     = [];\n\t// float\n\tthis.arcLength          = null;\n\t\n\tthis.updateArcLengths();\n    };\n\n\n\n    \n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint( pointID:number,\n\t\t    moveAmount:XYCoords,\n\t\t    moveControlPoint:boolean,\n\t\t    updateArcLengths:boolean\n\t\t  ) : void {\n\tif( pointID == this.START_POINT ) {\n\t    this.getStartPoint().add( moveAmount );\n\t    if( moveControlPoint )\n\t\tthis.getStartControlPoint().add( moveAmount );\n\n\t} else if( pointID == this.START_CONTROL_POINT ) {\n\t    this.getStartControlPoint().add( moveAmount );\n\n\t} else if( pointID == this.END_CONTROL_POINT ) {\n\t    this.getEndControlPoint().add( moveAmount );\n\n\t} else if( pointID == this.END_POINT ) {\n\t    this.getEndPoint().add( moveAmount );\n\t    if( moveControlPoint )\n\t\tthis.getEndControlPoint().add( moveAmount );\n\n\t} else {\n\t    console.log( `[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.` );\n\t}\n\t\n\tif( updateArcLengths )\n\t    this.updateArcLengths();\n    };\n\n\n\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate( amount:Vertex ) : CubicBezierCurve {\n\tthis.startPoint.add( amount );\n\tthis.startControlPoint.add( amount );\n\tthis.endControlPoint.add( amount );\n\tthis.endPoint.add( amount );\n\treturn this;\n    };\n\n\n    \n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() : CubicBezierCurve {\n\tlet tmp : Vertex = this.startPoint;\n\tthis.startPoint = this.endPoint;\n\tthis.endPoint = tmp;\n\ttmp = this.startControlPoint;\n\tthis.startControlPoint = this.endControlPoint;\n\tthis.endControlPoint = tmp;\n\treturn this;\n    };\n\n    \n    /**\n     * Get the total curve length.<br>\n     * <br> \n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the \n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() : number {\n\treturn this.arcLength;\n    };\n\n    \n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() : void {\n\tlet\n\tpointA : Vertex = this.startPoint.clone(),\n\tpointB : Vertex = new Vertex( 0, 0 ),\n\tcurveStep : number = 1.0/this.curveIntervals;\n\t\n\tlet u : number = curveStep; \n\t// Clear segment cache\n\tthis.segmentCache = [];\n\t// Push start point into buffer\n\tthis.segmentCache.push( this.startPoint );\t\n\tthis.segmentLengths = [];\n\tlet newLength : number = 0.0;\t\n\t\n\tvar t : number= 0.0;\n\tlet tmpLength : number;\n\twhile( t <= 1.0 ) {\n\t    pointB = this.getPointAt(t); \n\t    \n\t    // Store point into cache\n\t    this.segmentCache.push( pointB ); \n\n\t    // Calculate segment length\n\t    tmpLength = pointA.distance(pointB);\n\t    this.segmentLengths.push( tmpLength );\n\t    newLength += tmpLength;\n\t    \n\t    pointA = pointB;\t    \n\t    t += curveStep;\n\t}\n\tthis.arcLength = newLength;\n    };\n\n\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT( p:Vertex ):number {\n\t// We would like to have an error that's not larger than 1.0.\n\tvar desiredEpsilon : number = 1.0;\n\t\n\tvar t : number = 0.0;\n\tvar result : { t:number; tPrev:number; tNext:number} = { t: 0, tPrev : 0.0, tNext : 1.0 };\n\tvar iteration : number = 0;\n\tdo {\n\t    result = this.locateIntervalByDistance( p, result.tPrev, result.tNext, this.curveIntervals );\n\t    iteration++;\n\t    // Be sure: stop after 4 iterations\n\t} while ( iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon );\n\treturn result.t;\n    };\n\n\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    private locateIntervalByDistance( p:Vertex,\n\t\t\t\t      tStart:number,\n\t\t\t\t      tEnd:number,\n\t\t\t\t      stepCount : number ) :\n    { t:number; tPrev:number; tNext:number} {\n\tvar minIndex : number = -1;\n\tvar minDist : number = 0;\n\tvar t : number = 0.0;\n\tconst tDiff : number = tEnd - tStart;\n\tfor( var i = 0; i <= stepCount; i++ ) {\n\t    t = tStart + tDiff * (i / stepCount);\n\t    var vert : Vertex = this.getPointAt(t);\n\t    var dist : number = vert.distance(p);\n\t    if( minIndex == -1 || dist < minDist ) {\n\t\tminIndex = i;\n\t\tminDist = dist;\n\t    }\n\t}\n\treturn { t : tStart + tDiff * (minIndex/stepCount),\n\t\t tPrev : tStart + tDiff * (Math.max(0,minIndex-1)/stepCount),\n\t\t tNext : tStart + tDiff * (Math.min(stepCount,minIndex+1)/stepCount)\n\t       };\n    };\n\n    \n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() : Bounds {\n\tvar min : Vertex = new Vertex( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY );\n\tvar max : Vertex = new Vertex( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY );\n\tlet v : Vertex;\n\tfor( var i = 0; i < this.segmentCache.length; i++ ) {\n\t    v = this.segmentCache[i];\n\t    min.x = Math.min( min.x, v.x );\n\t    min.y = Math.min( min.y, v.y );\n\t    max.x = Math.max( max.x, v.x );\n\t    max.y = Math.max( max.y, v.y );\n\t}\n\treturn new Bounds( min, max );\n    };\n\n\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() : Vertex {\n\treturn this.startPoint;\n    };\n\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() : Vertex {\n\treturn this.endPoint;\n    };\n\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() : Vertex {\n\treturn this.startControlPoint;\n    };\n\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() : Vertex {\n\treturn this.endControlPoint;\n    };\n\n\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} \n     **/\n    getPointByID( id:number ) : Vertex {\n\tif( id == this.START_POINT ) return this.startPoint;\n\tif( id == this.END_POINT ) return this.endPoint;\n\tif( id == this.START_CONTROL_POINT ) return this.startControlPoint;\n\tif( id == this.END_CONTROL_POINT ) return this.endControlPoint;\n\tthrow new Error(`Invalid point ID '${id}'.`);\n    };\n\n\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at \n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} \n     **/\n    getPointAt( t:number ) : Vertex {\n\t// Perform some powerful math magic\n\tconst x : number = this.startPoint.x * Math.pow(1.0-t,3) + this.startControlPoint.x*3*t*Math.pow(1.0-t,2)\n\t    + this.endControlPoint.x*3*Math.pow(t,2)*(1.0-t)+this.endPoint.x*Math.pow(t,3);\n\tconst y : number = this.startPoint.y*Math.pow(1.0-t,3)+this.startControlPoint.y*3*t*Math.pow(1.0-t,2)\n\t    + this.endControlPoint.y*3*Math.pow(t,2)*(1.0-t)+this.endPoint.y*Math.pow(t,3);\n\treturn new Vertex( x, y );\n    };\n\n\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at \n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} \n     **/\n    getPoint( u:number ) : Vertex {  \n\treturn this.getPointAt( u / this.arcLength );\n    };\n\n\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} \n     **/\n    getTangentAt( t:number ) : Vertex {\n\tconst a : Vertex = this.getStartPoint();\n\tconst b : Vertex = this.getStartControlPoint();\n\tconst c : Vertex = this.getEndControlPoint();\n\tconst d : Vertex = this.getEndPoint();\n\t\n\t// This is the shortened one\n\tconst t2 : number = t * t;\n\tconst t3 : number = t * t2;\n\t// (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n\tconst nt2 : number = 1 - 2*t + t2;\n\n\tconst tX : number = -3 * a.x * nt2 + \n\t    b.x * (3 * nt2 - 6 *(t-t2) ) +\n\t    c.x * (6 *(t-t2) - 3*t2) +\n\t    3*d.x*t2;\n\tconst tY : number = -3 * a.y * nt2 + \n\t    b.y * (3 * nt2 - 6 *(t-t2) ) +\n\t    c.y * (6 *(t-t2) - 3*t2) +\n\t    3*d.y*t2;\n\t\n\t// Note: my implementation does NOT normalize tangent vectors!\n\treturn new Vertex( tX, tY );\n    };\n\n\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt( tStart:number, tEnd:number ) : CubicBezierCurve {\n\tconst startVec : Vector = new Vector(\n\t    this.getPointAt(tStart),\n\t    this.getTangentAt(tStart)\n\t);\n\tconst endVec : Vector = new Vector(\n\t    this.getPointAt(tEnd),\n\t    this.getTangentAt(tEnd).inv()\n\t);\n\n\t// Tangents are relative. Make absolute.\n\tstartVec.b.add( startVec.a )\n\tendVec.b.add( endVec.a );\n\n\t// This 'splits' the curve at the given point at t.\n\tstartVec.scale(0.33333333*(tEnd-tStart));\n\tendVec.scale(0.33333333*(tEnd-tStart));\n\n\t// Draw the bezier curve\n\t// pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n\treturn new CubicBezierCurve( startVec.a, endVec.a, startVec.b, endVec.b );\n    };\n    \n\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} \n     **/\n    convertU2T( u:number ) : number { \n\treturn Math.max( 0.0, \n\t\t\t Math.min( 1.0, \n\t\t\t\t   ( u / this.arcLength ) \n\t\t\t\t )\n\t\t       );\n    };\n\n    \n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} \n     **/\n    getTangent( u:number ) : Vertex {\n\treturn this.getTangentAt( this.convertU2T(u) );\n    };\n    \n\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} \n     **/\n    getPerpendicular( u:number ) : Vertex {\n\treturn this.getPerpendicularAt( this.convertU2T(u) );\n    };\n\n\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} \n     **/\n    getPerpendicularAt( t:number ) : Vertex { \n\tconst tangentVector : Vertex = this.getTangentAt( t );\n\treturn new Vertex( tangentVector.y, - tangentVector.x );\n    };\n\n\n\n\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} \n     **/\n    clone() : CubicBezierCurve {\n\treturn new CubicBezierCurve( this.getStartPoint().clone(),\n\t\t\t\t\t  this.getEndPoint().clone(),\n\t\t\t\t\t  this.getStartControlPoint().clone(),\n\t\t\t\t\t  this.getEndControlPoint().clone()\n\t\t\t\t\t);\n    };\n\n\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean} \n     **/\n    equals( curve:CubicBezierCurve|undefined ) : boolean {\n\t// Note: in the earlier vanilla-JS version this was callable with plain objects.\n\t//       Let's see if this restricted version works out.\n\tif( !curve )\n\t    return false;\t\n\tif( !curve.startPoint ||\n\t    !curve.endPoint ||\n\t    !curve.startControlPoint ||\n\t    !curve.endControlPoint )\n\t    return false;\t\n\treturn this.startPoint.equals(curve.startPoint) \n\t    && this.endPoint.equals(curve.endPoint)\n\t    && this.startControlPoint.equals(curve.startControlPoint)\n\t    && this.endControlPoint.equals(curve.endControlPoint);\n    };\n\n\n    /**\n     * Quick check for class instance. \n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean} \n     **/\n    static isInstance( obj:any ) : boolean {\n\t// Note: check this again\n\t/* OLD VANILLA JS IMPLEMENTATION */\n\t/* if( typeof obj != \"object\" )\n\t    return false;\n\tfunction hasXY(v) { \n\t    return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n\t}\n\treturn typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n\t    && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n\t    && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n\t    && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n\t*/\n\treturn obj instanceof CubicBezierCurve;\n    };\n\n    \n  \n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    toSVGPathData() : string {\n\tvar buffer : Array<string> = [];\n\tbuffer.push( 'M ' );\n\tbuffer.push( this.startPoint.x.toString() );\n\tbuffer.push( ' ' );\n\tbuffer.push( this.startPoint.y.toString() );\n\tbuffer.push( ' C ' );\n\tbuffer.push( this.startControlPoint.x.toString() );\n\tbuffer.push( ' ' );\n\tbuffer.push( this.startControlPoint.y.toString() );\n\tbuffer.push( ' ' );\n\tbuffer.push( this.endControlPoint.x.toString() );\n\tbuffer.push( ' ' );\n\tbuffer.push( this.endControlPoint.y.toString() );\n\tbuffer.push( ' ' );\n\tbuffer.push( this.endPoint.x.toString() );\n\tbuffer.push( ' ' );\n\tbuffer.push( this.endPoint.y.toString() );\n\treturn buffer.join('');\n    };\n\n\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON( prettyFormat:boolean ) : string {\n\tvar jsonString = \"{ \" + // begin object\n            ( prettyFormat ? \"\\n\\t\" : \"\" ) +\n\t    \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n\t    ( prettyFormat ? \"\\n\\t\" : \"\" ) +\n\t    \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n\t    ( prettyFormat ? \"\\n\\t\" : \"\" ) +\n\t    \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n\t    ( prettyFormat ? \"\\n\\t\" : \"\" ) +\n\t    \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n\t    ( prettyFormat ? \"\\n\\t\" : \"\" ) +\n\t    \" }\";  // end object\n\treturn jsonString;\n    };\n\n    \n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON( jsonString:string ) : CubicBezierCurve {\n\tvar obj:object = JSON.parse( jsonString );\n\treturn CubicBezierCurve.fromObject( obj );\n    };\n\n\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject( obj:any ) : CubicBezierCurve {\t\n\tif( typeof obj !== \"object\" ) \n\t    throw \"Can only build from object.\";\n\n\tif( !obj.startPoint )\n\t    throw \"Object member \\\"startPoint\\\" missing.\";\n\tif( !obj.endPoint )\n\t    throw \"Object member \\\"endPoint\\\" missing.\";\n\tif( !obj.startControlPoint )\n\t    throw \"Object member \\\"startControlPoint\\\" missing.\";\n\tif( !obj.endControlPoint )\n\t    throw \"Object member \\\"endControlPoint\\\" missing.\";\n\t\n\treturn new CubicBezierCurve( new Vertex(obj.startPoint[0],        obj.startPoint[1]),\n\t\t\t\t     new Vertex(obj.endPoint[0],          obj.endPoint[1]),\n\t\t\t\t     new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]),\n\t\t\t\t     new Vertex(obj.endControlPoint[0],   obj.endControlPoint[1])\n\t\t\t\t   );\n    };\n\n\n    \n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray( arr:Array<Vertex> ) {\t\n\tif( !Array.isArray(arr) ) \n\t    throw \"Can only build from object.\";\n\tif( arr.length != 4 )\n\t    throw \"Can only build from array with four elements.\";\n\treturn new CubicBezierCurve( arr[0],\n\t\t\t\t     arr[1],\n\t\t\t\t     arr[2],\n\t\t\t\t     arr[3]\n\t\t\t\t   );\n    };\n}\n","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @version 2.3.0\n *\n * @file BezierPath\n * @public\n **/\n\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex \n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath implements SVGSerializable {\n\n\n    /**\n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"BezierPath\";\n\n\n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof BezierCurve\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n\n    /** \n     * @member {Array<Vertex>} \n     * @memberof BezierPath\n     * @type {Array<Vertex>}\n     * @instance\n     */\n    pathPoints:Array<Vertex>;\n\n    /** \n     * @member {number} \n     * @memberof BezierPath\n     * @type {number}\n     * @instance\n     */\n    totalArcLength:number;\n\n    /**\n     * Set this flag to true if you want the first point and\n     * last point of the path to be auto adjusted, too.\n     *\n     * @member {number} \n     * @memberof BezierPath\n     * @type {number}\n     * @instance\n     */\n    adjustCircular:boolean;\n\n    /** \n     * @member {Array<CubicBezierCurve>} \n     * @memberof BezierPath\n     * @type {Array<CubicBezierCurve>}\n     * @instance\n     */\n    bezierCurves:Array<CubicBezierCurve>;\n\n\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    static START_POINT:number         = 0;\n    /** @constant {number} */\n    static START_CONTROL_POINT:number = 1;\n    /** @constant {number} */\n    static END_CONTROL_POINT:number   = 2;\n    /** @constant {number} */\n    static END_POINT:number           = 3;\n    /** @constant {number} */\n    START_POINT:number         = 0;\n    /** @constant {number} */\n    START_CONTROL_POINT:number = 1;\n    /** @constant {number} */\n    END_CONTROL_POINT:number   = 2;\n    /** @constant {number} */\n    END_POINT:number           = 3;\n    \n    \n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    private constructor( pathPoints:Array<Vertex>|undefined|null ) {\n\tthis.uid = UIDGenerator.next();\n\t    \n\tif( !pathPoints )\n\t    pathPoints = [];\n\tthis.totalArcLength = 0.0;\n\t// Set this flag to true if you want the first point and\n\t// last point of the path to be auto adjusted, too.\n\tthis.adjustCircular = false;\n\tthis.bezierCurves = [];\n    };\n\n\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve( curve:CubicBezierCurve ) : void {\n\tif( curve == null || typeof curve == 'undefined' )\n\t    throw \"Cannot add null curve to bézier path.\";\n\tthis.bezierCurves.push( curve );\n\tif( this.bezierCurves.length > 1 ) {\n\t    curve.startPoint = this.bezierCurves[this.bezierCurves.length-2].endPoint;\n\t    this.adjustSuccessorControlPoint(\n\t\tthis.bezierCurves.length-2, // curveIndex,\n\t\ttrue,                       // obtainHandleLength,  \n\t\ttrue                        // updateArcLengths  \n\t    );    \n\t} else {\n\t    this.totalArcLength += curve.getLength();\n\t}\n    };\n\n\n \n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint( point:Vertex ) : number {\n\t// for( var i in this.bezierCurves ) {\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {    \n\t    if( this.bezierCurves[i].startPoint.equals(point) )\n\t\treturn i;\n\t}\n\treturn -1;\n    };\n\n\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint( point:Vertex ) : number {\n\t// for( var i in this.bezierCurves ) {\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) { \n\t    if( this.bezierCurves[i].endPoint.equals(point) )\n\t\treturn i;\n\t}\n\treturn -1;\n    };\n\n\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint( point:Vertex ) : number {\n\t// for( var i in this.bezierCurves ) {\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) { \n\t    if( this.bezierCurves[i].startControlPoint.equals(point) )\n\t\treturn i;\n\t}\n\treturn -1;\n    };\n    \n\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint( point:Vertex ) : number {\n\t// for( var i in this.bezierCurves ) {\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) { \n\t    if( this.bezierCurves[i].endControlPoint.equals(point) )\n\t\treturn i;\n\t}\n\treturn -1;\n    };\n\n\n    \n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes \n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() : number {\n\treturn this.totalArcLength;\n    };\n\n    \n    \n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() : void {\n\tthis.totalArcLength = 0.0;\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    this.bezierCurves[ i ].updateArcLengths();\n\t    this.totalArcLength += this.bezierCurves[ i ].getLength();\n\t}\n    };\n\n\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() : number {\n\treturn this.bezierCurves.length;\n    };\n\n\n\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt( curveIndex:number ) : CubicBezierCurve {\n\treturn this.bezierCurves[ curveIndex ];\n    };\n\n\n\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n\tif( this.bezierCurves.length <= 1 )\n\t    return false;\n\t\n\tvar newArray = [ this.bezierCurves.length-1 ];\n\tfor( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n\t    newArray[i] = this.bezierCurves[i];\n\t}\n\t\n\t// Update arc length\n\tthis.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n\tthis.bezierCurves = newArray;\t\n\treturn true;\n    }\n    */\n\n\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n\tif( this.bezierCurves.length <= 1 )\n\t    return false;\n\n\tvar newArray = [ this.bezierCurves.length-1 ];\n\tfor( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n\t    newArray[i-1] = this.bezierCurves[i];\n\n\t}\n\t\n\t// Update arc length\n\tthis.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n\tthis.bezierCurves = newArray;\n\t\n\treturn true;\n    }\n    */\n\n\n    \n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n\tif( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n\t    return false;\n\t\n\tvar leftCurve  = this.bezierCurves[ curveIndex-1 ];\n\tvar rightCurve = this.bezierCurves[ curveIndex ];\n\n\t// Make the length of the new handle double that long\n\tvar leftControlPoint = leftCurve.getStartControlPoint().clone();\n\tleftControlPoint.sub( leftCurve.getStartPoint() );\n\tleftControlPoint.multiplyScalar( 2.0 );\n\tleftControlPoint.add( leftCurve.getStartPoint() );\n\t\n\tvar rightControlPoint = rightCurve.getEndControlPoint().clone();\n\trightControlPoint.sub( rightCurve.getEndPoint() );\n\trightControlPoint.multiplyScalar( 2.0 );\n\trightControlPoint.add( rightCurve.getEndPoint() );\t\n\n\tvar newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n\t\t\t\t\t\t  rightCurve.getEndPoint(),\n\t\t\t\t\t\t  leftControlPoint,\n\t\t\t\t\t\t  rightControlPoint \n\t\t\t\t\t\t);\t\n\t// Place into array\n\tvar newArray = [ this.bezierCurves.length - 1 ];\n\n\tfor( var i = 0; i < curveIndex-1; i++ ) \n\t    newArray[ i ] = this.bezierCurves[i];\n\t\n\tnewArray[ curveIndex-1 ] = newCurve;\n\t\n\t// Shift trailing curves left\n\tfor( var i = curveIndex; i+1 < this.bezierCurves.length; i++ ) \n\t    newArray[ i ] = this.bezierCurves[ i+1 ];\n\t\t\n\tthis.bezierCurves = newArray;\n\tthis.updateArcLengths();\n\n\treturn true;\n    }\n    */\n\n\n\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n\t\t\t\t\t     segmentIndex \n\t\t\t\t\t   ) {\n\t// Must be a valid curve index\n\tif( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n\t    return false;\n\n\tvar oldCurve = this.bezierCurves[ curveIndex ];\n\n\t// Segment must be an INNER point!\n\t// (the outer points are already bezier end/start points!)\n\tif( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n\t    return false;\n\n\t// Make room for a new curve\n\tfor( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n\t    // Move one position to the right\n\t    this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\t    \n\t}\n\n\t// Accumulate segment lengths\n\tvar u = 0;\n\tfor( var i = 0; i < segmentIndex; i++ )\n\t    u += oldCurve.segmentLengths[i];\n\t//var tangent = oldCurve.getTangentAt( u );\n\tvar tangent = oldCurve.getTangent( u );\n\ttangent = tangent.multiplyScalar( 0.25 ); \n\n\tvar leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n\tleftEndControlPoint.sub( tangent );\n\t\n\tvar rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n\trightStartControlPoint.add( tangent );\n\t\n\t// Make the old existing handles a quarter that long\n\tvar leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n\t// move to (0,0)\n\tleftStartControlPoint.sub( oldCurve.getStartPoint() );\n\tleftStartControlPoint.multiplyScalar( 0.25 );\n\tleftStartControlPoint.add( oldCurve.getStartPoint() );\n\n\tvar rightEndControlPoint = oldCurve.getEndControlPoint().clone(); \n\t// move to (0,0)\n\trightEndControlPoint.sub( oldCurve.getEndPoint() );\n\trightEndControlPoint.multiplyScalar( 0.25 );\n\trightEndControlPoint.add( oldCurve.getEndPoint() );\n\n\tvar newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n\t\t\t\t\t     oldCurve.segmentCache[ segmentIndex ],         // new end point\n\t\t\t\t\t     leftStartControlPoint,                         // old start control point \n\t\t\t\t\t     leftEndControlPoint                            // new end control point\n\t\t\t\t\t   );\n\tvar newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n\t\t\t\t\t     oldCurve.getEndPoint(),                        // old end point\n\t\t\t\t\t     rightStartControlPoint,                        // new start control point \n\t\t\t\t\t     rightEndControlPoint                           // old end control point\n\t\t\t\t\t   );\n\t\n\t// Insert split curve(s) at free index\n\tthis.bezierCurves[ curveIndex ]     = newLeft;\n\tthis.bezierCurves[ curveIndex + 1 ] = newRight;\n\t\n\t// Update total arc length, even if there is only a very little change!\n\tthis.totalArcLength -= oldCurve.getLength();\n\tthis.totalArcLength += newLeft.getLength();\n\tthis.totalArcLength += newRight.getLength();\n\n\treturn true;\n    };\n    */\n\n    /*\n    insertVertexAt( t:number ) : void {\n\tconsole.log('Inserting vertex at', t );\n\t// Find the curve index\n\tvar u : number = 0;\n\tvar curveIndex : number = -1;\n\tvar localT : number = 0.0;\n\tfor( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n\t    \n\t}\n    }; */\n\n\n   \n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y) \n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate( amount:Vertex ) : BezierPath {\t\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    var curve = this.bezierCurves[ i ];\t    \n\t    curve.getStartPoint().add( amount );\n\t    curve.getStartControlPoint().add( amount );\n\t    curve.getEndControlPoint().add( amount );    \n\t}\n\t\n\t// Don't forget to translate the last curve's last point\n\tvar curve : CubicBezierCurve = this.bezierCurves[ this.bezierCurves.length-1 ];\n\tcurve.getEndPoint().add( amount );\n\n\tthis.updateArcLengths();\n\treturn this;\n    };\n\n\n    \n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale( anchor:Vertex, scaling:number ) : BezierPath {\n\t\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    var curve = this.bezierCurves[ i ];\n\t    curve.getStartPoint().scale( scaling, anchor );\n\t    curve.getStartControlPoint().scale( scaling, anchor );\n\t    curve.getEndControlPoint().scale( scaling, anchor );\n\t    // Do NOT scale the end point here!\n\t    // Don't forget that the curves are connected and on curve's end point\n\t    // the the successor's start point (same instance)!\n\t}\n\t\n\t// Finally move the last end point (was not scaled yet)\n\tif( this.bezierCurves.length > 0 && !this.adjustCircular ) {\n\t    this.bezierCurves[ this.bezierCurves.length-1 ].getEndPoint().scale( scaling, anchor );\n\t}\n\t\n\tthis.updateArcLengths();\n\treturn this;\n    };\n\n\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate( angle:number, center:Vertex ) : void {\n\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    var curve = this.bezierCurves[ i ];\t    \n\t    curve.getStartPoint().rotate( angle, center ); \n\t    curve.getStartControlPoint().rotate( angle, center );\n\t    curve.getEndControlPoint().rotate( angle, center );\n\t    // Do NOT rotate the end point here!\n\t    // Don't forget that the curves are connected and on curve's end point\n\t    // the the successor's start point (same instance)!\n\t}\n\t\n\t// Finally move the last end point (was not scaled yet)\n\tif( this.bezierCurves.length > 0 && !this.adjustCircular ) {\n\t    this.bezierCurves[ this.bezierCurves.length-1 ].getEndPoint().rotate( angle, center );\n\t}\n    };\n\n\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT( p:Vertex ) : number {\n\t// Find the spline to extract the value from\n\tvar minIndex : number = -1;\n\tvar minDist : number = 0.0;\n\tvar dist : number = 0.0;\n\tvar curveT : number = 0.0;\n\tvar uMin : number = 0.0;\n\tvar u : number = 0.0;\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\n\t    curveT = this.bezierCurves[i].getClosestT( p );\n\t    dist = this.bezierCurves[i].getPointAt(curveT).distance( p );\n\t    if( minIndex == -1 || dist < minDist ) {\n\t\tminIndex = i;\n\t\tminDist = dist;\n\t\tuMin = u + curveT * this.bezierCurves[i].getLength();\n\t    }\n\t    \n\t    u += this.bezierCurves[i].getLength();\t     \n\t}\n\t\n\treturn Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength) );\n    };\n\n    \n\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint( u:number ) : Vertex {\n\tif( u < 0 || u > this.totalArcLength ) {\n\t    console.log( \"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\" );\n\t    u = Math.min( this.totalArcLength, Math.max(u,0) );\n\t}\n\t// Find the spline to extract the value from\n\tvar i : number = 0;\n\tvar uTemp : number = 0.0;\n\twhile( i < this.bezierCurves.length &&\n\t       (uTemp + this.bezierCurves[i].getLength()) < u \n\t     ) {\n\t    \n\t    uTemp += this.bezierCurves[ i ].getLength();\n\t    i++;\n\t}\n\t\n\t// if u == arcLength\n\t//   -> i is max\n\tif( i >= this.bezierCurves.length )\n\t    return this.bezierCurves[ this.bezierCurves.length-1 ].getEndPoint().clone();\n\t\n\tvar bCurve : CubicBezierCurve = this.bezierCurves[ i ];\n\tvar relativeU : number = u - uTemp;\n\treturn bCurve.getPoint( relativeU );\n    };\n\n\n    \n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt( t:number ) : Vertex {\n\treturn this.getPoint( t * this.totalArcLength );\n    };\n\n    \n  \n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt( t:number ) : Vertex {\n\treturn this.getTangent( t * this.totalArcLength );\n    };\n\n    \n  \n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent( u:number ) : Vertex {\n\tif( u < 0 || u > this.totalArcLength ) {\n\t    console.warn( \"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\" );\n\t    // return undefined;\n\t    u = Math.min( this.totalArcLength, Math.max(0,u) );\n\t}\n\t// Find the spline to extract the value from\n\tvar i : number = 0;\n\tvar uTemp : number = 0.0;\n\twhile( i < this.bezierCurves.length &&\n\t       (uTemp + this.bezierCurves[i].getLength()) < u \n\t     ) {   \n\t    uTemp += this.bezierCurves[ i ].getLength();\n\t    i++;\n\t}\n\tvar bCurve : CubicBezierCurve = this.bezierCurves[ i ];\n\tvar relativeU : number = u - uTemp;\n\treturn bCurve.getTangent( relativeU );\n    };\n\n\n\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt( t:number ) : Vertex { \n\treturn this.getPerpendicular( t * this.totalArcLength );\n    };\n\n\n\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular( u:number ) : Vertex {\n\tif( u < 0 || u > this.totalArcLength ) {\n\t    console.log( \"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\" );\n\t    u = Math.min( this.totalArcLength, Math.max(0,u) );\n\t}\n\n\t// Find the spline to extract the value from\n\tvar uResult : { i:number, uPart:number, uBefore:number } = BezierPath._locateUIndex( this, u );\n\tvar bCurve : CubicBezierCurve = this.bezierCurves[ uResult.i ];\n\tvar relativeU : number = u - uResult.uPart;\n\t\n\treturn bCurve.getPerpendicular( relativeU );\n    };\n\n\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    private static _locateUIndex( path:BezierPath, u:number ) : { i:number, uPart:number, uBefore:number } {\n\tvar i : number = 0;\n\tvar uTemp : number = 0.0;\n\tvar uBefore : number = 0.0;\n\twhile( i < path.bezierCurves.length &&\n\t       (uTemp + path.bezierCurves[i].getLength()) < u \n\t     ) {\n\t    uTemp += path.bezierCurves[ i ].getLength();\n\t    if( i+1 < path.bezierCurves.length )\n\t\tuBefore += path.bezierCurves[ i ].getLength();\n\t    i++;\n\t}\n\treturn { i : i, uPart : uTemp, uBefore : uBefore };\n    };\n    \n\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt( startT:number, endT:number ) : BezierPath {\n\tstartT = Math.max(0,startT);\n\tendT = Math.min(1.0,endT);\n\tlet startU : number = startT * this.totalArcLength;\n\tlet endU : number = endT * this.totalArcLength;\n\n\tvar uStartResult : { i:number, uPart:number, uBefore:number } = BezierPath._locateUIndex( this, startU ); // { i:int, uPart:float, uBefore:float }\n\tvar uEndResult : { i:number, uPart:number, uBefore:number } = BezierPath._locateUIndex( this, endU );     // { i:int, uPart:float, uBefore:float }\n\t\n\tvar firstT : number = (startU-uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n\tif( uStartResult.i == uEndResult.i ) {\n\t    // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n\t    var lastT : number = (endU-uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n\t    var firstCurve : CubicBezierCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT); \n\t    return BezierPath.fromArray( [ firstCurve ] ); \n\t} else {\n\t    var curves : Array<CubicBezierCurve> = [];\n\t    if( uStartResult.i > uEndResult.i ) {\n\t\t// Back to front direction\n\t\tvar firstCurve : CubicBezierCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT,0.0);\n\t\tcurves.push(firstCurve);\t\n\t\tfor( var i = uStartResult.i-1; i > uEndResult.i; i-- ) {\n\t\t    curves.push( this.bezierCurves[i].clone().reverse() ); \n\t\t}\n\t\tvar lastT : number = (endU-uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n\t\tcurves.push( this.bezierCurves[uEndResult.i].getSubCurveAt(1.0,lastT) );\n\t    } else {\n\t\t// Front to back direction\n\t\tvar firstCurve : CubicBezierCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n\t\tcurves.push(firstCurve);\n\t\t\n\t\tfor( var i = uStartResult.i+1; i < uEndResult.i && i < this.bezierCurves.length; i++ ) {\n\t\t    curves.push( this.bezierCurves[i].clone() );\n\t\t}\n\t\t\n\t\tvar lastT : number = (endU-uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n\t\tcurves.push( this.bezierCurves[uEndResult.i].getSubCurveAt(0,lastT) );\n\t    }\n\t    return BezierPath.fromArray( curves );\n\t}\n    };\n        \n\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT, \n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint( curveIndex:number, pointID:number, moveAmount:XYCoords ) : void {\n\tvar bCurve : CubicBezierCurve = this.getCurveAt( curveIndex );\n\tbCurve.moveCurvePoint( pointID,\n\t\t\t       moveAmount,\n\t\t\t       true,       // move control point, too\n\t\t\t       true        // updateArcLengths\n\t\t\t     );\n\n\t// If inner point and NOT control point\n\t//  --> move neightbour\n\tif( pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular) ) {\n\n\t    // Set predecessor's control point!\n\t    var predecessor = this.getCurveAt( curveIndex-1<0 ? this.bezierCurves.length+(curveIndex-1) : curveIndex-1 );\n\t    predecessor.moveCurvePoint( this.END_CONTROL_POINT, \n\t\t\t\t\tmoveAmount,\n\t\t\t\t\ttrue,           // move control point, too\n\t\t\t\t\tfalse           // updateArcLengths\n\t\t\t\t      );\n\n\t} else if( pointID == this.END_POINT && (curveIndex+1 < this.bezierCurves.length || this.adjustCircular) ) {\n\t    // Set successcor\n\t    var successor : CubicBezierCurve = this.getCurveAt( (curveIndex+1)%this.bezierCurves.length );\n\t    successor.moveCurvePoint( this.START_CONTROL_POINT, \n\t\t\t\t      moveAmount, \n\t\t\t\t      true,             // move control point, too\n\t\t\t\t      false             // updateArcLengths\n\t\t\t\t    );\n\t   \n\t    \n\t} else if( pointID == this.START_CONTROL_POINT && curveIndex > 0 ) {\n\t    \n\t    this.adjustPredecessorControlPoint( curveIndex, \n\t\t\t\t\t\ttrue,   // obtain handle length?\n\t\t\t\t\t\tfalse   // update arc lengths\n\t\t\t\t\t      );\n\t    \n\t} else if( pointID == this.END_CONTROL_POINT && curveIndex+1 < this.getCurveCount() ) {\n\t    \n\t    this.adjustSuccessorControlPoint( curveIndex, \n\t\t\t\t\t      true,     // obtain handle length?\n\t\t\t\t\t      false     // update arc lengths\n\t\t\t\t\t    );\n\t    \n\t}\n\n\t// Don't forget to update the arc lengths!\n\t// Note: this can be optimized as only two curves have changed their lengths!\n\tthis.updateArcLengths();\n    };\n\n\n    \n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint( curveIndex:number, obtainHandleLength:boolean, updateArcLengths:boolean ): void  {\n\t\n\tif( !this.adjustCircular && curveIndex <= 0 )\n\t    return; // false;\n\n\tvar mainCurve : CubicBezierCurve = this.getCurveAt( curveIndex );\n\tvar neighbourCurve : CubicBezierCurve = this.getCurveAt( curveIndex-1<0 ? this.getCurveCount()+(curveIndex-1) : curveIndex-1 );\n\tBezierPath.adjustNeighbourControlPoint( mainCurve,\n\t\t\t\t\t\tneighbourCurve,\n\t\t\t\t\t\tmainCurve.getStartPoint(),            // the reference point\n\t\t\t\t\t\tmainCurve.getStartControlPoint(),     // the dragged control point\n\t\t\t\t\t\tneighbourCurve.getEndPoint(),         // the neighbour's point\n\t\t\t\t\t\tneighbourCurve.getEndControlPoint(),  // the neighbour's control point to adjust\n\t\t\t\t\t\tobtainHandleLength,\n\t\t\t\t\t\tupdateArcLengths\n\t\t\t\t\t      );\n    };\n\n\n    \n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint( curveIndex:number, obtainHandleLength:boolean, updateArcLengths:boolean ) : void {\n\tif( !this.adjustCircular && curveIndex+1 > this.getCurveCount() )\n\t    return; //  false; \n\n\tvar mainCurve : CubicBezierCurve      = this.getCurveAt( curveIndex );\n\tvar neighbourCurve : CubicBezierCurve = this.getCurveAt( (curveIndex+1)%this.getCurveCount() );\n\t/* return */ BezierPath.adjustNeighbourControlPoint( mainCurve,\n\t\t\t\t\t\t\t     neighbourCurve,\n\t\t\t\t\t\t\t     mainCurve.getEndPoint(),                // the reference point\n\t\t\t\t\t\t\t     mainCurve.getEndControlPoint(),         // the dragged control point\n\t\t\t\t\t\t\t     neighbourCurve.getStartPoint(),         // the neighbour's point\n\t\t\t\t\t\t\t     neighbourCurve.getStartControlPoint(),  // the neighbour's control point to adjust\n\t\t\t\t\t\t\t     obtainHandleLength,\n\t\t\t\t\t\t\t     updateArcLengths\n\t\t\t\t\t\t\t   );\n    };\n\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    private static adjustNeighbourControlPoint( _mainCurve:CubicBezierCurve,  // TODO: remove param\n\t\t\t\t\t\tneighbourCurve:CubicBezierCurve,\n\t\t\t\t\t\tmainPoint:Vertex,\n\t\t\t\t\t\tmainControlPoint:Vertex,\n\t\t\t\t\t\tneighbourPoint:Vertex,\n\t\t\t\t\t\tneighbourControlPoint:Vertex,\n\t\t\t\t\t\tobtainHandleLengths:boolean, \n\t\t\t\t\t\t_updateArcLengths:boolean  // TODO: remove param\n\t\t\t\t\t      ) : void {\n\n\t// Calculate start handle length\n\tvar mainHandleBounds : Vertex       = new Vertex( mainControlPoint.x - mainPoint.x,\n\t\t\t\t\t\t\t  mainControlPoint.y - mainPoint.y\n\t\t\t\t\t\t\t);\n\tvar neighbourHandleBounds : Vertex  = new Vertex( neighbourControlPoint.x - neighbourPoint.x,\n\t\t\t\t\t\t\t  neighbourControlPoint.y - neighbourPoint.y\n\t\t\t\t\t\t);\n\tvar mainHandleLength : number       = Math.sqrt( Math.pow(mainHandleBounds.x,2) + Math.pow(mainHandleBounds.y,2) );\n\tvar neighbourHandleLength : number  = Math.sqrt( Math.pow(neighbourHandleBounds.x,2) + Math.pow(neighbourHandleBounds.y,2) );\n\n\tif( mainHandleLength <= 0.1 ) \n\t    return; // no secure length available for division? What about zoom? Use EPSILON?\t\n\t\n\t// Just invert the main handle (keep length or not?\n\tif( obtainHandleLengths ) {\n\t    neighbourControlPoint.set( neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength/mainHandleLength),\n\t\t\t\t       neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength/mainHandleLength)\n\t\t\t\t     );\n\t} else {\n\t    neighbourControlPoint.set( neighbourPoint.x - mainHandleBounds.x,\n\t\t\t\t       neighbourPoint.y - mainHandleBounds.y \n\t\t\t\t     );\n\t}\n\tneighbourCurve.updateArcLengths();\n    };\n\n\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() : Bounds {\n\tconst min : Vertex = new Vertex( Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY );\n\tconst max : Vertex = new Vertex( Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY );\n\tvar b : Bounds;\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    b = this.bezierCurves[i].getBounds();\n\t    min.x = Math.min( min.x, b.min.x );\n\t    min.y = Math.min( min.y, b.min.y );\n\t    max.x = Math.max( max.x, b.max.x );\n\t    max.y = Math.max( max.y, b.max.y );\n\t}\n\treturn new Bounds( min, max );\n    };\n\n    \n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() : BezierPath {\n\tvar path : BezierPath = new BezierPath( undefined );\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    path.bezierCurves.push( this.bezierCurves[i].clone() );\n\t    // Connect splines\n\t    if( i > 0 )\n\t\tpath.bezierCurves[i-1].endPoint = path.bezierCurves[i].startPoint;\n\t}\n\tpath.updateArcLengths();\n\tpath.adjustCircular = this.adjustCircular;\n\treturn path;\n    };\n\n\n    \n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals( path:BezierPath ) : boolean {\n\tif( !path )\n\t    return false;\n\t// Check if path contains the credentials\n\tif( !path.bezierCurves )\n\t    return false;\n\tif( typeof path.bezierCurves.length == \"undefined\" )\n\t    return false;\n\tif( path.bezierCurves.length != this.bezierCurves.length )\n\t    return false;\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    if( !this.bezierCurves[i].equals(path.bezierCurves[i]) )\n\t\treturn false;\n\t}\n\treturn true;\n    };\n\n\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    toSVGString( options:{ className?: string } ) : string {\n\toptions = options || {};\n\tvar buffer : Array<string> = [];\n\tbuffer.push( '<path' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tbuffer.push( ' d=\"' );\n\tfor( var c = 0; c < this.bezierCurves.length; c++ ) {\n\t    if( c > 0 )\n\t\tbuffer.push( ' ' );\n\t    buffer.push( this.bezierCurves[c].toSVGPathData() );\n\t}\n\tbuffer.push( '\" />' );\n\treturn buffer.join('');\n    };\n\n\n\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON( prettyFormat:boolean ) : string {\n\tvar buffer : Array<string> = [];\n\tbuffer.push( \"[\" ); // array begin\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    if( i > 0 ) \n\t\tbuffer.push( \",\" );\n\t    if( prettyFormat)\n\t\tbuffer.push( \"\\n\\t\" );\n\t    else\n\t\tbuffer.push( \" \" );\n\t    buffer.push( this.bezierCurves[i].toJSON( prettyFormat ) );\n\t}\n\tif( this.bezierCurves.length != 0 )\n\t    buffer.push( \" \" );\n\tbuffer.push( \"]\" ); // array end\n\t\n\treturn buffer.join( \"\" ); // Convert to string, with empty separator.\n    };\n\n\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON( jsonString:string ) : BezierPath {\n\tvar obj:any = JSON.parse( jsonString );\n\treturn BezierPath.fromArray( obj );\n    };\n\n\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray( obj:any ) { \n\n\tif( !Array.isArray(obj) )\n\t    throw \"[BezierPath.fromArray] Passed object must be an array.\";\n\n\tconst arr:Array<any> = (obj as Array<Array<Vertex>>); // FORCE?\n\t\n\tif( arr.length < 1 )\n\t    throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n\t\n\t\n\t// Create an empty bezier path\n\tvar bPath : BezierPath = new BezierPath( undefined);\n\tvar lastCurve : CubicBezierCurve|null = null;\n\tfor( var i = 0; i < arr.length; i++ ) {\n\t    \n\t    // Convert object (or array?) to bezier curve\n\t    var bCurve : CubicBezierCurve;\n\t    if( CubicBezierCurve.isInstance(arr[i]) ) { \n\t\tbCurve = arr[i].clone();\n\t    } else if( 0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i] ) {\n\t\tif( !arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3] )\n\t\t    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\"+i+\"): \" + arr[i];\n\t\tbCurve = CubicBezierCurve.fromArray( arr[i] );\n\t    } else {\n\t\tbCurve = CubicBezierCurve.fromObject( arr[i] );\n\t    }\n\t    // Set curve start point?\n\t    // (avoid duplicate point instances!)\n\t    if( lastCurve )\n\t\tbCurve.startPoint = lastCurve.endPoint;\n\t    \n\t    // Add to path's internal list\n\t    bPath.bezierCurves.push( bCurve );\n\t    // bPath.totalArcLength += bCurve.getLength(); \t    \n\t    \n\t    lastCurve = bCurve;\n\t}\n\tbPath.updateArcLengths();\n\t// Bezier segments added. Done\n\treturn bPath;\n    };\n\n\n    \n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation( digits:number ): string {\n\t\n\tif( typeof digits == \"undefined\" )\n\t    digits = 1;\n\t\n\tvar buffer : Array<string> = [];\n\tbuffer.push( \"[\" ); // array begin\n\tfor( var i = 0; i < this.bezierCurves.length; i++ ) {\n\t    \n\t    var curve = this.bezierCurves[i];\n\t    buffer.push( curve.getStartPoint().x.toFixed(digits) );\n\t    buffer.push( \",\" );\n\t    buffer.push( curve.getStartPoint().y.toFixed(digits) );\n\t    buffer.push( \",\" );\n\n\t    buffer.push( curve.getStartControlPoint().x.toFixed(digits) );\n\t    buffer.push( \",\" );\n\t    buffer.push( curve.getStartControlPoint().y.toFixed(digits) );\n\t    buffer.push( \",\" );\n\t    \n\t    buffer.push( curve.getEndControlPoint().x.toFixed(digits) );\n\t    buffer.push( \",\" );\n\t    buffer.push( curve.getEndControlPoint().y.toFixed(digits) );\n\t    buffer.push( \",\" );\t\t\n\n\t}\n\tif( this.bezierCurves.length != 0 ) {\n\t    var curve = this.bezierCurves[ this.bezierCurves.length-1 ];\n\t    buffer.push( curve.getEndPoint().x.toFixed(digits) );\n\t    buffer.push( \",\" );\n\t    buffer.push( curve.getEndPoint().y.toFixed(digits) );\n\t}\n\tbuffer.push( \"]\" ); // array end\n\t\n\treturn buffer.join( \"\" ); // Convert to string, with empty separator.\n    };\n\n\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation( listJSON:string ) : BezierPath {\n\n\t// Parse the array\n\tvar pointArray : Array<number> = (JSON.parse( listJSON ) as Array<number>);\n\n\tif( !pointArray.length ) {\n\t    console.log( \"Cannot parse bezier path from non-array object nor from empty point list.\" );\n\t    throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n\t}\n\t\n\tif( pointArray.length < 8 ) {\n\t    console.log( \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\" );\n\t    throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n\t}\n\n\t// Convert to object\n\tvar bezierPath : BezierPath = new BezierPath( null ); // No points yet\n        \n\tvar startPoint : Vertex;\n\tvar startControlPoint : Vertex;\n\tvar endControlPoint : Vertex;\n\tvar endPoint : Vertex;\n\tvar i : number = 0;\n\n\tdo {\n\t    \n\t    //if( i == 0 )\n\t    startPoint        = new Vertex( pointArray[i], pointArray[i+1] );\n\t    startControlPoint = new Vertex( pointArray[i+2], pointArray[i+3] );\n\t    endControlPoint   = new Vertex( pointArray[i+4], pointArray[i+5] );\n\t    endPoint          = new Vertex( pointArray[i+6], pointArray[i+7] );\n\n\t    var bCurve : CubicBezierCurve = new CubicBezierCurve( startPoint,\n\t\t\t\t\t\t\t\t  endPoint,\n\t\t\t\t\t\t\t\t  startControlPoint,\n\t\t\t\t\t\t\t\t  endControlPoint\n\t\t\t\t\t\t\t\t);\n\t    bezierPath.bezierCurves.push( bCurve );\n\n\t    startPoint = endPoint;\n\t    \n\t    i += 6;\n\n\t} while( i+2 < pointArray.length );\n\tbezierPath.updateArcLengths();\n\treturn bezierPath;\n    };\n\n}\n","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @version  2.1.3\n *\n * @file Line\n * @public\n **/\n\nimport { Vector } from \"./Vector\";\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\nimport { XYCoords, SVGSerializable} from \"./interfaces\";\n\n\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line\n    extends VertTuple<Line>\n    implements SVGSerializable {\n\n\t/**\n\t * Required to generate proper CSS classes and other class related IDs.\n\t **/\n\treadonly className : string = \"Line\";\n\t\n\t\n\t/**\n\t * Creates an instance of Line.\n\t *\n\t * @constructor\n\t * @name Line\n\t * @param {Vertex} a The line's first point.\n\t * @param {Vertex} b The line's second point.\n\t **/\n\tconstructor(a:Vertex,b:Vertex) {\n\t    super(a,b,(a:Vertex,b:Vertex)=>new Line(a,b));\n\t}\n\t\n\n\t/**\n\t * Get the intersection if this line and the specified line.\n\t *\n\t * @method intersection\n\t * @param {Line} line The second line.\n\t * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n\t * @instance\n\t * @memberof Line\n\t **/\n\t// !!! DO NOT MOVE TO VertTuple\n\tintersection( line:Line ):Vertex|undefined {\n\t    const denominator : number = this.denominator(line);\n\t    if( denominator == 0 ) \n\t\treturn null;\n\t    \n\t    let a : number = this.a.y - line.a.y; \n\t    let b : number = this.a.x - line.a.x; \n\t    const numerator1 : number = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n\t    const numerator2 : number = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n\t    a = numerator1 / denominator; // NaN if parallel lines\n\t    b = numerator2 / denominator;\n\n\t    // Catch NaN?\n\t    const x : number = this.a.x + (a * (this.b.x - this.a.x));\n\t    const y : number = this.a.y + (a * (this.b.y - this.a.y));\n\n\t    if( isNaN(a) || isNaN(x) || isNaN(y) ) {\n\t\treturn undefined;\n\t    }\n\t    \n\t    // if we cast these lines infinitely in both directions, they intersect here:\n\t    return new Vertex( x, y );\n\t};\n\t\n\n\t/**\n\t * Create an SVG representation of this line.\n\t *\n\t * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n\t * @method toSVGString\n\t * @param {options} p - A set of options, like the 'classname' to use \n\t *                      for the line object.\n\t * @return {string} The SVG string representing this line.\n\t * @instance\n\t * @memberof Line\n\t **/\n\ttoSVGString( options:{ className?: string } ):string {\n\t    options = options || {};\n\t    var buffer = [];\n\t    buffer.push( '<line' );\n\t    if( options.className )\n\t\tbuffer.push( ' class=\"' + options.className + '\"' );\n\t    buffer.push( ' x1=\"' + this.a.x + '\"' );\n\t    buffer.push( ' y1=\"' + this.a.y + '\"' );\n\t    buffer.push( ' x2=\"' + this.b.x + '\"' );\n\t    buffer.push( ' y2=\"' + this.b.y + '\"' );\n\t    buffer.push( ' />' );\n\t    return buffer.join('');\n\t};\n    }\n","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @version  1.2.0\n **/\n\n\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\nimport { SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple \n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle implements SVGSerializable {\n\n    /** \n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"Circle\";\n    \n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof Circle\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n    \n    /** \n     * @member {Vertex} \n     * @memberof Circle\n     * @instance\n     */\n    center:Vertex;\n\n    /**\t\n     * @member {number} \n     * @memberof Circle\n     * @instance\n     */\n    radius:number;\n\n\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor( center:Vertex, radius:number ) {\n\tthis.uid = UIDGenerator.next();\n\tthis.center = center;\n\tthis.radius = radius;\n    };\n\n\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle( circle:Circle ) : boolean {\n\treturn this.center.distance(circle.center) + circle.radius < this.radius;\n    };\n\n\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned \n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value \n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance( line:VertTuple<any> ) : number {\n\tconst closestPointOnLine : Vertex = line.getClosestPoint( this.center );\n\treturn closestPointOnLine.distance( this.center ) - this.radius;\n    };\n\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt( angle: number ) : Vertex {\n\t// Find the point on the circle respective the angle. Then move relative to center.\n\treturn Circle.circleUtils.vertAt( angle, this.radius ).add( this.center );\n    };\n    \n\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt( angle: number ) : Vector {\n\tconst pointA : Vertex = Circle.circleUtils.vertAt( angle, this.radius );\n\t// Construct the perpendicular of the line in point a. Then move relative to center.\n\treturn (new Vector( pointA, new Vertex(0,0) ).add( this.center ) as Vector).perp() as Vector;\n    };\n\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle \n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection( circle:Circle ) : Line | null {\n\t// Circles do not intersect at all?\n\tif( this.center.distance(circle.center) > this.radius+circle.radius ) {\n\t    return null;\n\t}\n\t// One circle is fully inside the other?\n\tif( this.center.distance(circle.center) < Math.abs(this.radius-circle.radius) ) {\n\t    return null;\n\t}\n\t// Based on the C++ implementation by Robert King\n\t//    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n\t// and the 'Circles and spheres' article by Paul Bourke.\n\t//    http://paulbourke.net/geometry/circlesphere/\n\t//\n\t// This is the original C++ implementation:\n\t//\n\t// pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n\tvar p0 = this.center;\n\tvar p1 = circle.center;\n\tvar d = p0.distance(p1);\n\tvar a = (this.radius*this.radius - circle.radius*circle.radius + d*d)/(2*d);\n\tvar h = Math.sqrt( this.radius*this.radius - a*a );\n\tvar p2 = p1.clone().scale(a/d,p0); \n\tvar x3 = p2.x + h*(p1.y - p0.y)/d;\n\tvar y3 = p2.y - h*(p1.x - p0.x)/d;\n        var x4 = p2.x - h*(p1.y - p0.y)/d;\n        var y4 = p2.y + h*(p1.x - p0.x)/d;\n\treturn new Line( new Vertex(x3,y3), new Vertex(x4,y4) );\n    };\n\n   /**\n     * Create an SVG representation of this circle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Circle\n     */\n    toSVGString( options:{className?:string } ) {\n\toptions = options || {};\n\tvar buffer : Array<string> = [];\n\tbuffer.push( '<circle' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tbuffer.push( ' cx=\"' + this.center.x + '\"' );\n\tbuffer.push( ' cy=\"' + this.center.y + '\"' );\n\tbuffer.push( ' r=\"' + this.radius + '\"' );\n\tbuffer.push( ' />' );\n\treturn buffer.join('');\n    };\n\n    static circleUtils = {\n\tvertAt : function(angle,radius) {\n\t    /* return new Vertex( Math.sin(angle) * radius,\n\t\t\t       Math.cos(angle) * radius ); */\n\t    return new Vertex( Math.cos(angle) * radius,\n\t\t\t       Math.sin(angle) * radius );\n\t}\n    };\n    \n} // END class\n","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @version  1.1.0\n **/\n\n\nimport { Circle } from \"./Circle\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { SVGPathParams, SVGSerializable, UID, XYCoords } from \"./interfaces\";\n\n\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector implements SVGSerializable {\n\n    /** \n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"CircleSector\";\n    \n    \n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof CircleSector\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n    \n    /** \n     * @member {Circle} \n     * @memberof CircleSector\n     * @instance\n     */\n    circle:Circle;\n\n   /**\t\n     * @member {number} \n     * @memberof CircleSector\n     * @instance\n     */\n    startAngle:number;\n\n    /**\t\n     * @member {number} \n     * @memberof CircleSector\n     * @instance\n     */\n    endAngle:number;\n\n\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor( circle:Circle, startAngle:number, endAngle:number ) {\n\tthis.uid = UIDGenerator.next();\n\tthis.circle = circle;\n\tthis.startAngle = startAngle;\n\tthis.endAngle = endAngle;\n    };\n\n\n\n\n   /**\n     * Create an SVG representation of this circle.\n     *\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Circle\n     */\n    toSVGString( options:{className?:string } ) {\n\toptions = options || {};\n\tvar buffer : Array<string> = [];\n\tbuffer.push( '<path ' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tconst data : SVGPathParams = CircleSector.circleSectorUtils.describeSVGArc(\n\t    this.circle.center.x, this.circle.center.y,\n\t    this.circle.radius,\n\t    this.startAngle, this.endAngle );\n\tbuffer.push( ' d=\"' + data.join(\" \") + '\" />' );\n\treturn buffer.join('');\n    };\n\n    static circleSectorUtils = {\n\t/**\n\t * Helper function to convert polar circle coordinates to cartesian coordinates.\n\t *\n\t * TODO: generalize for ellipses (two radii).\n\t *\n\t * @param {number} angle - The angle in radians.\n\t*/\n\tpolarToCartesian : ( centerX:number, centerY:number, radius:number, angle:number ) : XYCoords => {\n\t    return {\n\t\tx: centerX + (radius * Math.cos(angle)),\n\t\ty: centerY + (radius * Math.sin(angle))\n\t    };\n\t},\n\n\t/**\n\t * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n\t * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n\t *\n\t * TODO: generalize for ellipses (two radii).\n\t *\n\t * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n\t * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n\t */\n\tdescribeSVGArc : ( x:number, y:number,\n\t\t\t   radius:number,\n\t\t\t   startAngle:number, endAngle:number,\n\t\t\t   options?:{moveToStart:boolean}\n\t\t\t ) : SVGPathParams => {\n\t    \n\t    if( typeof options === 'undefined' )\n\t\toptions = { moveToStart : true };\n\t    \n\t    const end : XYCoords = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n\t    const start : XYCoords = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n\n\t    // Split full circles into two halves.\n\t    // Some browsers have problems to render full circles (described by start==end).\n\t    if( Math.PI*2-Math.abs(startAngle-endAngle) < 0.001 ) {\n\t\tconst firstHalf : SVGPathParams = CircleSector.circleSectorUtils.describeSVGArc( x, y, radius, startAngle, startAngle+(endAngle-startAngle)/2, options );\n\t\tconst firstEndPoint : XYCoords = { x : firstHalf[firstHalf.length-2] as number,\n\t\t\t\t\t\t   y : firstHalf[firstHalf.length-1] as number\n\t\t\t\t\t\t };\n\t\tconst secondHalf : SVGPathParams = CircleSector.circleSectorUtils.describeSVGArc( x, y, radius, startAngle+(endAngle-startAngle)/2, endAngle, options );\n\t\treturn firstHalf.concat( secondHalf );\n\t    }\n\n\t    // Boolean stored as integers (0|1).\n\t    const largeArcFlag : number = endAngle - startAngle <= Math.PI ? 0 : 1;\n\t    const sweepFlag : number = 1;\n\t    const pathData = [];\n\t    if( options.moveToStart ) {\n\t\tpathData.push('M', start.x, start.y );\n\t    }\n\t    pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y );\n\t    return pathData;\n\t}\n    };\n    \n} // END class\n","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @version  1.8.3\n **/\n\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\nimport { DrawLib, XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n// Todo: rename this class to Drawutils\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils implements DrawLib<void> {\n\n    /** \n     * @member {CanvasRenderingContext2D} \n     * @memberof drawutils\n     * @type {CanvasRenderingContext2D}\n     * @instance\n     */\n    ctx:CanvasRenderingContext2D;\n\n    /** \n     * @member {Vertex} \n     * @memberof drawutils\n     * @type {Vertex}\n     * @instance\n     */\n    readonly offset:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof drawutils\n     * @type {Vertex}\n     * @instance\n     */\n    readonly scale:Vertex;\n\n    /** \n     * @member {boolean} \n     * @memberof drawutils\n     * @type {boolean}\n     * @instance\n     */\n    fillShapes:boolean;\n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor( context:CanvasRenderingContext2D, fillShapes:boolean ) {\n\tthis.ctx = context;\n\tthis.offset = new Vertex( 0, 0 );\n\tthis.scale = new Vertex( 1, 1 );\n\tthis.fillShapes = fillShapes;\n    };\n\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle( renderTime:number) {\n\t// NOOP\n    };\n\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     * \n     * @name setCurrentId\n     * @method \n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId( uid : UID|undefined ) : void {\n\t// NOOP\n    };\n\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     * \n     * @name setCurrentClassName\n     * @method \n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName( className:string|undefined ) : void {\n\t// NOOP\n    };\n\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line( zA:Vertex, zB:Vertex, color:string, lineWidth?:number ) {\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tthis.ctx.moveTo( this.offset.x+zA.x*this.scale.x, this.offset.y+zA.y*this.scale.y );\n\tthis.ctx.lineTo( this.offset.x+zB.x*this.scale.x, this.offset.y+zB.y*this.scale.y );\n\tthis.ctx.strokeStyle = color;\n\tthis.ctx.lineWidth = lineWidth || 1;\n\tthis.ctx.stroke();\n\tthis.ctx.restore();\n    };\n\n    \n\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow( zA:Vertex, zB:Vertex, color:string, lineWidth?:number ) {\n\tvar headlen:number = 8;   // length of head in pixels\n\t// var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n\t// var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n\t\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tvar vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n\t\n\tthis.ctx.moveTo( this.offset.x+zA.x*this.scale.x, this.offset.y+zA.y*this.scale.y );\n\tfor( var i = 0; i < vertices.length; i++ ) {\n\t    this.ctx.lineTo( this.offset.x+vertices[i].x, this.offset.y+vertices[i].y );\n\t}\n\tthis.ctx.lineTo( this.offset.x+vertices[0].x, this.offset.y+vertices[0].y );\n\tthis.ctx.lineWidth = lineWidth || 1;\n\tthis._fillOrDraw( color );\n\tthis.ctx.restore();\n    };\n\n\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image( image:HTMLImageElement, position:Vertex, size:Vertex ) : void {\n\tif( !image.complete || !image.naturalWidth ) {\n\t    // Avoid drawing un-unloaded or broken images\n\t    return;\n\t}\n\tthis.ctx.save();\n\t// Note that there is a Safari bug with the 3 or 5 params variant.\n\t// Only the 9-param varaint works.\n\tthis.ctx.drawImage( image,\n\t\t\t    0, 0,\n\t\t\t    image.naturalWidth-1,  // There is this horrible Safari bug (fixed in newer versions)\n\t\t\t    image.naturalHeight-1, // To avoid errors substract 1 here.\n\t\t\t    this.offset.x+position.x*this.scale.x,\n\t\t\t    this.offset.y+position.y*this.scale.y,\n\t\t\t    size.x*this.scale.x,\n\t\t\t    size.y*this.scale.y );\n\tthis.ctx.restore();\t\n    };\n\n\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect( position:Vertex, width:number, height:number, color:string, lineWidth?:number ) : void {\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tthis.ctx.moveTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n\tthis.ctx.lineTo( this.offset.x+(position.x+width)*this.scale.x, this.offset.y+position.y*this.scale.y );\n\tthis.ctx.lineTo( this.offset.x+(position.x+width)*this.scale.x, this.offset.y+(position.y+height)*this.scale.y );\n\tthis.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+(position.y+height)*this.scale.y );\n\t// this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = lineWidth || 1;\n\tthis._fillOrDraw( color );\n\tthis.ctx.restore();\n    };\n\n    \n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw( color:string ) {\n\tif( this.fillShapes ) {\n\t    this.ctx.fillStyle = color;\n\t    this.ctx.fill();\n\t} else {\n\t    this.ctx.strokeStyle = color;\n\t    this.ctx.stroke();\n\t}\n    };\n\n\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier( startPoint:Vertex, endPoint:Vertex, startControlPoint:Vertex, endControlPoint:Vertex, color:string, lineWidth?:number ) {\n\tif( startPoint instanceof CubicBezierCurve ) {\n\t    this.cubicBezier( startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth );\n\t    return;\n\t}\n\t// Draw curve\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tthis.ctx.moveTo( this.offset.x+startPoint.x*this.scale.x, this.offset.y+startPoint.y*this.scale.y );\n\tthis.ctx.bezierCurveTo( this.offset.x+startControlPoint.x*this.scale.x, this.offset.y+startControlPoint.y*this.scale.y,\n\t\t\t\tthis.offset.x+endControlPoint.x*this.scale.x, this.offset.y+endControlPoint.y*this.scale.y,\n\t\t\t\tthis.offset.x+endPoint.x*this.scale.x, this.offset.y+endPoint.y*this.scale.y );\n\t//this.ctx.closePath();\n\tthis.ctx.lineWidth = lineWidth || 2;\n\tthis._fillOrDraw( color );\n\tthis.ctx.restore();\n    };\n\n\n    \n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier( startPoint:Vertex, controlPoint:Vertex, endPoint:Vertex, color:string, lineWidth?:number ) {\n\t// Draw curve\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tthis.ctx.moveTo( this.offset.x+startPoint.x*this.scale.x, this.offset.y+startPoint.y*this.scale.y );\n\tthis.ctx.quadraticCurveTo( this.offset.x+controlPoint.x*this.scale.x, this.offset.y+controlPoint.y*this.scale.y,\n\t\t\t\t   this.offset.x+endPoint.x*this.scale.x, this.offset.y+endPoint.y*this.scale.y );\n\tthis.ctx.lineWidth = lineWidth || 2;\n\tthis._fillOrDraw( color );\n\tthis.ctx.restore();\n    };\n\n\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre> \n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath( path:Array<Vertex>, color:string, lineWidth?:number ) {\n\tif( !path || path.length == 0 )\n\t    return;\n\t// Draw curve\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tvar curve:any, startPoint:Vertex, endPoint:Vertex, startControlPoint:Vertex, endControlPoint:Vertex;\n\tthis.ctx.moveTo( this.offset.x+path[0].x*this.scale.x, this.offset.y+path[0].y*this.scale.y );\n\tfor( var i = 1; i < path.length; i+=3 ) {\n\t    startControlPoint = path[i];\n\t    endControlPoint = path[i+1];\n\t    endPoint = path[i+2];\n\t    this.ctx.bezierCurveTo( this.offset.x+startControlPoint.x*this.scale.x, this.offset.y+startControlPoint.y*this.scale.y,\n\t\t\t\t    this.offset.x+endControlPoint.x*this.scale.x, this.offset.y+endControlPoint.y*this.scale.y,\n\t\t\t\t    this.offset.x+endPoint.x*this.scale.x, this.offset.y+endPoint.y*this.scale.y );\n\t}\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = lineWidth || 1;\n\tthis._fillOrDraw( color );\n\tthis.ctx.restore();\n    };\n\n\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle( startPoint:Vertex, endPoint:Vertex ) { \n\t// Draw handles\n\t// (No need to save and restore here)\n\tthis.point( startPoint, 'rgb(0,32,192)' );\n\tthis.square( endPoint, 5, 'rgba(0,128,192,0.5)' );\n    };\n    \n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine( startPoint:Vertex, endPoint:Vertex ) {\n\t// Draw handle lines\n\tthis.line( startPoint, endPoint, 'rgb(192,192,192)' );\t\n    };\n\n\n    \n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot( p:Vertex, color:string ) {\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tthis.ctx.moveTo( Math.round(this.offset.x + this.scale.x*p.x), Math.round(this.offset.y + this.scale.y*p.y) );\n\tthis.ctx.lineTo( Math.round(this.offset.x + this.scale.x*p.x+1), Math.round(this.offset.y + this.scale.y*p.y+1) );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = 1;\n\tthis._fillOrDraw( color );\n\tthis.ctx.restore();\n    };\n\n    \n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point( p:Vertex, color:string ) {\n\tvar radius:number = 3;\n\tthis.ctx.beginPath();\n\tthis.ctx.arc( this.offset.x+p.x*this.scale.x, this.offset.y+p.y*this.scale.y, radius, 0, 2 * Math.PI, false );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = 1;\n\tthis._fillOrDraw( color );\n    };\n\n\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle( center:Vertex, radius:number, color:string, lineWidth?:number ) {\n\tthis.ctx.beginPath();\n\tthis.ctx.ellipse( this.offset.x + center.x*this.scale.x, this.offset.y + center.y*this.scale.y, radius*this.scale.x, radius*this.scale.y, 0.0, 0.0, Math.PI*2 );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = lineWidth || 1;\n\tthis._fillOrDraw( color );\n    };\n\n    \n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc( center:Vertex, radius:number, startAngle:number, endAngle:number, color?:string, lineWidth?:number, options?:{asSegment?:boolean} ) {\n\tif( !options || !options.asSegment ) {\n\t    this.ctx.beginPath();\n\t}\n\tthis.ctx.ellipse( this.offset.x+center.x*this.scale.x, this.offset.y+center.y*this.scale.y, radius*this.scale.x, radius*this.scale.y, 0.0, startAngle, endAngle, false );\n\tif( !options || !options.asSegment ) { \n\t    // this.ctx.closePath();\n\t    this.ctx.lineWidth = lineWidth || 1;\n\t    this._fillOrDraw( color || '#000000' );\n\t}\n    };\n\n\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse( center:Vertex, radiusX:number, radiusY:number, color:string, lineWidth?:number ) {\n\tthis.ctx.beginPath();\n\tthis.ctx.ellipse( this.offset.x + center.x*this.scale.x, this.offset.y + center.y*this.scale.y, radiusX*this.scale.x, radiusY*this.scale.y, 0.0, 0.0, Math.PI*2 );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = lineWidth || 1;\n\tthis._fillOrDraw( color );\n    };   \n\n\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square( center:Vertex, size:number, color:string, lineWidth?:number ) {\n\tthis.ctx.beginPath();\n\tthis.ctx.rect( this.offset.x+(center.x-size/2.0)*this.scale.x, this.offset.y+(center.y-size/2.0)*this.scale.y, size*this.scale.x, size*this.scale.y );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = lineWidth || 1;\n\tthis._fillOrDraw( color );\n    };\n\n\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid( center:Vertex, width:number, height:number, sizeX:number, sizeY:number, color:string ) {\n\tthis.ctx.beginPath();\n\tvar yMin : number = -Math.ceil((height*0.5)/sizeY)*sizeY;\n\tvar yMax : number = height/2;\n\tfor( var x = -Math.ceil((width*0.5)/sizeX)*sizeX; x < width/2; x+=sizeX ) {\n\t    this.ctx.moveTo( this.offset.x+(center.x+x)*this.scale.x, this.offset.y+(center.y+yMin)*this.scale.y );\n\t    this.ctx.lineTo( this.offset.x+(center.x+x)*this.scale.x, this.offset.y+(center.y+yMax)*this.scale.y );\n\t}\n\n\tvar xMin : number = -Math.ceil((width*0.5)/sizeX)*sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n\tvar xMax : number = width/2; // height/2;\n\tfor( var y = -Math.ceil((height*0.5)/sizeY)*sizeY; y < height/2; y+=sizeY ) {\n\t    this.ctx.moveTo( this.offset.x+(center.x+xMin)*this.scale.x-4, this.offset.y+(center.y+y)*this.scale.y );\n\t    this.ctx.lineTo( this.offset.x+(center.x+xMax)*this.scale.x+4, this.offset.y+(center.y+y)*this.scale.y );\n\t}\n\tthis.ctx.strokeStyle = color;\n\tthis.ctx.lineWidth = 1.0;\n\tthis.ctx.stroke();\n\tthis.ctx.closePath();\n    };\n\n\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster( center:Vertex, width:number, height:number, sizeX:number, sizeY:number, color:string ) {\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tvar cx : number = 0, cy : number = 0;\n\tfor( var x = -Math.ceil((width*0.5)/sizeX)*sizeX; x < width/2; x+=sizeX ) {\n\t    cx++;\n\t    for( var y = -Math.ceil((height*0.5)/sizeY)*sizeY; y < height/2; y+=sizeY ) {\n\t\tif( cx == 1 ) cy++;\n\t\t// Draw a crosshair\n\t\tthis.ctx.moveTo( this.offset.x+(center.x+x)*this.scale.x-4, this.offset.y+(center.y+y)*this.scale.y );\n\t\tthis.ctx.lineTo( this.offset.x+(center.x+x)*this.scale.x+4, this.offset.y+(center.y+y)*this.scale.y );\n\t\tthis.ctx.moveTo( this.offset.x+(center.x+x)*this.scale.x, this.offset.y+(center.y+y)*this.scale.y-4 );\n\t\tthis.ctx.lineTo( this.offset.x+(center.x+x)*this.scale.x, this.offset.y+(center.y+y)*this.scale.y+4 );\t\n\t    }\n\t}\n\tthis.ctx.strokeStyle = color;\n\tthis.ctx.lineWidth = 1.0; \n\tthis.ctx.stroke();\n\tthis.ctx.closePath();\n\tthis.ctx.restore(); \n    };\n    \n\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle( center:Vertex, size:number, color:string ) {\n\tthis.ctx.beginPath();\n\tthis.ctx.moveTo( this.offset.x + center.x*this.scale.x - size/2.0, this.offset.y + center.y*this.scale.y );\n\tthis.ctx.lineTo( this.offset.x + center.x*this.scale.x,            this.offset.y + center.y*this.scale.y - size/2.0 );\n\tthis.ctx.lineTo( this.offset.x + center.x*this.scale.x + size/2.0, this.offset.y + center.y*this.scale.y );\n\tthis.ctx.lineTo( this.offset.x + center.x*this.scale.x,            this.offset.y + center.y*this.scale.y + size/2.0 );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = 1;\n\tthis._fillOrDraw( color );\n    };\n\n\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle( center:Vertex, size:number, color:string ) {\n\tthis.ctx.beginPath();\n\tthis.ctx.rect( this.offset.x+center.x*this.scale.x-size/2.0, this.offset.y+center.y*this.scale.y-size/2.0, size, size );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = 1;\n\tthis._fillOrDraw( color );\n    };\n\n\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle( center:Vertex, radius:number, color:string ) {\n\tradius = radius || 3;\n\tthis.ctx.beginPath();\n\tthis.ctx.arc( this.offset.x+center.x*this.scale.x, this.offset.y+center.y*this.scale.y, radius, 0, 2 * Math.PI, false );\n\tthis.ctx.closePath();\n\tthis.ctx.lineWidth = 1;\n\tthis._fillOrDraw( color );\n    };\n\n\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair( center:XYCoords, radius:number, color:string ) {\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tthis.ctx.moveTo( this.offset.x+center.x*this.scale.x-radius, this.offset.y+center.y*this.scale.y );\n\tthis.ctx.lineTo( this.offset.x+center.x*this.scale.x+radius, this.offset.y+center.y*this.scale.y );\n\tthis.ctx.moveTo( this.offset.x+center.x*this.scale.x, this.offset.y+center.y*this.scale.y-radius );\n\tthis.ctx.lineTo( this.offset.x+center.x*this.scale.x, this.offset.y+center.y*this.scale.y+radius );\n\tthis.ctx.strokeStyle = color;\n\tthis.ctx.lineWidth = 0.5;\n\tthis.ctx.stroke();\n\tthis.ctx.closePath();\n\tthis.ctx.restore();\n    };\n\n\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon( polygon:Polygon, color:string, lineWidth?:number ) {\n\tthis.polyline( polygon.vertices, polygon.isOpen, color, lineWidth );\n    };\n\n\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline( vertices:Array<Vertex>, isOpen:boolean, color:string, lineWidth?:number ) {\n\tif( vertices.length <= 1 )\n\t    return;\n\tthis.ctx.save();\n\tthis.ctx.beginPath();\n\tthis.ctx.lineWidth = lineWidth || 1.0;\n\tthis.ctx.moveTo( this.offset.x + vertices[0].x*this.scale.x, this.offset.y + vertices[0].y*this.scale.y );\n\tfor( var i = 0; i < vertices.length; i++ ) {\n\t    this.ctx.lineTo( this.offset.x + vertices[i].x*this.scale.x, this.offset.y + vertices[i].y*this.scale.y );\n\t}\n\tif( !isOpen ) // && vertices.length > 2 )\n\t    this.ctx.closePath();\n\tthis._fillOrDraw( color );\n\tthis.ctx.closePath();\n\tthis.ctx.setLineDash([]);\n\tthis.ctx.restore();\n    };\n\n\n    text( text:string, x:number, y:number, options?:{color?:string}) {\n\toptions = options || {};\n\tthis.ctx.save();\n\tx = this.offset.x+x*this.scale.x;\n\ty = this.offset.y+y*this.scale.y;\n\tconst color:string = options.color || 'black';\n\tif( this.fillShapes ) {\n\t    this.ctx.fillStyle = color;\n\t    this.ctx.fillText( text, x, y );\n\t} else {\n\t    this.ctx.strokeStyle = color;\n\t    this.ctx.strokeText( text, x, y );\n\t}\n\tthis.ctx.restore();\n    };\n    \n\n\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label( text:string, x:number, y:number, rotation?:number, color?:string ) {\n\tthis.ctx.save();\n\tthis.ctx.translate(x, y);\n\tif( typeof rotation != 'undefined' )\n\t    this.ctx.rotate(rotation);\n\tthis.ctx.fillStyle = color || 'black';\n\tif( this.fillShapes ) {\n\t    this.ctx.fillText( text, 0, 0 ); \n\t} else {\n\t    this.ctx.strokeText( text, 0, 0 );\n\t}\n\tthis.ctx.restore();\n    };\n   \n\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear( color:string ) {\n\tthis.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n\tthis.ctx.fillStyle = color; \n\tthis.ctx.fillRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height);\n    };\n    \n   \n}\n","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @version  0.0.5\n **/\n\n\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\nimport { DrawLib, XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl implements DrawLib<void> {\n    \n    // Vertex shader source code\n    private static vertCode : string = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n\n    // Fragment shader source code\n    private static fragCode : string = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n\n    gl:WebGLRenderingContext;\n\n    readonly offset:Vertex;\n    readonly scale:Vertex;\n\n    fillShapes:boolean;\n\n    private _zindex:number;\n\n    private glutils:GLU;\n\n    private _vertShader : WebGLShader;  // TODO (what's the type?)\n    private _fragShader : WebGLShader;  // TODO\n    private _program : WebGLProgram;\n    private vertex_buffer : WebGLBuffer; // TODO\n\n    private curId : UID | undefined;\n    private renderTime : number;\n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor( context:WebGLRenderingContext, fillShapes:boolean ) {\n\tthis.gl = context;\n\tthis.offset = new Vertex( 0, 0 );\n\tthis.scale = new Vertex( 1, 1 );\n\tthis.fillShapes = fillShapes;\n\n\tthis._zindex = 0.0;\n\n\tif( context == null || typeof context === 'undefined' )\n\t    return;\n\n\tthis.glutils = new GLU(context);\n\t// PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n\t// SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n\t// This needs to be considered in the overlying component; both draw-instances need to\n\t// share their gl context.\n\t// That's what the copyInstace(boolean) method is good for.\n\tthis._vertShader = this.glutils.compileShader( drawutilsgl.vertCode, this.gl.VERTEX_SHADER );\n\tthis._fragShader = this.glutils.compileShader( drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER );\n\tthis._program = this.glutils.makeProgram( this._vertShader, this._fragShader );\n\n\t// Create an empty buffer object\n\tthis.vertex_buffer = this.gl.createBuffer();\n\t// Bind appropriate array buffer to it\n\t// this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n\t\n\tconsole.log('gl initialized');\n    };\n\n    \n    _x2rel(x:number) : number { return (this.scale.x*x+this.offset.x)/this.gl.canvas.width*2.0-1.0; };\n    _y2rel(y:number) : number { return (this.offset.y-this.scale.y*y)/this.gl.canvas.height*2.0-1.0; };\n\n\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance( fillShapes:boolean ) : drawutilsgl {\n\tvar copy : drawutilsgl = new drawutilsgl(null,fillShapes);\n\tcopy.gl = this.gl;\n\tcopy.glutils = this.glutils;\n\tcopy._vertShader = this._vertShader;\n\tcopy._fragShader = this._fragShader;\n\tcopy._program = this._program;\n\treturn copy;\n    };\n    \n\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle( renderTime:number ) {\n\tthis._zindex = 0.0;\n\tthis.renderTime = renderTime;\n    };\n\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     * \n     * @name setCurrentId\n     * @method \n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId( uid:UID|undefined ) : void {\n\t// NOOP\n\tthis.curId = uid;\n    };\n\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     * \n     * @name setCurrentClassName\n     * @method \n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName( className:string|undefined ) : void {\n\t// NOOP\n    };\n    \n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line( zA:Vertex, zB:Vertex, color:string ) {\n\tconst vertices : Float32Array = new Float32Array( 6 );\n\tvertices[0] = this._x2rel(zA.x);\n\tvertices[1] = this._y2rel(zA.y);\n\tvertices[2] = this._zindex;\n\tvertices[3] = this._x2rel(zB.x);\n\tvertices[4] = this._y2rel(zB.y);\n\tvertices[5] = this._zindex;\n\tthis._zindex+=0.001;\n\t\n\t// Create an empty buffer object\n\t// const vertex_buffer = this.gl.createBuffer();\n\t// Bind appropriate array buffer to it\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n\t// Pass the vertex data to the buffer\n\tthis.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n\t// Bind vertex buffer object\n\t// this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n\t// Get the attribute location\n\tvar coord = this.gl.getAttribLocation(this._program, \"position\");\n\t// Point an attribute to the currently bound VBO\n\tthis.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n\t// Enable the attribute\n\tthis.gl.enableVertexAttribArray(coord);\n\t// Unbind the buffer?\n\t//this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n\t// Set the view port\n\tthis.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height);\n\n\tlet uRotationVector =\n\t    this.gl.getUniformLocation(this._program, \"uRotationVector\");\n\t// let radians = currentAngle * Math.PI / 180.0;\n\tlet currentRotation = [ 0.0, 1.0 ];\n\t//currentRotation[0] = Math.sin(radians);\n\t//currentRotation[1] = Math.cos(radians);\n\tthis.gl.uniform2fv( uRotationVector, currentRotation );\n\n\tthis.gl.lineWidth(5);\n\t\n\t// Draw the line\n\tthis.gl.drawArrays(this.gl.LINES, 0, vertices.length/3);\n\t// POINTS, LINE_STRIP, LINE_LOOP, LINES,\n\t// TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n\n\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow( zA:Vertex, zB:Vertex, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image( image:HTMLImageElement, position:Vertex, size:Vertex ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n    \n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw( color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier( startPoint:Vertex, endPoint:Vertex, startControlPoint:Vertex, endControlPoint:Vertex, color:string, lineWidth?:number ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre> \n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath( path:Array<Vertex>, color:string, lineWidth?:number ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle( startPoint:Vertex, endPoint:Vertex ) { \n\t// NOT YET IMPLEMENTED\n    };\n\n    \n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine( startPoint:Vertex, endPoint:Vertex ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    \n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot( p:Vertex, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n    \n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point( p:Vertex, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle( center:Vertex, radius:number, color:string, lineWidth?:number ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc( center:Vertex, radius:number, startAngle:number, endAngle:number, color:string, lineWidth?:number ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse( center:Vertex, radiusX:number, radiusY:number, color:string, lineWidth?:number) {\n\t// NOT YET IMPLEMENTED\n    };   \n\n\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square( center:Vertex, size:number, color:string, lineWidth?:number ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid( center:Vertex, width:number, height:number, sizeX:number, sizeY:number, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster( center:Vertex, width:number, height:number, sizeX:number, sizeY:number, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n    \n\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle( center:Vertex, size:number, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle( center:Vertex, size:number, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle( center:Vertex, size:number, color:string ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair( center:XYCoords, radius:number, color:string ) {\n\t// NOT YET IMPLEMENTED\t\n    };\n\n\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon( polygon:Polygon, color:string, lineWidth?:number ) {\t\n\tconst vertices : Float32Array = new Float32Array( polygon.vertices.length*3 );\n\tfor( var i = 0; i < polygon.vertices.length; i++ ) {\n\t    vertices[i*3+0] = this._x2rel(polygon.vertices[i].x);\n\t    vertices[i*3+1] = this._y2rel(polygon.vertices[i].y);\n\t    vertices[i*3+2] = this._zindex;\n\t}\n\tthis._zindex+=0.001;\n\t//console.log( vertices );\n\t\n\t// Create an empty buffer object\n\t// const vertex_buffer = this.gl.createBuffer();\n\t// Bind appropriate array buffer to it\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n\t// Pass the vertex data to the buffer\n\tthis.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n\t// Bind vertex buffer object\n\t// this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n\t// Get the attribute location\n\tvar coord = this.gl.getAttribLocation(this._program, \"position\");\n\t// Point an attribute to the currently bound VBO\n\tthis.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n\t// Enable the attribute\n\tthis.gl.enableVertexAttribArray(coord);\n\t// Unbind the buffer?\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n\t// Set the view port\n\tthis.gl.viewport(0,0,this.gl.canvas.width,this.gl.canvas.height);\n\n\tlet uRotationVector =\n\t    this.gl.getUniformLocation(this._program, \"uRotationVector\");\n\t// let radians = currentAngle * Math.PI / 180.0;\n\tlet currentRotation = [ 0.0, 1.0 ];\n\t//currentRotation[0] = Math.sin(radians);\n\t//currentRotation[1] = Math.cos(radians);\n\tthis.gl.uniform2fv( uRotationVector, currentRotation );\n\t\n\t// Draw the polygon\n\tthis.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length/3);\n\t// POINTS, LINE_STRIP, LINE_LOOP, LINES,\n\t// TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n\n\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline( vertices:Array<Vertex>, isOpen:boolean, color:string, lineWidth?:number ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n    text( text:string, x:number, y:number, options?:{color?:string}) {\n     \t   // NOT YET IMPLEMENTED\n    };\n    \n\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    label( text:string, x:number, y:number, rotation:number ) {\n\t// NOT YET IMPLEMENTED\n    };\n\n\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear( color:string ) {\n\t// NOT YET IMPLEMENTED\n\n\t// if( typeof color == 'string' )\n\t    // color = Color.parse(color); // Color class does not yet exist in TS\n\t\n\t// Clear the canvas\n\tthis.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n\n\t// Enable the depth test\n\tthis.gl.enable(this.gl.DEPTH_TEST);\n\n\t// Clear the color and depth buffer\n\tthis.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n\n    \n}\n\n\n\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n\n    gl:WebGLRenderingContext;\n    \n    constructor( gl:WebGLRenderingContext ) {\n\tthis.gl = gl;\n    };\n\n    bufferData( verts:Float32Array ) : WebGLBuffer {\n\t// Create an empty buffer object\n\tvar vbuffer : WebGLBuffer = this.gl.createBuffer();\n\t// Bind appropriate array buffer to it\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n\t// Pass the vertex data to the buffer\n\tthis.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n\t// Unbind the buffer\n\tthis.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n\treturn vbuffer;\n    };\n    \n\n    /*=================== Shaders ====================*/\n    compileShader( shaderCode:string, shaderType:any ) : WebGLShader {\n\t// Create a vertex shader object\n\tvar shader : WebGLShader = this.gl.createShader(shaderType);\n\t// Attach vertex shader source code\n\tthis.gl.shaderSource(shader, shaderCode);\n\t// Compile the vertex shader\n\tthis.gl.compileShader(shader);\n\tconst vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n\tif (!vertStatus) {\n\t    console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader) );\t\n\t    this.gl.deleteShader(shader);\n\t    return null;\n\t}\n\treturn shader;\n    };\n\n\n    makeProgram( vertShader:WebGLShader, fragShader:WebGLShader ) : WebGLProgram {\n\t// Create a shader program object to store\n\t// the combined shader program\n\tvar program : WebGLProgram = this.gl.createProgram();\n\n\t// Attach a vertex shader\n\tthis.gl.attachShader(program, vertShader);\n\n\t// Attach a fragment shader\n\tthis.gl.attachShader(program, fragShader);\n\n\t// Link both the programs\n\tthis.gl.linkProgram(program);\n\n\t// Use the combined shader program object\n\tthis.gl.useProgram(program);\n\n\t/*======= Do some cleanup ======*/\n\tthis.gl.detachShader(program, vertShader);\n\tthis.gl.detachShader(program, fragShader);\n\tthis.gl.deleteShader(vertShader);\n\tthis.gl.deleteShader(fragShader);\n\n\treturn program;\n    };\n    \n}\n","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @version   2.5.1\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\n\n\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might \n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n * @requires geomutils\n *\n */\nexport class Triangle implements SVGSerializable {\n\n    /**\n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"Triangle\";\n\n    \n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof Triangle\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n    \n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    static readonly EPSILON:number = 1.0e-6;\n\n    /** \n     * @member {Vertex} \n     * @memberof Triangle\n     * @instance\n     */\n    a:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof Triangle\n     * @instance\n     */\n    b:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof Triangle\n     * @instance\n     */\n    c:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof Triangle\n     * @instance\n     * @private \n     */\n    private center:Vertex;\n\n    /** \n     * @member {number} \n     * @memberof Triangle\n     * @instance\n     * @private \n     */\n    private radius_squared:number;\n\n    /** \n     * @member {number} \n     * @memberof Triangle\n     * @instance\n     * @private \n     */\n    private radius:number;\n    \n\n    /**\n     * The constructor.\n     * \n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor( a:Vertex, b:Vertex, c:Vertex )\t{\n\tthis.uid = UIDGenerator.next();\n\tthis.a = a;\n\tthis.b = b;\n\tthis.c = c;\n\n\tthis.calcCircumcircle();\n\t\n    }\n\n\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray( arr:Array<Vertex> ) : Triangle {\n\tif( arr.length < 3 )\n\t    throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n\treturn new Triangle( arr[0], arr[1], arr[2] );\n    };\n    \n\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() : number {\n\treturn Math.abs(\n\t    Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y)\n\t);\n    };\n    \n    \n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() : Vertex {\n\treturn new Vertex( (this.a.x + this.b.x + this.c.x)/3,\n\t\t\t   (this.a.y + this.b.y + this.c.y)/3\n\t\t\t );\n    };\n\n\n\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid ( factor:number ) : Triangle {\n\tlet centroid : Vertex = this.getCentroid();\n\tthis.a.scale( factor, centroid );\n\tthis.b.scale( factor, centroid );\n\tthis.c.scale( factor, centroid );\n\treturn this;\n    };\n    \n    \n\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes \n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() : Circle {\n\t// if( !this.center || !this.radius ) \n\tthis.calcCircumcircle();\n\treturn new Circle( this.center.clone(), this.radius );\n    };\n\n\n\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent( tri:Triangle ) : boolean {\n\tvar a : boolean = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n\tvar b : boolean = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n\tvar c : boolean = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n\treturn (a&&b) || (a&&c) || (b&&c);\n    };\n\n\n    \n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of \n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex( vert1:Vertex, vert2:Vertex ) : Vertex {\n\tif( this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1) ) return this.c;\n\tif( this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1) ) return this.a;\n\t//if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n\treturn this.b;\n    };\n\n\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n\t// From\n\t//    http://www.exaflop.org/docs/cgafaq/cga1.html\n\n\tconst A : number = this.b.x - this.a.x; \n\tconst B : number = this.b.y - this.a.y; \n\tconst C : number = this.c.x - this.a.x; \n\tconst D : number = this.c.y - this.a.y; \n\n\tconst E : number = A*(this.a.x + this.b.x) + B*(this.a.y + this.b.y); \n\tconst F : number = C*(this.a.x + this.c.x) + D*(this.a.y + this.c.y); \n\n\tconst G : number = 2.0*(A*(this.c.y - this.b.y)-B*(this.c.x - this.b.x)); \n\t\n\tlet dx : number, dy : number;\n\t\n\tif( Math.abs(G) < Triangle.EPSILON ) {\n\t    // Collinear - find extremes and use the midpoint\n\t    const bounds : Bounds = this.bounds();\n\t    this.center = new Vertex( ( bounds.min.x + bounds.max.x ) / 2, ( bounds.min.y + bounds.max.y ) / 2 );\n\t    dx = this.center.x - bounds.min.x;\n\t    dy = this.center.y - bounds.min.y;\n\t} else {\n\t    const cx : number = (D*E - B*F) / G; \n\t    const cy : number = (A*F - C*E) / G;\n\t    this.center = new Vertex( cx, cy );\n\t    dx = this.center.x - this.a.x;\n\t    dy = this.center.y - this.a.y;\n\t}\n\n\tthis.radius_squared = dx * dx + dy * dy;\n\tthis.radius = Math.sqrt( this.radius_squared );\n    }; // END calcCircumcircle\n\n\n\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle( v:Vertex ) : boolean {\n\tconst dx : number = this.center.x - v.x;\n\tconst dy : number = this.center.y - v.y;\n\tconst dist_squared : number = dx * dx + dy * dy;\n\treturn ( dist_squared <= this.radius_squared );\t\n    }; \n\n\n\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() : Bounds {\n\treturn new Bounds( new Vertex( Triangle.utils.min3( this.a.x, this.b.x, this.c.x ),\n\t\t\t\t       Triangle.utils.min3( this.a.y, this.b.y, this.c.y ) ),\n\t\t\t   new Vertex( Triangle.utils.max3( this.a.x, this.b.x, this.c.x ),\n\t\t\t\t       Triangle.utils.max3( this.a.y, this.b.y, this.c.y ) )\n\t\t\t );\n    };\n\n\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() : Polygon {\n\treturn new Polygon( [ this.a, this.b, this.c ] );\n    };\n\n\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() : number {\n\t// (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n\treturn (this.b.y - this.a.y)*(this.c.x - this.b.x) - (this.c.y - this.b.y)*(this.b.x - this.a.x);\n    };\n\n    \n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint( p:Vertex ) : boolean {\n\treturn Triangle.utils.pointIsInTriangle( p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y );\n    };\n\n\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() : Triangle {\n\tconst lineA = new Line( this.a, this.b);\n\tconst lineB = new Line( this.b, this.c);\n\tconst lineC = new Line( this.c, this.a);\n\n\tconst bisector1 = geomutils.nsectAngle( this.b, this.a, this.c, 2 )[0]; // bisector of first angle (in b)\n\tconst bisector2 = geomutils.nsectAngle( this.c, this.b, this.a, 2 )[0]; // bisector of second angle (in c)\n\tconst intersection = bisector1.intersection( bisector2 );\n\n\t// Find the closest points on one of the polygon lines (all have same distance by construction)\n\tconst circleIntersA = lineA.getClosestPoint( intersection );\n\tconst circleIntersB = lineB.getClosestPoint( intersection );\n\tconst circleIntersC = lineC.getClosestPoint( intersection );\n\n\treturn new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n\n    \n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() : Circle {\n\treturn this.getIncircularTriangle().getCircumcircle();\n    };\n\n\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because \n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() : Vertex {\n\tif( !this.center || !this.radius ) \n\t    this.calcCircumcircle();\n\treturn this.center.clone();\n    };\n\n    \n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() : string {\n\treturn '{ a : ' + this.a.toString () + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n\n\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    toSVGString( options:{className?:string} ) : string {\n\toptions = options || {};\n\tvar buffer = [];\n\tbuffer.push( '<path' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tbuffer.push( ' d=\"' );\n\tvar vertices = [ this.a, this.b, this.c ];\n\tif( vertices.length > 0 ) {\n\t    buffer.push( 'M ' );\n\t    buffer.push( vertices[0].x )\n\t    buffer.push( ' ' );\n\t    buffer.push( vertices[0].y );\n\t    for( var i = 1; i < vertices.length; i++ ) {\n\t\tbuffer.push( ' L ' );\n\t\tbuffer.push( vertices[i].x )\n\t\tbuffer.push( ' ' );\n\t\tbuffer.push( vertices[i].y );\n\t    }\n\t    //if( !this.isOpen ) {\n\t\tbuffer.push( ' Z' );\n\t    //}\n\t}\n\tbuffer.push( '\" />' );\n\treturn buffer.join('');\n    };\n\n    private static utils = {\n\t// Used in the bounds() function.\n\tmax3( a:number, b:number, c:number ) : number {\n\t    return ( a >= b && a >= c ) ? a : ( b >= a && b >= c ) ? b : c;\n\t},\n\tmin3( a:number, b:number, c:number ) : number {\n\t    return ( a <= b && a <= c ) ? a : ( b <= a && b <= c ) ? b : c;\n\t},\n\tsignedArea( p0x:number, p0y:number, p1x:number, p1y:number, p2x:number, p2y:number ) : number {\n\t    return 0.5*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n\t},\n\t/**\n\t * Used by the containsPoint() function.\n\t *\n\t * @private\n\t **/\n\tpointIsInTriangle( px:number, py:number, p0x:number, p0y:number, p1x:number, p1y:number, p2x:number, p2y:number ) : boolean {\n\t    //\n\t    // Point-in-Triangle test found at\n\t    //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n\t    // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n\t    var area : number = Triangle.utils.signedArea( p0x, p0y, p1x, p1y, p2x, p2y );\n\t    \n\t    var s : number = 1/(2*area)*(p0y*p2x - p0x*p2y + (p2y - p0y)*px + (p0x - p2x)*py);\n\t    var t : number = 1/(2*area)*(p0x*p1y - p0y*p1x + (p0y - p1y)*px + (p1x - p0x)*py);\n\n\t    return s > 0 && t > 0 && (1-s-t) > 0;\n\t}\n    }; \n\n}\n","/**\n * @author  Ikaros Kappler\n * @date    2019-02-03\n * @version 1.0.0\n **/\n\n\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\nimport { Vertex } from \"./Vertex\";\n\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections, \n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle( pA:Vertex, pB:Vertex, pC:Vertex, n:number ) : Array<Line> {\n\tconst triangle : Triangle  = new Triangle( pA, pB, pC );\n\tconst lineAB : Line        = new Line( pA, pB );\n\tconst lineAC : Line        = new Line( pA, pC );\n\t// Compute the slope (theta) of line AB and line AC\n\tconst thetaAB : number     = lineAB.angle();\n\tconst thetaAC : number     = lineAC.angle();\n\t// Compute the difference; this is the angle between AB and AC\n\tvar insideAngle : number   = lineAB.angle( lineAC );\n\t// We want the inner angles of the triangle, not the outer angle;\n\t//   which one is which depends on the triangle 'direction'\n\tconst clockwise : boolean  = triangle.determinant() > 0;\n\t\n\t// For convenience convert the angle [-PI,PI] to [0,2*PI]\n\tif( insideAngle < 0 )\n\t    insideAngle = 2*Math.PI + insideAngle;\n\tif( !clockwise )\n\t    insideAngle = (2*Math.PI - insideAngle) * (-1);  \n\n\t// Scale the rotated lines to the max leg length (looks better)\n\tconst lineLength : number  = Math.max( lineAB.length(), lineAC.length() );\n\tconst scaleFactor : number = lineLength/lineAB.length();\n\n\tvar result : Array<Line> = [];\n\tfor( var i = 1; i < n; i++ ) {\n\t    // Compute the i-th inner sector line\n\t    result.push( new Line( pA, pB.clone().rotate((-i*(insideAngle/n)), pA) ).scale(scaleFactor) as Line ); \n\t}\n\treturn result; \n    }\n\n};\n","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant \n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n\n\nimport { Vertex } from \"./Vertex\";\n\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant \n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n\n    /** \n     * @member {Vertex} \n     * @memberof Grid\n     * @instance\n     */\n    center:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof Grid\n     * @instance\n     */\n    size:Vertex;\n\n    \n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor( center:Vertex, size:Vertex ) {\n\tthis.center = center;\n\tthis.size = size;\n    };\n\n\n    /**\n     * @memberof Grid\n     **/\n    static utils = {\n\n\t/**\n\t * Calculate the logarithm of the given number (num) to a given base.<br>\n\t * <br>\n\t * This function returns the number l with<br>\n\t *  <pre>num == Math.pow(base,l)</pre>\n\t *\n\t * @member baseLog\n\t * @function\n\t * @memberof Grid\n\t * @inner\n\t * @param {number} base - The base to calculate the logarithm to.\n\t * @param {number} num  - The number to calculate the logarithm for.\n\t * @return {number} <pre>log(base)/log(num)</pre>\n\t **/\n\tbaseLog : (base:number,num:number) : number => { return Math.log(base) / Math.log(num); },\n\n\n\t/**\n\t * Calculate the raster scale for a given logarithmic mapping.<br>\n\t * <br>\n\t * Example (with adjustFactor=2):<br>\n\t * <pre>\n\t * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n\t * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n\t * </pre>\n\t *\n\t * @member mapRasterScale\n\t * @function\n\t * @memberof Grid\n\t * @inner\n\t * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n\t * @param {number} scale        The currently used scale factor.\n\t * @return {number} \n\t **/\n\tmapRasterScale : ( adjustFactor:number, scale:number ) : number => {\n\t    var gf : number = 1.0;\n\t    if( scale >= 1 ) {\n\t\tgf = Math.abs( Math.floor( 1/Grid.utils.baseLog(adjustFactor,scale) ) );\n\t\tgf = 1 / Math.pow( adjustFactor, gf );\n\t    } else {\n\t\tgf = Math.abs( Math.floor( Grid.utils.baseLog(1/adjustFactor,1/(scale+1)) ) );\n\t\t//gf = Math.pow( adjustFactor, gf );\n\t    }\n\t    return gf;\n\t}\n    };\n}\n","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @version  1.0.4\n *\n * @file KeyHandler\n * @public\n **/\n\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n\n    private element           : HTMLElement | Window | (typeof globalThis);\n    private downListeners     : Array<any> = [];\n    private pressListeners    : Array<any> = [];\n    private upListeners       : Array<any> = [];\n    private keyStates         : Record<number,string|undefined> = {};\n\n    private trackAllKeys      : boolean;\n    // For later retrieval\n    private _keyDownListener  : (e:KeyboardEvent)=>void;\n    private _keyPressListener : (e:KeyboardEvent)=>void;\n    private _keyUpListener    : (e:KeyboardEvent)=>void;\n\n\n    /**\n     * The constructor.\n     *\n     * @constructor \n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    constructor( options:{element?:HTMLElement|Window|(typeof globalThis), trackAll?:boolean } ) {\n\toptions = options || {};\n\tthis.element = options.element ? options.element : globalThis;\n\tthis.downListeners = [];\n\tthis.pressListeners = [];\n\tthis.upListeners = [];\n\tthis.keyStates = [];\n\t// This could be made configurable in a later version. It allows to\n\t// keep track of the key status no matter if there are any listeners\n\t// on the key or not.\n\tthis.trackAllKeys = options.trackAll || false;\n\t// Install the listeners\n\tthis.installListeners();\n    };\n\n    \n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    private fireEvent( event : KeyboardEvent, listeners:Array<XKeyListener> ) : boolean {\n\tlet hasListener : boolean = false;\n\tfor( var i in listeners ) {\n\t    var lis : XKeyListener = listeners[i];\n\t    if( lis.keyCode != event.keyCode )\n\t\tcontinue;\n\t    lis.listener(event);\n\t    hasListener = true;\n\t}\n\treturn hasListener;\n    };\n\n\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    private fireDownEvent(e:KeyboardEvent,handler:KeyHandler) : void {\n\tif( handler.fireEvent(e,handler.downListeners) || handler.trackAllKeys ) {\n\t    // Down event has listeners. Update key state.\n\t    handler.keyStates[e.keyCode] = 'down';\n\t}\n    };\n   \n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    private firePressEvent(e:KeyboardEvent, handler:KeyHandler) : void {\n\thandler.fireEvent(e,handler.pressListeners);\n    };\n\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    private fireUpEvent(e:KeyboardEvent, handler:KeyHandler) : void {\n\tif( handler.fireEvent(e,handler.upListeners) || handler.trackAllKeys ) {\n\t    // Up event has listeners. Clear key state.\n\t    delete handler.keyStates[e.keyCode];\n\t}\n    };\n\n\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code( key:number|string ) : number {\n\tif( typeof key == 'number' ) \n\t    return key;\n\tif( typeof key != 'string' )\n\t    throw \"Unknown key name or key type (should be a string or integer): \" + key;\n\tif( KeyHandler.KEY_CODES[key] )\n\t    return KeyHandler.KEY_CODES[key];\n\tthrow \"Unknown key (cannot resolve key code): \" + key;\n    };\n    \n\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    private static KEY_CODES: Record<string,number> = {\n\t'break'          : 3, // alternate: 19\n\t'backspace'      : 8,\n\t// 'delete'\t : 8, // alternate: 46\n\t'tab'\t         : 9,\n\t'clear'\t         : 12,\n\t'enter'\t         : 13,\n\t'shift'\t         : 16,\n\t'ctrl'\t         : 17,\n\t'alt'\t         : 18,\n\t'pause'          : 19,\n\t// 'break'\t         : 19,\n\t'capslock'\t : 20,\n\t'hangul'\t : 21,\n\t'hanja'\t         : 25,\n\t'escape'\t : 27,\n\t'conversion' \t : 28,\n\t'non-conversion' : 29,  // alternate: 235?\n\t'spacebar'\t : 32,\n\t'pageup'\t : 33,\n\t'pagedown'\t : 34,\n\t'end'\t         : 35,\n\t'home'\t         : 36, // alternate: 172?\n\t'leftarrow'\t : 37,\n\t'uparrow'\t : 38,\n\t'rightarrow'\t : 39,\n\t'downarrow'\t : 40,\n\t'select'\t : 41,\n\t'print'\t         : 42,\n\t'execute'\t : 43,\n\t'printscreen'\t : 44,\n\t'insert'\t : 45,\n\t'delete'\t : 46, // alternate: 8\n\t'help'\t         : 47,\n\t'0'              : 48,\n\t'1'              : 49,\n\t'2'              : 50,\n\t'3'              : 51,\n\t'4'              : 52,\n\t'5'              : 53,\n\t'6'              : 54,\n\t'7'              : 55,\n\t'8'              : 56,\n\t'9'              : 57,\n\t':'              : 58,\n\t'semicolon (firefox)' : 59,\n\t'equals'\t : 59,\n\t'<'\t         : 60,\n\t'equals (firefox)' : 61,\n\t'ß'\t         : 63,\n\t'@ (firefox)'\t : 64,\n\t'a'\t         : 65,\n\t'b'\t         : 66,\n\t'c'\t         : 67,\n\t'd'\t         : 68,\n\t'e'\t         : 69,\n\t'f'\t         : 70,\n\t'g'\t         : 71,\n\t'h'\t         : 72,\n\t'i'\t         : 73,\n\t'j'\t         : 74,\n\t'k'\t         : 75,\n\t'l'\t         : 76,\n\t'm'\t         : 77,\n\t'n'\t         : 78,\n\t'o'\t         : 79,\n\t'p'\t         : 80,\n\t'q'\t         : 81,\n\t'r'\t         : 82,\n\t's'\t         : 83,\n\t't'\t         : 84,\n\t'u'\t         : 85,\n\t'v'\t         : 86,\n\t'w'\t         : 87,\n\t'x'\t         : 88,\n\t'y'\t         : 89,\n\t'z'\t         : 90,\n\t'windows'        : 91,\n\t'leftcommand'\t : 91, // left ⌘\n\t'chromebooksearch' : 91,\n\t'rightwindowkey' : 92,\n\t'windowsmenu'\t : 93,\n\t'rightcommant'   : 93, // right ⌘\n\t'sleep'\t         : 95,\n\t'numpad0'\t : 96,\n\t'numpad1'\t : 97,\n\t'numpad2'\t : 98,\n\t'numpad3'\t : 99,\n\t'numpad4'\t : 100,\n\t'numpad5'\t : 101,\n\t'numpad6'\t : 102,\n\t'numpad7'\t : 103,\n\t'numpad8'\t : 104,\n\t'numpad9'\t : 105,\n\t'multiply'\t : 106,\n\t'add'\t         : 107,\n\t'numpadperiod'\t : 108, // firefox, 194 on chrome\n\t'subtract'\t : 109,\n\t'decimalpoint'\t : 110,\n\t'divide'\t : 111,\n\t'f1'\t         : 112,\n\t'f2'\t         : 113,\n\t'f3'\t         : 114,\n\t'f4'\t         : 115,\n\t'f5'\t         : 116,\n\t'f6'\t         : 117,\n\t'f7'\t         : 118,\n\t'f8'\t         : 119,\n\t'f9'\t         : 120,\n\t'f10'\t         : 121,\n\t'f11'\t         : 122,\n\t'f12'\t         : 123,\n\t'f13'\t         : 124,\n\t'f14'\t         : 125,\n\t'f15'\t         : 126,\n\t'f16'\t         : 127,\n\t'f17'\t         : 128,\n\t'f18'\t         : 129,\n\t'f19'\t         : 130,\n\t'f20'\t         : 131,\n\t'f21'\t         : 132,\n\t'f22'\t         : 133,\n\t'f23'\t         : 134,\n\t'f24'\t         : 135,\n\t'numlock'\t : 144,\n\t'scrolllock'\t : 145,\n\t'^'\t         : 160,\n\t'!'\t         : 161,\n\t// '؛' \t : 162 // (arabic semicolon)\n\t'#'\t         : 163,\n\t'$'\t         : 164,\n\t'ù'\t         : 165,\n\t'pagebackward'\t : 166,\n\t'pageforward'\t : 167,\n\t'refresh'\t : 168,\n\t'closingparen'\t : 169, // (AZERTY)\n\t'*'         \t : 170,\n\t'~+*'\t         : 171,\n\t// 'home'\t         : 172,\n\t'minus'\t         : 173, // firefox\n\t// 'mute'           : 173,\n\t// 'unmute'\t : 173,\n\t'decreasevolumelevel' : 174,\n\t'increasevolumelevel' :\t175,\n\t'next'\t         : 176,\n\t'previous'\t : 177,\n\t'stop'\t         : 178,\n\t'play/pause'\t : 179,\n\t'email'\t         : 180,\n\t'mute'\t         : 181, // firefox, alternate: 173\n\t'unmute'         : 181, // alternate: 173?\n\t//'decreasevolumelevel'\t182 // firefox\n\t//'increasevolumelevel'\t183 // firefox\n\t'semicolon'      : 186,\n\t'ñ'   \t         : 186,\n\t'equal'\t         : 187,\n\t'comma'\t         : 188,\n\t'dash'\t         : 189,\n\t'period'\t : 190,\n\t'forwardslash'   : 191,\n\t'ç'\t         : 191, // 231 alternate?\n\t'grave accent'   : 192,\n\t//'ñ' 192,\n\t'æ'              : 192,\n\t'ö'\t         : 192,\n\t'?'              : 193,\n\t'/'              : 193,\n\t'°'\t         : 193,\n\t// 'numpadperiod'\t : 194, // chrome\n\t'openbracket'\t : 219,\n\t'backslash'\t : 220,\n\t'closebracket'   : 221,\n\t'å'   \t         : 221,\n\t'singlequote'    : 222,\n\t'ø'              : 222,\n\t'ä'\t         : 222,\n\t'`'\t         : 223,\n\t// 'left or right ⌘ key (firefox)'\t224\n\t'altgr'\t         : 225,\n\t// '< /git >, left back slash'\t226\n\t'GNOME Compose Key' : 230,\n\t'XF86Forward'\t : 233,\n\t'XF86Back'\t : 234,\n\t'alphanumeric'\t : 240,\n\t'hiragana'       : 242,\n\t'katakana'\t : 242,\n\t'half-width'     : 243,\n\t'full-width'\t : 243,\n\t'kanji'\t         : 244,\n\t'unlocktrackpad' : 251, // Chrome/Edge\n\t'toggletouchpad' : 255\n    };\n\n        \n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n\tvar _self = this;\n\tthis.element.addEventListener('keydown',this._keyDownListener=(e:KeyboardEvent) => { _self.fireDownEvent(e,_self); });\n\tthis.element.addEventListener('keypress',this._keyPressListener=(e:KeyboardEvent) => { _self.firePressEvent(e,_self); } );\n\tthis.element.addEventListener('keyup',this._keyUpListener=(e:KeyboardEvent) => { _self.fireUpEvent(e,_self); } );\n    };\n\n\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n\tthis.element.removeEventListener('keydown',this._keyDownListener);\n\tthis.element.removeEventListener('keypress',this._keyPressListener);\n\tthis.element.removeEventListener('keyup',this._keyUpListener);\n    };\n\n\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down( key:string|number, listener:XKeyCallback ) : KeyHandler {\n\tthis.downListeners.push( { key : key, keyCode : KeyHandler.key2code(key), listener : listener } as XKeyListener );\n\treturn this;\n    };\n\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press( key:string|number, listener:XKeyCallback ) : KeyHandler {\n\tthis.pressListeners.push( { key : key, keyCode : KeyHandler.key2code(key), listener : listener }  as XKeyListener);\n\treturn this;\n    };\n\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up( key:string, listener:XKeyCallback ) : KeyHandler {\n\tthis.upListeners.push( { key : key, keyCode : KeyHandler.key2code(key), listener : listener } as XKeyListener);\n\treturn this;\n    };\n\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown( key:string|number ) : boolean {\n\tif( typeof key == 'number' )\n\t    return this.keyStates[key] ? true : false;\n\telse\n\t    return this.keyStates[ KeyHandler.key2code(key) ] ? true : false;\n    }\n\n}\n\n\nexport interface XKeyListener {\n    key : string;\n    keyCode : number; \n    listener : (event:KeyboardEvent)=>void;\n}\n\nexport type XKeyCallback = (e:KeyboardEvent)=>void;\n","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even \n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @version  1.2.0\n *\n * @file MouseHandler\n * @public\n **/\n\n\nimport { XYCoords } from \"./interfaces\";\n\nexport interface XMouseParams {\n    button       : number;\n    element      : HTMLElement | SVGElement;\n    isTouchEvent : boolean;\n    name         : string;\n    pos          : {x:number,y:number};\n    leftButton   : boolean;\n    middleButton : boolean;\n    rightButton  : boolean;\n    mouseDownPos : {x:number,y:number}; \n    draggedFrom  : {x:number,y:number};\n    wasDragged   : boolean;\n    dragAmount   : {x:number,y:number};\n}\n\nexport class XMouseEvent extends MouseEvent {\n    params: XMouseParams;\n}\nexport class XWheelEvent extends WheelEvent {\n    params: XMouseParams;\n}\n\nexport type XMouseCallback = (e:XMouseEvent)=>void;\n\nexport type XWheelCallback = (e:XWheelEvent)=>void;\n\n\n\n/**\n * @classdesc A simple mouse handler for demos. \n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n\n    private name           : string;\n    private element        : HTMLElement | SVGElement;\n    private mouseDownPos   : { x:number, y:number }|undefined = undefined;\n    private mouseDragPos   : { x:number, y:number }|undefined = undefined;\n    private mousePos       : { x:number, y:number }|undefined = undefined;\n    private mouseButton    : number = -1;\n    private listeners      : Record<string,XMouseCallback> = {};\n    private installed      : Record<string,boolean> = {};\n    private handlers       : Record<string,XMouseCallback> = {};\n    \n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * ===== \n     * @example \n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     * \n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor( element:HTMLElement | SVGElement, name?:string ) {\n\t// +----------------------------------------------------------------------\n\t// | Some private vars to store the current mouse/position/button state.\n\t// +-------------------------------------------------\n\tthis.name         = name;\n\tthis.element      = element;\n\tthis.mouseDownPos = null;\n\tthis.mouseDragPos = null;\n\tthis.mousePos     = null;\n\tthis.mouseButton  = -1;\n\tthis.listeners    = {};\n\tthis.installed    = {};\n\tthis.handlers     = {};\n\n\t// +----------------------------------------------------------------------\n\t// | Define the internal event handlers.\n\t// |\n\t// | They will dispatch the modified event (relative mouse position,\n\t// | drag offset, ...) to the callbacks.\n\t// +-------------------------------------------------\n\tconst _self : MouseHandler = this;\n\tthis.handlers['mousemove'] = (e:MouseEvent) => {\n\t    if( _self.listeners.mousemove ) _self.listeners.mousemove( _self.mkParams(e,'mousemove') );\n\t    if( _self.mouseDragPos && _self.listeners.drag ) _self.listeners.drag( _self.mkParams(e,'drag') );\n\t    if( _self.mouseDownPos ) _self.mouseDragPos = _self.relPos(e);\n\t}\n\tthis.handlers['mouseup'] = (e:MouseEvent) => {\n\t    if( _self.listeners.mouseup ) _self.listeners.mouseup( _self.mkParams(e,'mouseup') );\n\t    _self.mouseDragPos = undefined;\n\t    _self.mouseDownPos = undefined;\n\t    _self.mouseButton  = -1;\n\t}\n\tthis.handlers['mousedown'] = (e:MouseEvent) => {\n\t    _self.mouseDragPos = _self.relPos(e);\n\t    _self.mouseDownPos = _self.relPos(e);\n\t    _self.mouseButton = e.button;\n\t    if( _self.listeners.mousedown ) _self.listeners.mousedown( _self.mkParams(e,'mousedown') );\n\t}\n\tthis.handlers['click'] = (e:MouseEvent) => {\n\t    if( _self.listeners.click ) _self.listeners.click( _self.mkParams(e,'click') );\n\t}\n\tthis.handlers['wheel'] = (e:MouseEvent) => {\n\t    if( _self.listeners.wheel ) _self.listeners.wheel( _self.mkParams(e,'wheel') );\n\t}\n\n\tthis.element.addEventListener('mousemove',this.handlers['mousemove']);\n\tthis.element.addEventListener('mouseup',this.handlers['mouseup']);\n\tthis.element.addEventListener('mousedown',this.handlers['mousedown']);\n\tthis.element.addEventListener('click',this.handlers['click']);\n\tthis.element.addEventListener('wheel',this.handlers['wheel']);\n    }\n\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    private relPos(e:MouseEvent) : XYCoords {\n\treturn { x : e.offsetX,\n\t\t y : e.offsetY\n\t       };\n    };\n\n\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent} \n     */\n    private mkParams( e:MouseEvent, eventName:string ) : XMouseEvent {\n\tconst rel : {x:number,y:number} = this.relPos(e);\n\tconst xEvent : XMouseEvent = ((e as unknown) as XMouseEvent);\n\txEvent.params = {\n\t    element : this.element,\n\t    name : eventName,\n\t    isTouchEvent : false,\n\t    pos : rel,\n\t    button : this.mouseButton,\n\t    leftButton : this.mouseButton==0,\n\t    middleButton : this.mouseButton==1,\n\t    rightButton : this.mouseButton==2,\n\t    mouseDownPos : this.mouseDownPos,\n\t    draggedFrom : this.mouseDragPos,\n\t    wasDragged : (this.mouseDownPos!=null&&(this.mouseDownPos.x!=rel.x||this.mouseDownPos.y!=rel.y)),\n\t    dragAmount : (this.mouseDownPos!=null?{x:rel.x-this.mouseDragPos.x,y:rel.y-this.mouseDragPos.y}:{x:0,y:0})\n\t};\n\treturn xEvent;\n    }\n\n\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void} \n     */\n    private listenFor( eventName:string ) {\n\tif( this.installed[eventName] ) return;\n\t// In the new version 1.1.0 has all internal listeners installed by default.\n\tthis.installed[eventName] = true;\n    }\n\n\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void} \n     */\n    private unlistenFor( eventName:string ) {\n\tif( !this.installed[eventName] ) return;\n\t// In the new version 1.1.0 has all internal listeners installed by default.\n\tdelete this.installed[eventName];\n    }\n\n\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     * \n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this \n     */\n    drag( callback:XMouseCallback ) : MouseHandler {\n\tif( this.listeners.drag ) this.throwAlreadyInstalled('drag');\n\tthis.listeners.drag = callback;\n\tthis.listenFor('mousedown');\n\tthis.listenFor('mousemove');\n\tthis.listenFor('mouseup');\n\treturn this;\n    };\n\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     * \n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this \n     */\n    move( callback:(e:XMouseEvent)=>void ) : MouseHandler {\n\tif( this.listeners.mousemove ) this.throwAlreadyInstalled('mousemove');\n\tthis.listenFor('mousemove');\n\tthis.listeners.mousemove = callback;\n\treturn this;\n    };\n\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     * \n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this \n     */\n    up( callback:(e:XMouseEvent)=>void ) : MouseHandler {\n\tif( this.listeners.mouseup ) this.throwAlreadyInstalled('mouseup'); \n\tthis.listenFor('mouseup');\n\tthis.listeners.mouseup = callback;\n\treturn this;\n    };\n\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     * \n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this \n     */\n    down( callback:(e:XMouseEvent)=>void ) : MouseHandler {\n\tif( this.listeners.mousedown ) this.throwAlreadyInstalled('mousedown'); \n\tthis.listenFor('mousedown');\n\tthis.listeners.mousedown = callback;\n\treturn this;\n    };\n\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     * \n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this \n     */\n    click( callback:(e:XMouseEvent)=>void ) : MouseHandler {\n\tif( this.listeners.click ) this.throwAlreadyInstalled('click'); \n\tthis.listenFor('click');\n\tthis.listeners.click = callback;\n\treturn this;\n    };\n\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     * \n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this \n     */\n    wheel( callback:(e:XWheelEvent)=>void ) : MouseHandler {\n\tif( this.listeners.wheel ) this.throwAlreadyInstalled('wheel');\n\tthis.listenFor('wheel');\n\tthis.listeners.wheel = callback;\n\treturn this;\n    };\n\n\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    private throwAlreadyInstalled( name:string ) {\n\tthrow `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    };\n\n\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n\tthis.unlistenFor('mousedown');\n\tthis.unlistenFor('mousemove');\n\tthis.unlistenFor('moseup');\n\tthis.unlistenFor('click');\n\tthis.unlistenFor('wheel');\n\n\tthis.element.removeEventListener('mousemove',this.handlers['mousemove']);\n\tthis.element.removeEventListener('mouseup',this.handlers['mousedown']);\n\tthis.element.removeEventListener('mousedown',this.handlers['mousedown']);\n\tthis.element.removeEventListener('click',this.handlers['click']);\n\tthis.element.removeEventListener('wheel',this.handlers['wheel']);\n    }\n}\n","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with \n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\n\n\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage implements SVGSerializable {\n\n\n    /**\n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"PBImage\";\n\n\n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof PBImage\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n\n    /** \n     * @member {Vertex} \n     * @memberof PBImage\n     * @instance\n     */\n    image:HTMLImageElement;\n\n    /** \n     * @member {Vertex} \n     * @memberof PBImage\n     * @instance\n     */\n    upperLeft:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof PBImage\n     * @instance\n     */\n    lowerRight:Vertex;\n    \n    \n    /**\n     * The constructor.\n     * \n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor( image:HTMLImageElement, upperLeft:Vertex, lowerRight:Vertex ) {\n\tthis.uid = UIDGenerator.next();\n\tthis.image = image;\n\tthis.upperLeft = upperLeft;\n\tthis.lowerRight = lowerRight;\n    };\n\n    \n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    toSVGString( options:{ className?:string } ) : string {\n\tconsole.warn( \"PBImage is not yet SVG serializable. Returning empty SVG string.\" );\n\treturn \"\";\n    };\n}\n","/**\n * Draws elements into an SVG node.\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @version  1.0.0\n **/\n\n\nimport { Bounds } from \"../../Bounds\";\nimport { CircleSector } from \"../../CircleSector\";\nimport { CubicBezierCurve } from \"../../CubicBezierCurve\";\nimport { Polygon } from \"../../Polygon\";\nimport { Vertex } from \"../../Vertex\";\nimport { DrawConfig, DrawLib, DrawSettings, XYCoords, XYDimension, SVGPathParams, SVGSerializable, UID } from \"../../interfaces\";\n\n\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg implements DrawLib<void|SVGElement> {\n\n    static HEAD_XML = [\n\t'<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n\t'<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n        '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n\t'' ].join(\"\\n\");\n    \n    /**\n     * @member {SVGElement}\n     * @memberof drawutilssvg\n     * @instance\n     */\n    svgNode : SVGElement;\n\n    /**\n     * The root elements container <g> in the svgNode.\n     */\n    private gNode : SVGElement;\n\n    /**\n     * @member {Vertex}\n     * @memberof drawutilssvg\n     * @instance\n     */\n    scale:Vertex;\n\n    /**\n     * @member {Vertex}\n     * @memberof drawutilssvg\n     * @instance\n     */\n    offset:Vertex;\n\n    /**\n     * @member {boolean}\n     * @memberof drawutilssvg\n     * @instance\n     */\n    fillShapes:boolean;\n\n    /**\n     * @member {XYDimension}\n     * @memberof drawutilssvg\n     * @instance\n     */\n    canvasSize:XYDimension;\n\n    /**\n     * The current drawable-ID. This can be any unique ID identifying the following drawn element.\n     *\n     * @member {UID|undefined}\n     * @memberof drawutilssvg\n     * @instance\n     */  \n    private curId : UID | undefined;\n\n    /**\n     * The current drawable-classname.\n     */\n    private curClassName : string | undefined;\n    \n    /**\n     * The SVG element cache. On clear() all elements are kept for possible re-use on next draw cycle.\n     */\n    private cache : Map<UID,SVGElement>;\n\n    /**\n     * Indicates if this library is the primary or seconday instance (draw an fill share the same DOM nodes).\n     */\n    private isSecondary : boolean;\n\n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor( svgNode:SVGElement,\n\t\t offset:XYCoords,\n\t\t scale:XYCoords,\n\t\t canvasSize:XYDimension,\n\t\t fillShapes:boolean,\n\t\t drawConfig:DrawConfig,\n\t\t isSecondary?:boolean,\n\t\t gNode?:SVGElement,\n\t       ) {\n\tthis.svgNode = svgNode;\n\tthis.offset = new Vertex( 0, 0 ).set(offset);\n\tthis.scale = new Vertex( 1, 1 ).set(scale);\n\tthis.fillShapes = fillShapes;\n\tthis.isSecondary = isSecondary;\n\t\n\tthis.cache = new Map<UID,SVGElement>();\n\tthis.setSize( canvasSize );\n\tif( isSecondary ) {\n\t    this.gNode = gNode;\n\t} else {\n\t    this.addStyleDefs( drawConfig );\n\t    this.gNode = this.createSVGNode('g');\n\t    this.svgNode.appendChild( this.gNode );\n\t} \n    };\n\n    private addStyleDefs( drawConfig:DrawConfig ) {\n\tconst nodeStyle : SVGElement = this.createSVGNode('style');\n\tthis.svgNode.appendChild(nodeStyle); // nodeDef);\n\n\t// Which default styles to add? -> All from the DrawConfig.\n\t// Compare with DrawConfig interface\n\tconst keys = {\n\t    'polygon' : 'Polygon',\n\t    'triangle' : 'Triangle',\n\t    'ellipse' : 'Ellipse',\n\t    'circle' : 'Circle',\n\t    'circleSector' : 'CircleSector',\n\t    'vertex' : 'Vertex',\n\t    'line' : 'Line',\n\t    'vector' : 'Vector',\n\t    'image' : 'Image'\n\t};\n\t// Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n\tconst rules = [];\n\tfor( var k in keys ) {\n\t    const className : string = keys[k];\n\t    const drawSettings : DrawSettings = drawConfig[k];\n\t    rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n\t}\n\tnodeStyle.innerHTML = rules.join(\"\\n\");\n    };\n\n\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    private findElement( key:UID, nodeName:string ) : SVGElement | undefined {\n\tvar node : SVGElement = this.cache.get(key);\n\tif( node && node.nodeName.toUpperCase() === nodeName.toUpperCase() ) {\n\t    this.cache.delete(key);\n\t    return node;\n\t}\n\treturn null;\n    }\n\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace. \n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    private createSVGNode( nodeName:string ) : SVGElement {\n\treturn document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    };\n    \n    \n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    private makeNode( nodeName:string ) : SVGElement {\n\t// Try to find node in current DOM cache.\n\t// Unique node keys are strictly necessary.\n\n\t// Try to recycle an old element from cache.\n\tvar node : SVGElement | undefined = this.findElement(this.curId, nodeName);\n\tif( !node ) {\n\t    // If no such old elements exists (key not found, tag name not matching),\n\t    // then create a new one.\n\t    node = this.createSVGNode(nodeName);\n\t}\n\treturn node;\n    };\n\n        \n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    private _bindFillDraw( node:SVGElement, className:string, color:string, lineWidth?:number ) : SVGElement {\n\tif( this.curClassName ) {\n\t    node.setAttribute('class', `${this.curClassName} ${className}`);\n\t} else {\n\t    node.setAttribute('class', className );\n\t}\n\tnode.setAttribute('fill', this.fillShapes ? color : 'none' ); \n\tnode.setAttribute('stroke', this.fillShapes ? 'none' : color );\n\tnode.setAttribute('stroke-width', `${lineWidth || 1}`);\n\tif( this.curId ) {\n\t    node.setAttribute('id',  `${this.curId}`); // Maybe React-style 'key' would be better?\n\t}\n\tif( !node.parentNode ) {\n\t    // Attach to DOM only if not already attached\n\t    this.gNode.appendChild( node );\n\t}\n\treturn node;\n    };\n    \n\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize( canvasSize:XYDimension ) {\n\tthis.canvasSize = canvasSize;\n\tthis.svgNode.setAttribute('viewBox', `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n\tthis.svgNode.setAttribute('width', `${this.canvasSize.width}` );\n\tthis.svgNode.setAttribute('height', `${this.canvasSize.height}` );\n    };\n    \n\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance( fillShapes:boolean ) : drawutilssvg {\n\tvar copy : drawutilssvg = new drawutilssvg(\n\t    this.svgNode,\n\t    this.offset,\n\t    this.scale,\n\t    this.canvasSize,\n\t    fillShapes,\n\t    null, // no DrawConfig\n\t    true, // isSecondary\n\t    this.gNode\n\t);\n\treturn copy;\n    };\n\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     * \n     * @name setCurrentId\n     * @method \n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId( uid : UID|undefined ) : void {\n\tthis.curId = uid;\n    };\n\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     * \n     * @name setCurrentClassName\n     * @method \n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName( className : string|undefined ) : void {\n\tthis.curClassName = className;\n    };\n\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle( renderTime:number ) {\n\t// Clear non-recycable elements from last draw cycle.\n\tthis.cache.clear();\n    };\n\n    private _x(x:number) : number { return this.offset.x + this.scale.x * x; }\n    private _y(y:number) : number { return this.offset.y + this.scale.y * y; }\n\n    \n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line( zA:Vertex, zB:Vertex, color:string, lineWidth?:number ) : SVGElement {\n\tconst line : SVGElement = this.makeNode('line');\n\tline.setAttribute('x1', `${this._x(zA.x)}` );\n\tline.setAttribute('y1', `${this._y(zA.y)}` );\n\tline.setAttribute('x2', `${this._x(zB.x)}` );\n\tline.setAttribute('y2', `${this._y(zB.y)}` );\n\n\treturn this._bindFillDraw( line, 'line', color, lineWidth || 1 );\n    };\n\n\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow( zA:Vertex, zB:Vertex, color:string, lineWidth?:number ) : SVGElement {\n\tconst node : SVGElement = this.makeNode('path');\n\tvar headlen:number = 8;   // length of head in pixels\n\tvar vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n\tconst d : Array<string|number> = [\n\t    'M', this._x(zA.x), this._y(zA.y)\n\t];\n\tfor( var i = 0; i <= vertices.length; i++ ) {\n\t    d.push( 'L' );\n\t    // Note: only use offset here (the vertices are already scaled)\n\t    d.push( this.offset.x + vertices[i%vertices.length].x );\n\t    d.push( this.offset.y + vertices[i%vertices.length].y );\n\t}\t\n\tnode.setAttribute( 'd', d.join(' ') );\n\treturn this._bindFillDraw( node, 'arrow', color, lineWidth || 1 );\n    };\n\n\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image( image:HTMLImageElement, position:Vertex, size:Vertex ) {\n\tconst node : SVGElement = this.makeNode('image');\n\n\t// We need to re-adjust the image if it was not yet fully loaded before.\n\tconst setImageSize = (image) => {\n\t    if( image.naturalWidth ) {\n\t\tconst ratioX = size.x/image.naturalWidth;\n\t\tconst ratioY = size.y/image.naturalHeight;\n\t\tnode.setAttribute('width', `${image.naturalWidth*this.scale.x}`);\n\t\tnode.setAttribute('height', `${image.naturalHeight*this.scale.y}`);\n\t\tnode.setAttribute('display', null); // Dislay when loaded\n\t\tnode.setAttribute('transform', `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${(ratioX)} ${(ratioY)})` );\n\t    }\n\t    \n\t};\n\timage.addEventListener('load', (event) => { setImageSize(image); } );\n\t\t\n\t// Safari has a transform-origin bug.\n\t// Use x=0, y=0 and translate/scale instead (see above)\n\tnode.setAttribute('x', `${0}`);\n\tnode.setAttribute('y', `${0}`);\n\tnode.setAttribute('display', 'none'); // Hide before loaded\n\tsetImageSize( image );\n\tnode.setAttribute('href', image.src );\n\treturn this._bindFillDraw( node, 'image', null, null );\n    };\n\n\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier( startPoint:Vertex, endPoint:Vertex, startControlPoint:Vertex, endControlPoint:Vertex, color:string, lineWidth?:number ) : SVGElement {\n\tif( startPoint instanceof CubicBezierCurve ) {\n\t    return this.cubicBezier( startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth );\n\t}\n\tconst node : SVGElement = this.makeNode('path');\t\n\t// Draw curve\n\tconst d : Array<string|number> = [\n\t    'M', this._x(startPoint.x), this._y(startPoint.y),\n\t    'C', this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y)\n\t];\n\tnode.setAttribute( 'd', d.join(' ') );\n\treturn this._bindFillDraw( node, 'cubierBezier', color, lineWidth );\n    };\n\n\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre> \n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath( path:Array<Vertex>, color:string, lineWidth?:number ) : SVGElement {\n\t\n\tconst node: SVGElement = this.makeNode('path');\n\tif( !path || path.length == 0 )\n\t    return node;\n\t\n\t// Draw curve\n\tconst d : Array<string|number> = [\n\t    'M', this._x(path[0].x), this._y(path[0].y)\t    \n\t];\n\t\n\t// Draw curve path\n\tvar \n\tstartPoint:Vertex,\n\tendPoint:Vertex,\n\tstartControlPoint:Vertex,\n\tendControlPoint:Vertex;\n\tfor( var i = 1; i < path.length; i+=3 ) {\n\t    startControlPoint = path[i];\n\t    endControlPoint = path[i+1];\n\t    endPoint = path[i+2];\n\t    d.push( 'C', this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y) );\n\t    \n\t}\t\n\tnode.setAttribute( 'd', d.join(' ') );\n\treturn this._bindFillDraw( node, 'cubicBezierPath', color, lineWidth || 1 );\n    };\n\n\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle( startPoint:Vertex, endPoint:Vertex ) : void {\n\t// TODO: redefine methods like these into an abstract class?\n\tthis.point( startPoint, 'rgb(0,32,192)' );\n\tthis.square( endPoint, 5, 'rgba(0,128,192,0.5)' );\n    };\n\n    \n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine( startPoint:Vertex, endPoint:Vertex ): void  {\n\tthis.line( startPoint, endPoint, 'rgb(192,192,192)' );\t\n    };\n\n\n    \n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot( p:Vertex, color:string ) {\n\tconst node : SVGElement = this.makeNode('line');\t\n\tconst d : Array<string|number> = [\n\t    'M', this._x(p.x), this._y(p.y),\n\t    'L', this._x(p.x+1), this._y(p.y+1)\n\t];\n\treturn this._bindFillDraw( node, 'dot', color, 1 );\n    };\n\n    \n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point( p:Vertex, color:string ) {\n\tvar radius:number = 3;\n\tconst node : SVGElement = this.makeNode('circle');\t\n\tnode.setAttribute('cx', `${this._x(p.x)}` );\n\tnode.setAttribute('cy', `${this._y(p.y)}` );\n\tnode.setAttribute('r', `${radius}` );\n\treturn this._bindFillDraw( node, 'point', color, 1 );\n    };\n\n\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle( center:Vertex, radius:number, color:string, lineWidth?:number ) {\n\tconst node : SVGElement = this.makeNode('circle');\t\n\tnode.setAttribute( 'cx', `${this._x(center.x)}` );\n\tnode.setAttribute( 'cy', `${this._y(center.y)}` );\n\tnode.setAttribute( 'r', `${radius * this.scale.x}` ); // y?\n\t\n\treturn this._bindFillDraw( node, 'circle', color, lineWidth || 1 );\n    };\n\n\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc( center:Vertex, radius:number, startAngle:number, endAngle:number, color:string, lineWidth?:number ) {\n\tconst node : SVGElement = this.makeNode('path');\t\n\tconst arcData : SVGPathParams =\n\t    CircleSector.circleSectorUtils.describeSVGArc(\n\t\tthis._x(center.x),\n\t\tthis._y(center.y),\n\t\tradius*this.scale.x, // y?\n\t\tstartAngle, endAngle\n\t    );\n\tnode.setAttribute('d', arcData.join(' ') );\n\treturn this._bindFillDraw( node, 'circleArc', color, lineWidth || 1 );\n    };\n\n\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse( center:Vertex, radiusX:number, radiusY:number, color:string, lineWidth?:number ) {\n\tconst node : SVGElement = this.makeNode('ellipse');\t\n\tnode.setAttribute( 'cx', `${this._x(center.x)}` );\n\tnode.setAttribute( 'cy', `${this._y(center.y)}` );\n\tnode.setAttribute( 'rx', `${radiusX * this.scale.x}` );\n\tnode.setAttribute( 'ry', `${radiusY * this.scale.y}` );\n\t\n\treturn this._bindFillDraw( node, 'ellipse', color, lineWidth || 1 );\n    };   \n\n\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square( center:Vertex, size:number, color:string, lineWidth?:number ) {\t\n\tconst node : SVGElement = this.makeNode('rectangle');\t\n\tnode.setAttribute( 'x', `${this._x(center.x-size/2.0)}` );\n\tnode.setAttribute( 'y', `${this._y(center.y-size/2.0)}` );\n\tnode.setAttribute( 'width', `${size * this.scale.x}` );\n\tnode.setAttribute( 'height', `${size * this.scale.y}` );\n\t\n\treturn this._bindFillDraw( node, 'square', color, lineWidth || 1 );\n    };\n\n\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid( center:Vertex, width:number, height:number, sizeX:number, sizeY:number, color:string ) {\n\tconst node : SVGElement = this.makeNode('path');\n\tconst d : SVGPathParams = [\n\t];\n\n\tvar yMin : number = -Math.ceil((height*0.5)/sizeY)*sizeY;\n\tvar yMax : number = height/2;\n\tfor( var x = -Math.ceil((width*0.5)/sizeX)*sizeX; x < width/2; x+=sizeX ) {\n\t    d.push( 'M', this._x(center.x+x), this._y(center.y+yMin) );\n\t    d.push( 'L', this._x(center.x+x), this._y(center.y+yMax) );\n\t}\n\n\tvar xMin : number = -Math.ceil((width*0.5)/sizeX)*sizeX;\n\tvar xMax : number = width/2;\n\tfor( var y = -Math.ceil((height*0.5)/sizeY)*sizeY; y < height/2; y+=sizeY ) {\n\t    d.push( 'M', this._x(center.x+xMin), this._y(center.y+y) );\n\t    d.push( 'L', this._x(center.x+xMax), this._y(center.y+y) );\n\t}\n\tnode.setAttribute( 'd', d.join(' ') );\n\treturn this._bindFillDraw( node, 'grid', color, 1 );\n    };\n\n\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster( center:Vertex, width:number, height:number, sizeX:number, sizeY:number, color:string ) {\t\n\tconst node : SVGElement = this.makeNode('path');\n\tconst d : SVGPathParams = [\n\t];\n\t\n\tvar cx : number = 0, cy : number = 0;\n\tfor( var x = -Math.ceil((width*0.5)/sizeX)*sizeX; x < width/2; x+=sizeX ) {\n\t    cx++;\n\t    for( var y = -Math.ceil((height*0.5)/sizeY)*sizeY; y < height/2; y+=sizeY ) {\n\t\tif( cx == 1 ) cy++;\n\t\t// Draw a crosshair\n\t\td.push( 'M', this._x(center.x+x)-4, this._y(center.y+y) );\n\t\td.push( 'L', this._x(center.x+x)+4, this._y(center.y+y) );\n\n\t\td.push( 'M', this._x(center.x+x), this._y(center.y+y)-4 );\n\t\td.push( 'L', this._x(center.x+x), this._y(center.y+y)+4 );\n\t    }\n\t}\n\tnode.setAttribute( 'd', d.join(' ') );\n\t\n\treturn this._bindFillDraw( node, 'raster', color, 1 );\n    };\n    \n\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle( center:Vertex, size:number, color:string ) {\n\tconst node : SVGElement = this.makeNode('path');\t\n\tconst d : SVGPathParams = [\n\t    'M', this._x(center.x) - size/2.0, this._y(center.y),\n\t    'L', this._x(center.x), this._y(center.y) - size/2.0,\n\t    'L', this._x(center.x) + size/2.0, this._y(center.y),\n\t    'L', this._x(center.x), this._y(center.y) + size/2.0,\n\t    'Z'\n\t];\t;\n\tnode.setAttribute('d', d.join(' '));\n\treturn this._bindFillDraw( node, 'diamondHandle', color, 1 );\n    };\n\n\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle( center:Vertex, size:number, color:string ) {\n\tconst node : SVGElement = this.makeNode('rect');\t\n\tnode.setAttribute('x', `${this._x(center.x)-size/2.0}`);\n\tnode.setAttribute('y', `${this._y(center.y)-size/2.0}`);\n\tnode.setAttribute('width', `${size}`);\n\tnode.setAttribute('height', `${size}`);\n\treturn this._bindFillDraw( node, 'squareHandle', color, 1 );\n    };\n\n\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle( center:Vertex, radius:number, color:string ) {\n\tradius = radius || 3;\n\t\n\tconst node : SVGElement = this.makeNode('circle');\t\n\tnode.setAttribute('cx', `${this._x(center.x)}`);\n\tnode.setAttribute('cy', `${this._y(center.y)}`);\n\tnode.setAttribute('r', `${radius}`);\n\treturn this._bindFillDraw( node, 'circleHandle', color, 1 );\n    };\n\n\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair( center:XYCoords, radius:number, color:string ) {\n\tconst node : SVGElement = this.makeNode('path');\n\tconst d : SVGPathParams = [\n\t    'M', this._x(center.x)-radius, this._y(center.y),\n\t    'L', this._x(center.x)+radius, this._y(center.y),\n\t    'M', this._x(center.x), this._y(center.y)-radius,\n\t    'L', this._x(center.x), this._y(center.y)+radius\n\t];\n\tnode.setAttribute('d', d.join(' ') );\n\treturn this._bindFillDraw( node, 'crosshair', color, 0.5 );\n    };\n\n\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon( polygon:Polygon, color:string, lineWidth?:number ) : SVGElement {\t\n\treturn this.polyline( polygon.vertices, polygon.isOpen, color, lineWidth );\n    };\n\n\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline( vertices:Array<Vertex>, isOpen:boolean, color:string, lineWidth?:number ) : SVGElement  {\n\tconst node : SVGElement = this.makeNode('path');\n\tif( vertices.length == 0 )\n\t    return node;\n\t// Draw curve\n\tconst d : Array<string|number> = [\n\t    'M', this._x(vertices[0].x), this._y(vertices[0].y)\n\t];\n\tvar n = vertices.length;\n\tfor( var i = 1; i < n; i++ ) {\n\t    d.push('L', this._x(vertices[i].x), this._y(vertices[i].y) );\n\t}\n\tif( !isOpen )\n\t    d.push('Z');\t\n\tnode.setAttribute( 'd', d.join(' ') );\n\treturn this._bindFillDraw( node, 'polyline', color, lineWidth || 1 );\n    };\n\n    \n    /**\n     * Draw a text label at the given relative position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    text( text:string, x:number, y:number, options?:{color?:string}) {\n\toptions = options || {};\n\tconst color:string = options.color || 'black';\n\t\n\tconst node : SVGElement = this.makeNode('text');\n\tnode.setAttribute('x', `${this._x(x)}`);\n\tnode.setAttribute('y', `${this._x(y)}`);\n\tnode.innerHTML = text;\n\treturn this._bindFillDraw( node, 'text', color, 1 );\n    };\n    \n\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label( text:string, x:number, y:number, rotation:number ) {\n\tconst node : SVGElement = this.makeNode('text');\n\t// For some strange reason SVG rotation transforms use degrees instead of radians\n\tnode.setAttribute('transform', `translate(${this.offset.x},${this.offset.y}), rotate(${rotation/Math.PI*180})` );\n\tnode.innerHTML = text;\n\treturn this._bindFillDraw( node, 'label', 'black', null );\n    };\n\n\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear( color:string ) : void {\n\t// If this isn't the primary handler then do not remove anything here.\n\t// The primary handler will do that (no double work).\n\tif( this.isSecondary ) {\n\t    return;\n\t}\n\t// Clearing an SVG is equivalent to removing all its child elements.\n\tfor( var i = 0; i < this.gNode.childNodes.length; i++ ) {\n\t    // Hide all nodes here. Don't throw them away.\n\t    // We can probably re-use them in the next draw cycle.\n\t    var child : SVGElement = (this.gNode.childNodes[i] as SVGElement);\n\t    this.cache.set( child.getAttribute('id'), child );\n\t}\n\tthis.removeAllChildNodes();\n\t\n\t// Add a covering rect with the given background color\n\tthis.curId = 'background';\n\tconst node : SVGElement = this.makeNode('rect');\n\t// For some strange reason SVG rotation transforms use degrees instead of radians\n\t// Note that the background does not scale with the zoom level (always covers full element)\n\tnode.setAttribute( 'x', '0' );\n\tnode.setAttribute( 'y', '0' );\n\tnode.setAttribute( 'width', `${this.canvasSize.width}` );\n\tnode.setAttribute( 'height', `${this.canvasSize.height}` );\n\n\t// Bind this special element into the document\n\tthis._bindFillDraw( node, this.curId, null, null );\n\tnode.setAttribute( 'fill', typeof color === \"undefined\" ? 'none' : color );\n\t// Clear the current ID again\n\tthis.curId = null;\n\n\t// return node;\n    };\n\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    private removeAllChildNodes() {\n\twhile( this.gNode.firstChild ) {\n\t    this.gNode.removeChild(this.gNode.lastChild);\n\t}\n    };\n\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() : SVGElement {\n\treturn document.createElementNS(\"http://www.w3.org/2000/svg\",\"svg\");\n    };\n    \n}\n","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version  1.1.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\n\n\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { XYCoords, SVGSerializable, UID } from \"./interfaces\";\n\n\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VEllipse implements SVGSerializable {\n\n\n    /**\n     * Required to generate proper CSS classes and other class related IDs.\n     **/\n    readonly className : string = \"VEllipse\";\n\n\n    /**\n     * The UID of this drawable object.\n     *\n     * @member {UID}\n     * @memberof VEllipse\n     * @instance\n     * @readonly \n     */\n    readonly uid : UID;\n    \n    \n    /** \n     * @member {Vertex} \n     * @memberof VEllipse\n     * @instance\n     */\n    center:Vertex;\n\n    /** \n     * @member {Vertex} \n     * @memberof VEllipse\n     * @instance\n     */\n    axis:Vertex;\n    \n    \n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    constructor( center:Vertex, axis:Vertex ) {\n\tthis.uid = UIDGenerator.next();\n\tthis.center = center;\n\tthis.axis = axis;\n    };\n\n\n\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    toSVGString( options:{className?:string } ) {\n\toptions = options || {};\n\tvar buffer : Array<string> = [];\n\tbuffer.push( '<ellipse' );\n\tif( options.className )\n\t    buffer.push( ' class=\"' + options.className + '\"' );\n\tbuffer.push( ' cx=\"' + this.center.x + '\"' );\n\tbuffer.push( ' cy=\"' + this.center.y + '\"' );\n\tbuffer.push( ' rx=\"' + this.axis.x + '\"' );\n\tbuffer.push( ' ry=\"' + this.axis.y + '\"' );\n\tbuffer.push( ' />' );\n\treturn buffer.join('');\n    };    \n}\n","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0). \n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @version  1.12.2\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\n\nimport { AlloyFinger } from \"alloyfinger\";\nimport { saveAs } from \"file-saver\";\nimport { GUI } from \"dat.gui\";\n\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./utils/helpers/drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler, XKeyListener } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler, XMouseEvent, XWheelEvent } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\nimport { VertEvent } from \"./VertexListeners\";\nimport { IBounds, IDraggable, Config, DrawLib, Drawable, DrawConfig, IHooks, PBParams, SVGSerializable, XYCoords, XYDimension } from \"./interfaces\";\n\n\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex \n * @requires Line\n * @requires Vector \n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    \n    /** @constant {number} */\n    static readonly DEFAULT_CANVAS_WIDTH : number    = 1024;\n    /** @constant {number} */\n    static readonly DEFAULT_CANVAS_HEIGHT : number   =  768;\n    /** @constant {number} */\n    static readonly DEFAULT_CLICK_TOLERANCE : number =    8;\n    /** @constant {number} */\n    static readonly DEFAULT_TOUCH_TOLERANCE : number =   32;\n\n\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    static Draggable = class {\n\tstatic VERTEX:string = 'vertex';\n\titem:any;\n\ttypeName:string;\n\tvindex:number;   // Vertex-index\n\tpindex:number;   // Point-index (on path)\n\tpid:number;      // Point-ID (on curve)\n\tcindex:number;   // Curve-index\n\tconstructor( item:any, typeName:string ) {\n\t    this.item = item;\n\t    this.typeName = typeName;\n\t};\n\tisVertex() { return this.typeName == PlotBoilerplate.Draggable.VERTEX; };\n\tsetVIndex(vindex:number):IDraggable { this.vindex = vindex; return this; };\n    }\n    \n    \n    /** \n     * @member {HTMLCanvasElement} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    canvas : HTMLCanvasElement | SVGElement;\n\n\n    /**\n     * The event catcher might be a different element positioned over the actual canvas.\n     *\n     * @member {HTMLElement}\n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    eventCatcher : HTMLElement;\n\n    /** \n     * @member {Config} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    config : Config;\n\n    /** \n     * @member {CanvasRenderingContext2D|WebGLRenderingContext} \n     * @memberof PlotBoilerplate\n     * @deprecated\n     * @instance\n     */\n    // @DEPRECATED Will be removed in version 2\n    ctx: CanvasRenderingContext2D | WebGLRenderingContext | undefined;\n\n    /** \n     * @member {drawutils|drawutilsgl|drawutilssvg} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    draw : DrawLib<void>;\n\n    /** \n     * @member {drawutils|drawutilsgl|drawutilssvg} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    fill : DrawLib<void>;\n\n    /** \n     * @member {DrawConfig} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    drawConfig:DrawConfig;\n\n    /** \n     * @member {Grid} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    grid:Grid;\n\n    /** \n     * @member {XYDimension} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    canvasSize : XYDimension;\n\n    /** \n     * @member {Array<Vertex>} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    vertices : Array<Vertex>;\n\n    /** \n     * @member {Array<BezierPath>} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    paths : Array<BezierPath>;\n\n    /** \n     * @member {Poylgon} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    selectPolygon : Polygon;\n\n    /** \n     * @member {Array<IDraggable>} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    draggedElements : Array<IDraggable>;\n\n    /** \n     * @member {Array<Drawable>} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    drawables : Array<Drawable>;\n\n    /** \n     * @member {Console} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    console : Console;\n\n    /** \n     * @member {IHooks} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    hooks : IHooks;\n\n    /** \n     * @member {KeyHandler|undefined} \n     * @memberof PlotBoilerplate\n     * @instance\n     */\n    private keyHandler : KeyHandler|undefined;\n\n    /** \n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on. \n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on. \n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true). \n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    constructor( config:PBParams ) {\n\t// This should be in some static block ...\n\tVertexAttr.model = { bezierAutoAdjust : false,\n\t\t\t     renderTime : 0,\n\t\t\t     selectable : true,\n\t\t\t     isSelected : false,\n\t\t\t     draggable : true,\n\t\t\t     visible : true\n\t\t\t   };\n\t\n\tif( typeof config.canvas == 'undefined' )\n\t    throw \"No canvas specified.\";\n\t\n\t/** \n\t * A global config that's attached to the dat.gui control interface.\n\t *\n\t * @member {Object} \n\t * @memberof PlotBoilerplate\n\t * @instance\n\t */\n\tconst f = PlotBoilerplate.utils.fetch;\n\tthis.config = {\n\t    canvas                : config.canvas,\n\t    fullSize              : f.val(config,'fullSize',true), \n\t    fitToParent           : f.bool(config,'fitToParent',true),\n\t    scaleX                : f.num(config,'scaleX',1.0), \n\t    scaleY                : f.num(config,'scaleY',1.0),\n\t    offsetX               : f.num(config,'offsetX',0.0), \n\t    offsetY               : f.num(config,'offsetY',0.0), \n\t    rasterGrid            : f.bool(config,'rasterGrid',true),\n\t    rasterScaleX          : f.num(config,'rasterScaleX',1.0),\n\t    rasterScaleY          : f.num(config,'rasterScaleY',1.0),\n\t    rasterAdjustFactor    : f.num(config,'rasterAdjustdFactror',2.0),\n\t    drawOrigin            : f.bool(config,'drawOrigin',false),\n\t    autoAdjustOffset      : f.val(config,'autoAdjustOffset',true),\n\t    offsetAdjustXPercent  : f.num(config,'offsetAdjustXPercent',50),\n\t    offsetAdjustYPercent  : f.num(config,'offsetAdjustYPercent',50),\n\t    backgroundColor       : config.backgroundColor || '#ffffff',\n\t    redrawOnResize        : f.bool(config,'redrawOnResize',true), \n\t    defaultCanvasWidth    : f.num(config,'defaultCanvasWidth',PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n\t    defaultCanvasHeight   : f.num(config,'defaultCanvasHeight',PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n\t    canvasWidthFactor     : f.num(config,'canvasWidthFactor',1.0),\n\t    canvasHeightFactor    : f.num(config,'canvasHeightFactor',1.0),\n\t    cssScaleX             : f.num(config,'cssScaleX',1.0),\n\t    cssScaleY             : f.num(config,'cssScaleY',1.0),\n\t    cssUniformScale       : f.bool(config,'cssUniformScale',true),\n\t    saveFile              : () => { _self.hooks.saveFile(_self); },\n\t    setToRetina           : () => { _self._setToRetina(); },\n\t    autoDetectRetina      : f.bool(config,'autoDetectRetina',true),\n\t    enableSVGExport       : f.bool(config,'enableSVGExport',true),\n\n\t    // Listeners/observers\n\t    preClear              : f.func(config,'preClear',null),\n\t    preDraw               : f.func(config,'preDraw',null),\n\t    postDraw              : f.func(config,'postDraw',null),\n\n\t    // Interaction\n\t    enableMouse           : f.bool(config,'enableMouse',true),\n\t    enableTouch           : f.bool(config,'enableTouch',true),\n\t    enableKeys            : f.bool(config,'enableKeys',true),\n\t    enableMouseWheel      : f.bool(config,'enableMouseWheel',true),\n\n\t    // Experimental (and unfinished)\n\t    enableGL              : f.bool(config,'enableGL',false)\n\t}; // END confog\n\n\n\t/** \n\t * Configuration for drawing things.\n\t *\n\t * @member {Object} \n\t * @memberof PlotBoilerplate\n\t * @instance\n\t */\n\tthis.drawConfig = {\n\t    drawVertices : true,\n\t    drawBezierHandleLines : f.bool(config,'drawBezierHandleLines',true),\n\t    drawBezierHandlePoints : f.bool(config,'drawBezierHandlePoints',true),\n\t    drawHandleLines  : f.bool(config,'drawHandleLines',true),\n\t    drawHandlePoints : f.bool(config,'drawHandlePoints',true),\n\t    drawGrid : f.bool(config,'drawGrid',true),\n\t    bezier : {\n\t\tcolor : '#00a822',\n\t\tlineWidth : 2,\n\t\thandleLine : {\n\t\t    color : 'rgba(180,180,180,0.5)',\n\t\t    lineWidth : 1\n\t\t}\n\t    },\n\t    polygon : {\n\t\tcolor : '#0022a8',\n\t\tlineWidth : 1\n\t    },\n\t    triangle : {\n\t\tcolor : '#6600ff',\n\t\tlineWidth : 1\n\t    },\n\t    ellipse : {\n\t\tcolor : '#2222a8',\n\t\tlineWidth : 1\n\t    },\n\t    circle : {\n\t    \tcolor : '#22a8a8',\n\t\tlineWidth : 2\n\t    },\n\t    circleSector : {\n\t    \tcolor : '#2280a8',\n\t\tlineWidth : 1\n\t    },\n\t    vertex : {\n\t\tcolor : '#a8a8a8',\n\t\tlineWidth : 1\n\t    },\n\t    selectedVertex : {\n\t\tcolor : '#c08000',\n\t\tlineWidth : 2\n\t    },\n\t    line : {\n\t\tcolor : '#a844a8',\n\t\tlineWidth : 1\n\t    },\n\t    vector : {\n\t\tcolor : '#ff44a8',\n\t\tlineWidth : 1\n\t    },\n\t    image : {\n\t\tcolor : '#a8a8a8',\n\t\tlineWidth : 1\n\t    }\n\t}; // END drawConfig\n\n\n\t// +---------------------------------------------------------------------------------\n\t// | Object members.\n\t// +-------------------------------\n\tthis.grid                = new Grid( new Vertex(0,0), new Vertex(50,50) );\n\tthis.canvasSize          = { width : PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height : PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n\tconst canvasElement : Element =\n\t    typeof config.canvas == 'string'\n\t    ? (document.querySelector(config.canvas) as Element)\n\t    : config.canvas;\n\t// Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n\tif( canvasElement.tagName.toLowerCase() === 'canvas' ) {\n\t    this.canvas = canvasElement as HTMLCanvasElement;\n\t    this.eventCatcher = this.canvas;\n\t    if( this.config.enableGL && typeof drawutilsgl === \"undefined\" ) {\n\t\tconsole.warn( `Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.` );\n\t\tconsole.warn( `Disabling GL and falling back to Canvas2D.` );\n\t\tthis.config.enableGL = false;\n\t    }\n\t    if( this.config.enableGL ) {\n\t\tconst ctx : WebGLRenderingContext = this.canvas.getContext( 'webgl' ); // webgl-experimental?\n\t\tthis.draw                = new drawutilsgl(ctx,false);\n\t\t// PROBLEM: same instance of fill and draw when using WebGL.\n\t\t//          Shader program cannot be duplicated on the same context.\n\t\tthis.fill                = (this.draw as drawutilsgl).copyInstance(true);\n\t\tconsole.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n\t    } else {\n\t\tconst ctx : CanvasRenderingContext2D = this.canvas.getContext( '2d' );\n\t\tthis.draw                = new drawutils(ctx,false);\n\t\tthis.fill                = new drawutils(ctx,true);\n\t    }\n\t} else if( canvasElement.tagName.toLowerCase() === 'svg' ) {\n\t    if( typeof drawutilssvg === \"undefined\" )\n\t\tthrow `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n\t    this.canvas = canvasElement as SVGElement;\n\t    this.draw = new drawutilssvg( this.canvas as SVGElement,\n\t\t\t\t\t  new Vertex(),    // offset\n\t\t\t\t\t  new Vertex(),    // scale\n\t\t\t\t\t  this.canvasSize,\n\t\t\t\t\t  false,           // fillShapes=false\n\t\t\t\t\t  this.drawConfig,\n\t\t\t\t\t  false             // isSecondary=false\n\t\t\t\t\t);\n\t    this.fill = (this.draw as drawutilssvg).copyInstance( true ); // fillShapes=true\n\t    \n\t    if( this.canvas.parentElement ) {\n\t\tthis.eventCatcher = document.createElement('div');\n\t\tthis.eventCatcher.style.position = 'absolute';\n\t\tthis.eventCatcher.style.left = '0';\n\t\tthis.eventCatcher.style.top = '0';\n\t\tthis.eventCatcher.style.cursor = 'pointer';\n\t\tthis.canvas.parentElement.style.position = 'relative';\n\t\tthis.canvas.parentElement.appendChild( this.eventCatcher );\n\t    } else {\n\t\tthis.eventCatcher = document.body;\n\t    }\n\t} else {\n\t    throw 'Element is neither a canvas nor an svg element.';\n\t}\n\tthis.draw.scale.set(this.config.scaleX,this.config.scaleY);\n\tthis.fill.scale.set(this.config.scaleX,this.config.scaleY);\n\tthis.vertices            = [];\n\tthis.selectPolygon       = null;\n\tthis.draggedElements     = [];\n\tthis.drawables           = [];\n\tthis.console             = console;\n\tthis.hooks               = {\n\t    // This is changable from the outside\n\t    saveFile : PlotBoilerplate._saveFile\n\t};\n\tvar _self = this;\n\n\tglobalThis.addEventListener( 'resize', () => _self.resizeCanvas() );\n\tthis.resizeCanvas();\n\tif( config.autoDetectRetina ) {\n\t    this._setToRetina();\n\t}\n\n\tthis.installInputListeners();\n\t // Apply the configured CSS scale.\n\tthis.updateCSSscale();\t\n\t// Init\t\n\tthis.redraw();\n\t// Gain focus\n\tthis.canvas.focus();\n    }; // END constructor\n    \n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    private static _saveFile( pb:PlotBoilerplate ) {\n\n\tif( typeof drawutilssvg === \"undefined\" ) {\n\t    console.error(`Cannot convert image to SVG. The svg renderer 'drawutilssvg' is missing. Did you load it?`);\n\t    return;\n\t}\n\n\t// Create fake SVG node\n\tconst svgNode : SVGElement = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n\t// var svgNode = document.getElementById('preview-svg');\n\t// Draw everything to fake node.\n\tvar tosvgDraw = new drawutilssvg( svgNode, pb.draw.offset, pb.draw.scale,\n\t\t\t\t\t  pb.canvasSize,\n\t\t\t\t\t  false, // fillShapes=false\n\t\t\t\t\t  pb.drawConfig\n\t\t\t\t\t);\n\tvar tosvgFill = tosvgDraw.copyInstance( true ); // fillShapes=true\n\n\ttosvgDraw.beginDrawCycle(0);\n\ttosvgFill.beginDrawCycle(0);\n\ttosvgDraw.clear( pb.config.backgroundColor );\n\tpb.drawAll( 0, tosvgDraw, tosvgFill );\n\t\n\t// Full support in all browsers \\o/\n\t//    https://caniuse.com/xml-serializer\n\tvar serializer = new XMLSerializer();\n\tvar svgCode = serializer.serializeToString(svgNode);\n\n\tvar blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" } );\n\t// See documentation for FileSaver.js for usage.\n\t//    https://github.com/eligrey/FileSaver.js\n\tif( typeof globalThis[\"saveAs\"] != \"function\" )\n\t    throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n\tvar _saveAs = globalThis[\"saveAs\"];\n\t_saveAs(blob, \"plotboilerplate.svg\");  \n    };\n\n\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    private _setToRetina() : void {\n\tthis.config.autoDetectRetina = true;\n\tconst pixelRatio : number = globalThis.devicePixelRatio || 1;\n\tthis.config.cssScaleX = this.config.cssScaleY = 1.0/pixelRatio; // 0.5;\n\tthis.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n\tthis.resizeCanvas();\n\tthis.updateCSSscale();\n    };\n\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView( bounds:Bounds ) : void {\n\tconst canvasCenter:Vertex = new Vertex( this.canvasSize.width/2.0, this.canvasSize.height/2.0 );\n\tconst canvasRatio:number = this.canvasSize.width / this.canvasSize.height;\n\tconst ratio:number = bounds.width / bounds.height;\n\n\t// Find the new draw offset\n\tconst center:Vertex =\n\t    new Vertex( bounds.max.x - bounds.width/2.0, bounds.max.y - bounds.height/2.0 )\n\t\t.inv()\n\t\t.addXY( this.canvasSize.width/2.0, this.canvasSize.height/2.0 );\n\tthis.setOffset( center );\n\t\n\tif( canvasRatio < ratio ) {\n\t    const newUniformZoom:number = this.canvasSize.width/bounds.width;\n\t    this.setZoom( newUniformZoom, newUniformZoom, canvasCenter );\n\t} else {\n\t    const newUniformZoom:number = this.canvasSize.height/bounds.height;\n\t    this.setZoom( newUniformZoom, newUniformZoom, canvasCenter );\n\t}\n\n\tthis.redraw();\n    };\n\n    \n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole( con:Console ) : void {\n\tthis.console = con;\n    };\n\n    \n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    private updateCSSscale() {\n\tif( this.config.cssUniformScale ) {\n\t    PlotBoilerplate.utils.setCSSscale( this.canvas, this.config.cssScaleX, this.config.cssScaleX );\n\t} else {\n\t    PlotBoilerplate.utils.setCSSscale( this.canvas, this.config.cssScaleX, this.config.cssScaleY );\n\t}\n    };\n    \n\n\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add( drawable:Drawable|Array<Drawable>,\n\t redraw?:boolean\n       ) {\n\tif( Array.isArray(drawable) ) {\n\t    const arr : Array<Drawable> = (drawable as Array<Drawable>);\n\t    // for( var i in arr )\n\t    for( var i = 0; i < arr.length; i++ ) {\n\t\tthis.add( arr[i], false );\n\t    }\n\t} else if( drawable instanceof Vertex ) {\n\t    this.drawables.push( drawable );\n\t    this.vertices.push( drawable );\n\t} else if( drawable instanceof Line ) {\n\t    // Add some lines\n\t    this.drawables.push( drawable );\n\t    this.vertices.push( drawable.a );\n\t    this.vertices.push( drawable.b );\n\t} else if( drawable instanceof Vector ) {\n\t    this.drawables.push( drawable );\n\t    this.vertices.push( drawable.a );\n\t    this.vertices.push( drawable.b );\n\t} else if( drawable instanceof VEllipse ) {\n\t    this.vertices.push( drawable.center );\n\t    this.vertices.push( drawable.axis );\n\t    this.drawables.push( drawable );\n\t    drawable.center.listeners.addDragListener( function(e) {\n\t\tdrawable.axis.add( e.params.dragAmount );\n\t    } );\n\t} else if( drawable instanceof Circle ) {\n\t    this.vertices.push( drawable.center );\n\t    this.drawables.push( drawable );\n\t} else if( drawable instanceof CircleSector ) {\n\t    this.vertices.push( drawable.circle.center );\n\t    this.drawables.push( drawable );\n\t} else if( drawable instanceof Polygon ) {\n\t    this.drawables.push( drawable );\n\t    // for( var i in drawable.vertices )\n\t    for( var i = 0; i < drawable.vertices.length; i++ )\n\t\tthis.vertices.push( drawable.vertices[i] );\n\t} else if( drawable instanceof Triangle ) {\n\t    this.drawables.push( drawable );\n\t    this.vertices.push( drawable.a );\n\t    this.vertices.push( drawable.b );\n\t    this.vertices.push( drawable.c );\n\t} else if( drawable instanceof BezierPath ) {\n\t    this.drawables.push( drawable );\n\t    const bezierPath:BezierPath = (drawable as BezierPath);\n\t    for( var i = 0; i < bezierPath.bezierCurves.length; i++ ) {\n\t\tif( !drawable.adjustCircular && i == 0 )\n\t\t    this.vertices.push( bezierPath.bezierCurves[i].startPoint );\n\t\tthis.vertices.push( bezierPath.bezierCurves[i].endPoint );\n\t\tthis.vertices.push( bezierPath.bezierCurves[i].startControlPoint );\n\t\tthis.vertices.push( bezierPath.bezierCurves[i].endControlPoint );\n\t\tbezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n\t\tbezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n\t    }\n\t    PlotBoilerplate.utils.enableBezierPathAutoAdjust( drawable );\n\t} else if( drawable instanceof PBImage ) {\n\t    this.vertices.push( drawable.upperLeft );\n\t    this.vertices.push( drawable.lowerRight );\n\t    this.drawables.push( drawable );\n\t    // Todo: think about a IDragEvent interface\n\t    drawable.upperLeft.listeners.addDragListener( (e:VertEvent) => { \n\t\tdrawable.lowerRight.add( e.params.dragAmount );\n\t    } );\n\t    drawable.lowerRight.attr.selectable = false\n\t} else {\n\t    throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n\t}\n\n\t// This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n\tif( redraw || typeof redraw == 'undefined' )\n\t    this.redraw();\n    };\n\n\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove( drawable:Drawable, redraw?:boolean, removeWithVertices?:boolean ) {\n\tif( drawable instanceof Vertex )\n\t    this.removeVertex( drawable, false );\n\tfor( var i = 0; i < this.drawables.length; i++ ) {\n\t    if( this.drawables[i] === drawable ) {\n\t\tthis.drawables.splice(i,1);\n\n\t\tif( removeWithVertices ) {\n\t\t    // Check if some listeners need to be removed\n\t\t    if( drawable instanceof Line ) {\n\t\t\t// Add some lines\n\t\t\tthis.removeVertex( drawable.a, false );\n\t\t\tthis.removeVertex( drawable.b, false );\n\t\t    } else if( drawable instanceof Vector ) {\n\t\t\tthis.removeVertex( drawable.a, false );\n\t\t\tthis.removeVertex( drawable.b, false );\n\t\t    } else if( drawable instanceof VEllipse ) {\n\t\t\tthis.removeVertex( drawable.center, false );\n\t\t\tthis.removeVertex( drawable.axis, false );\n\t\t    } else if( drawable instanceof Circle ) {\n\t\t\tthis.removeVertex( drawable.center, false );\n\t\t    } else if( drawable instanceof CircleSector ) {\n\t\t\tthis.removeVertex( drawable.circle.center, false );\n\t\t    } else if( drawable instanceof Polygon ) {\n\t\t\t// for( var i in drawable.vertices )\n\t\t\tfor( var i = 0; i < drawable.vertices.length; i++ )\n\t\t\t    this.removeVertex( drawable.vertices[i], false );\n\t\t    } else if( drawable instanceof Triangle ) {\n\t\t\tthis.removeVertex( drawable.a, false );\n\t\t\tthis.removeVertex( drawable.b, false );\n\t\t\tthis.removeVertex( drawable.c, false );\n\t\t    } else if( drawable instanceof BezierPath ) {\n\t\t\tfor( var i = 0; i < drawable.bezierCurves.length; i++ ) {\n\t\t\t    this.removeVertex( drawable.bezierCurves[i].startPoint, false );\n\t\t\t    this.removeVertex( drawable.bezierCurves[i].startControlPoint, false );\n\t\t\t    this.removeVertex( drawable.bezierCurves[i].endControlPoint, false );\n\t\t\t    if( i+1 == drawable.bezierCurves.length ) {\n\t\t\t\tthis.removeVertex( drawable.bezierCurves[i].endPoint, false );\n\t\t\t    }\n\t\t\t}\n\t\t    } else if( drawable instanceof PBImage ) {\n\t\t\tthis.removeVertex( drawable.upperLeft, false );\n\t\t\tthis.removeVertex( drawable.lowerRight, false );\n\t\t    }\n\t\t} // END removeWithVertices\n\t\t\n\t\tif( redraw )\n\t\t    this.redraw();\n\t\treturn;\n\t    }\n\t}\n    };\n\n\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex( vert:Vertex, redraw?:boolean ) : void {\n\tfor( var i = 0; i < this.vertices.length; i++ ) {\n\t    if( this.vertices[i] === vert ) {\n\t\tthis.vertices.splice(i,1);\n\t\tif( redraw )\n\t\t    this.redraw();\n\t\treturn;\n\t    }\n\t}\n    };\n\n\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll( keepVertices?:boolean ) {\n\tthis.drawables = [];\n\tif( !Boolean(keepVertices) ) {\n\t    this.vertices = [];\n\t}\n\tthis.redraw();\n    };\n\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search. \n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear( pixelPosition:XYCoords, pixelTolerance:number ) : Vertex|undefined {\n\tvar p : IDraggable|undefined = this.locatePointNear( this.transformMousePosition(pixelPosition.x, pixelPosition.y),\n\t\t\t\t\t\t\t     pixelTolerance/Math.min(this.config.cssScaleX,this.config.cssScaleY) );\n\tif( p && p.typeName == \"vertex\" )\n\t    return this.vertices[p.vindex];\n\treturn undefined;\n    };\n    \n\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid( draw : DrawLib<any> ) {\n\tconst gScale : XYCoords = {\n\t    x : Grid.utils.mapRasterScale(this.config.rasterAdjustFactor,this.draw.scale.x)*this.config.rasterScaleX / this.config.cssScaleX,\n\t    y : Grid.utils.mapRasterScale(this.config.rasterAdjustFactor,this.draw.scale.y)*this.config.rasterScaleY / this.config.cssScaleY\n\t};\n\tvar gSize : XYDimension = { width : this.grid.size.x*gScale.x, height : this.grid.size.y*gScale.y };\n\tvar cs : XYDimension    = { width : this.canvasSize.width/2, height : this.canvasSize.height/2 };\n\tvar offset : Vertex     = this.draw.offset.clone().inv();\n\toffset.x = (Math.round(offset.x+cs.width)/Math.round(gSize.width))*(gSize.width)/this.draw.scale.x + (((this.draw.offset.x-cs.width)/this.draw.scale.x)%gSize.width);\n\toffset.y = (Math.round(offset.y+cs.height)/Math.round(gSize.height))*(gSize.height)/this.draw.scale.y + (((this.draw.offset.y-cs.height)/this.draw.scale.x)%gSize.height);\n\tif( this.drawConfig.drawGrid ) {\n\t    if( this.config.rasterGrid ) { // TODO: move config member to drawConfig\n\t\tdraw.setCurrentId('raster');\n\t\tdraw.raster( offset, (this.canvasSize.width)/this.draw.scale.x, (this.canvasSize.height)/this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)' );\n\t    } else {\n\t\tdraw.setCurrentId('grid');\n\t\tdraw.grid( offset, (this.canvasSize.width)/this.draw.scale.x, (this.canvasSize.height)/this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)' );\n\t    }\n\t}\n    };\n\n    \n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin( draw : DrawLib<any> ) {\n\t// Add a crosshair to mark the origin\n\tdraw.setCurrentId('origin');\n\tdraw.crosshair( { x : 0, y : 0 }, 10, '#000000' );\n    };\n\n\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    private _handleColor( h:Vertex, color:string ) {\n\treturn h.attr.isSelected ? this.drawConfig.selectedVertex.color : (h.attr.draggable ? color : 'rgba(128,128,128,0.5)');\n    }\n\n\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct \n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables( renderTime:number, draw:DrawLib<any>, fill:DrawLib<any> ) {\n\tfor( var i in this.drawables ) {\n\t    var d : Drawable = this.drawables[i];\n\t    this.draw.setCurrentId(d.uid);\n\t    this.fill.setCurrentId(d.uid);\n\t    this.draw.setCurrentClassName(d.className);\n\t    this.draw.setCurrentClassName(d.className);\n\t    this.drawDrawable( d, renderTime, draw, fill );\n\t}\n    };\n\n\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct \n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable( d:Drawable, renderTime:number, draw:DrawLib<any>, fill:DrawLib<any> ) {\n\tif( d instanceof BezierPath ) {\n\t    for( var c in d.bezierCurves ) {\n\t\tdraw.cubicBezier( d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth );\n\n\t\tif( this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints ) {\n\t\t    if( !d.bezierCurves[c].startPoint.attr.bezierAutoAdjust ) {\n\t\t\tif( d.bezierCurves[c].startPoint.attr.visible ) {\n\t\t\t    draw.setCurrentId(`${d.uid}_h0`);\n\t\t\t    draw.setCurrentClassName(`${d.className}-start-handle`);\n\t\t\t    draw.diamondHandle( d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint,this.drawConfig.vertex.color) );\n\t\t\t}\n\t\t\td.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n\t\t    }\n\t\t    if( !d.bezierCurves[c].endPoint.attr.bezierAutoAdjust ) {\n\t\t\tif( d.bezierCurves[c].endPoint.attr.visible ) {\n\t\t\t    draw.setCurrentId(`${d.uid}_h1`);\n\t\t\t    draw.setCurrentClassName(`${d.className}-end-handle`);\n\t\t\t    draw.diamondHandle( d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint,this.drawConfig.vertex.color) );\n\t\t\t}\n\t\t\td.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n\t\t    }\n\t\t    if( d.bezierCurves[c].startControlPoint.attr.visible ) {\n\t\t\tdraw.setCurrentId(`${d.uid}_h2`);\n\t\t\tdraw.setCurrentClassName(`${d.className}-start-control-handle`);\n\t\t\tdraw.circleHandle( d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint,'#008888') );\n\t\t    }\n\t\t    if( d.bezierCurves[c].endControlPoint.attr.visible ) {\n\t\t\tdraw.setCurrentId(`${d.uid}_h3`);\n\t\t\tdraw.setCurrentClassName(`${d.className}-end-control-handle`);\n\t\t\tdraw.circleHandle( d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint,'#008888') );\n\t\t    }\n\t\t    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n\t\t    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n\t\t} else {\n\t\t    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n\t\t    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n\t\t    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n\t\t    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n\t\t}\n\t\t\n\t\tif( this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines ) {\n\t\t    draw.setCurrentId(`${d.uid}_l0`);\n\t\t    draw.setCurrentClassName(`${d.className}-start-line`);\n\t\t    draw.line( d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n\t\t    draw.setCurrentId(`${d.uid}_l1`);\n\t\t    draw.setCurrentClassName(`${d.className}-end-line`);\n\t\t    draw.line( d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth );\n\t\t}\n\t\t\n\t    }\n\t} else if( d instanceof Polygon ) {\n\t    draw.polygon( d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth );\n\t    if( !this.drawConfig.drawHandlePoints ) {\n\t\tfor( var i in d.vertices ) {\n\t\t    d.vertices[i].attr.renderTime = renderTime;\n\t\t}\n\t    }\n\t} else if( d instanceof Triangle ) {\n\t    draw.polyline( [d.a,d.b,d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth );\n\t    if( !this.drawConfig.drawHandlePoints ) \n\t\td.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n\t} else if( d instanceof VEllipse ) {\n\t    if( this.drawConfig.drawHandleLines ) {\n\t\tdraw.setCurrentId(`${d.uid}_e0`);\n\t\tdraw.setCurrentClassName(`${d.className}-v-line`);\n\t\tdraw.line( d.center.clone().add(0,d.axis.y-d.center.y), d.axis, '#c8c8c8' );\n\t\tdraw.setCurrentId(`${d.uid}_e1`);\n\t\tdraw.setCurrentClassName(`${d.className}-h-line`);\n\t\tdraw.line( d.center.clone().add(d.axis.x-d.center.x,0), d.axis, '#c8c8c8' );\n\t    }\n\t    draw.setCurrentId(d.uid);\n\t    draw.setCurrentClassName(`${d.className}`);\n\t    draw.ellipse( d.center, Math.abs(d.axis.x-d.center.x), Math.abs(d.axis.y-d.center.y), this.drawConfig.ellipse.color,  this.drawConfig.ellipse.lineWidth );\n\t    if( !this.drawConfig.drawHandlePoints ) {\n\t\td.center.attr.renderTime = renderTime;\n\t\td.axis.attr.renderTime = renderTime;\n\t    }\n\t} else if( d instanceof Circle ) {\n\t    draw.circle( d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth );\n\t} else if( d instanceof CircleSector ) {\n\t    draw.circleArc( d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth );\n\t} else if( d instanceof Vertex ) {\n\t    if( this.drawConfig.drawVertices &&\n\t\t(!d.attr.selectable || !d.attr.draggable) && d.attr.visible ) {\n\t\t// Draw as special point (grey)\t\t\n\t\tdraw.circleHandle( d, 7, this.drawConfig.vertex.color );\n\t\td.attr.renderTime = renderTime;\n\t    }\n\t} else if( d instanceof Line ) {\n\t    draw.line( d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth );\n\t    if( !this.drawConfig.drawHandlePoints || !d.a.attr.selectable ) \n\t\td.a.attr.renderTime = renderTime;\n\t    if( !this.drawConfig.drawHandlePoints || !d.b.attr.selectable ) \n\t\td.b.attr.renderTime = renderTime;\n\t} else if( d instanceof Vector ) {\n\t    draw.arrow( d.a, d.b, this.drawConfig.vector.color );\n\t    if( this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible ) {\n\t\tdraw.setCurrentId(`${d.uid}_h0`);\n\t\tdraw.setCurrentClassName(`${d.className}-handle`);\n\t\tdraw.circleHandle( d.b, 3, '#a8a8a8' );\n\t    } else {\n\t\td.b.attr.renderTime = renderTime;\t\n\t    }\n\t    if( !this.drawConfig.drawHandlePoints || !d.a.attr.selectable ) \n\t\td.a.attr.renderTime = renderTime;\n\t    if( !this.drawConfig.drawHandlePoints || !d.b.attr.selectable ) \n\t\td.b.attr.renderTime = renderTime;\n\t    \n\t} else if( d instanceof PBImage ) {\n\t    if( this.drawConfig.drawHandleLines ) {\n\t\tdraw.setCurrentId(`${d.uid}_l0`);\n\t\tdraw.setCurrentClassName(`${d.className}-line`);\n\t\tdraw.line( d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth );\n\t    }\n\t    fill.setCurrentId(d.uid);\n\t    fill.image( d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft) );\n\t    if( this.drawConfig.drawHandlePoints ) {\n\t\tdraw.setCurrentId(`${d.uid}_h0`);\n\t\tdraw.setCurrentClassName(`${d.className}-lower-right`);\n\t\tdraw.circleHandle( d.lowerRight, 3, this.drawConfig.image.color );\n\t\td.lowerRight.attr.renderTime = renderTime;\n\t    }\n\t} else {\n\t    console.error( 'Cannot draw object. Unknown class.');\n\t}\n    };\n\n\n\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon( draw:DrawLib<any> ) {\n\t// Draw select polygon?\n\tif( this.selectPolygon != null && this.selectPolygon.vertices.length > 0 ) {\n\t    draw.setCurrentId( this.selectPolygon.uid );\n\t    draw.polygon( this.selectPolygon, '#888888' );\n\t    draw.crosshair( this.selectPolygon.vertices[0], 3, '#008888' );\n\t}\n    };\n    \n\n    \n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct \n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices( renderTime:number, draw:DrawLib<any> ) {\n\t// Draw all vertices as small squares if they were not already drawn by other objects\n\tfor( var i in this.vertices ) {\n\t    if( this.drawConfig.drawVertices\n\t\t&& this.vertices[i].attr.renderTime != renderTime\n\t\t&& this.vertices[i].attr.visible\n\t      ) {\n\t\tdraw.setCurrentId(this.vertices[i].uid);\n\t\tdraw.squareHandle( this.vertices[i], 5, this._handleColor(this.vertices[i],'rgb(0,128,192)') );\n\t    }\n\t}\n    };\n    \n\n    \n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n\tvar renderTime : number = new Date().getTime();\n\t\n\tif( this.config.preClear ) this.config.preClear();\n\tthis.clear();\n\tif( this.config.preDraw ) this.config.preDraw();\n\t\n\tthis.drawAll( renderTime, this.draw, this.fill );\n\n\tif( this.config.postDraw ) this.config.postDraw();\n    };\n\n\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll( renderTime:number, draw:DrawLib<any>, fill:DrawLib<any> ) {\n\t// Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n\tdraw.beginDrawCycle( renderTime );\n\tfill.beginDrawCycle( renderTime );\n\t\n\tthis.drawGrid(draw);\n\tif( this.config.drawOrigin )\n\t    this.drawOrigin(draw); \n\tthis.drawDrawables(renderTime, draw, fill);\n\tthis.drawVertices(renderTime, draw);\n\tthis.drawSelectPolygon( draw );\n    }; // END redraw\n\n\n\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n\t// Note that elements might have an alpha channel. Clear the scene first.\n\tthis.draw.clear( this.config.backgroundColor );\n    };\n\n\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection( redraw?:boolean ) {\n\tfor( var i in this.vertices ) \n\t    this.vertices[i].attr.isSelected = false;\n\tif( redraw )\n\t    this.redraw();\n\treturn this;\n    };\n\n\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() : Bounds {\n\treturn new Bounds( this.transformMousePosition(0,0),\n\t\t\t   this.transformMousePosition(this.canvasSize.width*this.config.cssScaleX,this.canvasSize.height*this.config.cssScaleY)\n\t\t\t );\n    };\n\n    \n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n    \tthis.hooks.saveFile(this);\n    };\n\n\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    private getFProp( elem : HTMLElement | SVGElement, propName : string ) : number {\n\treturn parseFloat( globalThis.getComputedStyle(elem, null).getPropertyValue(propName) )\n    }\n\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\t\n    private getAvailableContainerSpace() : XYDimension {\n\tconst _self : PlotBoilerplate = this;\n\tconst container : HTMLElement = (_self.canvas.parentNode as unknown) as HTMLElement; // Element | Document | DocumentFragment;\n\t// var canvas : HTMLCanvasElement = _self.canvas;\n\t_self.canvas.style.display = 'none';\n\t/* var\n\tpadding : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding') ) || 0,\n\tborder : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-width') ) || 0,\n\tpl : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-left') ) || padding,\n\tpr : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-right') ) || padding,\n\tpt : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-top') ) || padding,\n\tpb : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-bottom') ) || padding,\n\tbl : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-left-width') ) || border,\n\tbr : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-right-width') ) || border,\n\tbt : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-top-width') ) || border,\n\tbb : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-bottom-width') ) || border;\n\t*/\n\tvar\n\tpadding : number = this.getFProp(container, 'padding') || 0,\n\tborder : number = this.getFProp(_self.canvas,'border-width') || 0,\n\tpl : number = this.getFProp(container,'padding-left') || padding,\n\tpr : number = this.getFProp(container,'padding-right') || padding,\n\tpt : number = this.getFProp(container,'padding-top') || padding,\n\tpb : number = this.getFProp(container,'padding-bottom') || padding,\n\tbl : number = this.getFProp(_self.canvas,'border-left-width') || border,\n\tbr : number = this.getFProp(_self.canvas,'border-right-width') || border,\n\tbt : number = this.getFProp(_self.canvas,'border-top-width') || border,\n\tbb : number = this.getFProp(_self.canvas,'border-bottom-width') || border;\n\tvar w : number = container.clientWidth; \n\tvar h : number = container.clientHeight;\n\t_self.canvas.style.display = 'block';\n\treturn { width : (w-pl-pr-bl-br), height : (h-pt-pb-bt-bb) };\n    }; \n\n\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n\tconst _self : PlotBoilerplate = this;\n\tconst _setSize = (w:number,h:number) => {\n\t    w *= _self.config.canvasWidthFactor;\n\t    h *= _self.config.canvasHeightFactor;\n\t    _self.canvasSize.width  = w;\n\t    _self.canvasSize.height = h;\n\t    // TODO: use CanvasWrapper.setSize here?\n\t    if( _self.canvas instanceof HTMLCanvasElement ) {\n\t\t_self.canvas.width      = w; \n\t\t_self.canvas.height     = h;\n\t    } else if( _self.canvas instanceof SVGElement ) {\n\t\tthis.canvas.setAttribute('viewBox', `0 0 ${w} ${h}`);\n\t\tthis.canvas.setAttribute('width', `${w}` );\n\t\tthis.canvas.setAttribute('height', `${h}` );\n\t\t(this.draw as drawutilssvg).setSize( _self.canvasSize ); // No need to set size to this.fill (instance copy)\n\t\t// console.log(\n\t\tthis.eventCatcher.style.width = `${w}px`;\n\t\tthis.eventCatcher.style.height = `${h}px`;\n\t    } else {\n\t\tconsole.error('Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.');\n\t    }\n\t    if( _self.config.autoAdjustOffset ) {\n\t\t_self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w*(_self.config.offsetAdjustXPercent/100); \n\t\t_self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h*(_self.config.offsetAdjustYPercent/100);\n\t    }\n\t};\n\tif( _self.config.fullSize && !_self.config.fitToParent ) {\n\t    // Set editor size\n\t    var width : number  = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n\t    var height : number = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\t    _self.canvas.style.position = 'absolute';\n\t    _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n\t    _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n\t    _self.canvas.style.top = '0px';\n\t    _self.canvas.style.left = '0px';\n\t    _setSize( width, height );\n\t} else if( _self.config.fitToParent ) {\n\t    // Set editor size\n\t    _self.canvas.style.position = 'absolute';\n\t    const space : XYDimension = this.getAvailableContainerSpace();\n\t    _self.canvas.style.width = (_self.config.canvasWidthFactor*space.width)+'px';\n\t    _self.canvas.style.height = (_self.config.canvasHeightFactor*space.height)+'px';\n\t    _self.canvas.style.top = null;\n\t    _self.canvas.style.left = null;\n\t    _setSize( space.width, space.height );\t\t\n\t} else {\n\t    _self.canvas.style.width = null;\n\t    _self.canvas.style.height = null;\n            _setSize( _self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight );\n\t}\n\t\n\tif( _self.config.redrawOnResize )\n\t    _self.redraw();\n    };\n\n\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon( polygon:Polygon ) {\n\tfor( var i in this.vertices ) {\n\t    if( this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]) ) \n\t\tthis.vertices[i].attr.isSelected = true;\n\t}\n    };\n\n\n\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.  \n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    private locatePointNear( point:XYCoords, tolerance?:number ) : IDraggable|null { \n\tconst _self : PlotBoilerplate = this;\n\tif( typeof tolerance == 'undefined' )\n\t    tolerance = 7;\n\t// Apply the zoom (the tolerant area should not shrink or grow when zooming)\n\ttolerance /= _self.draw.scale.x;\n\t// Search in vertices\n\t// for( var vindex in _self.vertices ) {\n\tfor( var vindex = 0; vindex < _self.vertices.length; vindex++ ) {\n\t    var vert : Vertex = _self.vertices[vindex];\n\t    if( (vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance ) {\n\t\t// { type : 'vertex', vindex : vindex };\n\t\treturn new PlotBoilerplate.Draggable( vert, PlotBoilerplate.Draggable.VERTEX ).setVIndex(vindex); \n\t    }\n\t} \n\treturn null;\n    }\n\n\n    /**\n     * Handle left-click event.<br> \n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    private handleClick(e:XMouseEvent) { // x:number,y:number) {\n\tconst _self : PlotBoilerplate = this;\n\t// const x:number = e.params.pos.x;\n\t//const y:number = e.params.pos.y;\n\tvar p : IDraggable = this.locatePointNear( _self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE/Math.min(_self.config.cssScaleX,_self.config.cssScaleY) );\n\tif( p ) {\n\t    _self.vertices[p.vindex].listeners.fireClickEvent( e );\n\t    if( this.keyHandler && this.keyHandler.isDown('shift') ) {\n\t\tif( p.typeName == 'bpath' ) {\n\t\t    let vert : Vertex = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n\t\t    if( vert.attr.selectable )\n\t\t\tvert.attr.isSelected = !vert.attr.isSelected;\n\t\t} else if( p.typeName == 'vertex' ) {\n\t\t    let vert : Vertex = _self.vertices[p.vindex];\n\t\t    if( vert.attr.selectable )\n\t\t\tvert.attr.isSelected = !vert.attr.isSelected;\n\t\t}\n\t\t_self.redraw();\n\t    } else if( this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */ ) {\n\t\t_self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n\t\t_self.redraw();\n\t    }\n\t}\n\telse if( _self.selectPolygon != null ) {\n\t    const vert : XYCoords = _self.transformMousePosition( e.params.pos.x, e.params.pos.y );\n\t    _self.selectPolygon.vertices.push( new Vertex(vert.x,vert.y) );\n\t    _self.redraw();\n\t}\n    }\n\n\n\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition( x:number, y:number ) : XYCoords {\n\t/* return { x : (x/this.config.cssScaleX-this.config.offsetX)/(this.config.scaleX),\n\t   y : (y/this.config.cssScaleY-this.config.offsetY)/(this.config.scaleY) }; */\n\t// console.log('offset', this.config.offsetX, this.config.offsetY, this.draw.offset );\n\treturn { x : (x/this.config.cssScaleX-this.config.offsetX)/(this.config.scaleX),\n\t\t y : (y/this.config.cssScaleY-this.config.offsetY)/(this.config.scaleY) };\n    };\n\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition( x:number, y:number ) : XYCoords {\n\treturn { x : x / this.config.cssScaleX + this.config.offsetX,\n\t\t y : y / this.config.cssScaleY + this.config.offsetY };\n    };\n\n\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() : number {\n\treturn this.draggedElements.length;\n    };\n\n\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    private mouseDownHandler(e:XMouseEvent) {\n\tconst _self = this;\n\tif( e.which != 1 ) \n\t    return; // Only react on left mouse or touch events\n\tvar p : IDraggable = _self.locatePointNear( _self.transformMousePosition(e.params.pos.x, e.params.pos.y),\n\t\t\t\t\t\t   PlotBoilerplate.DEFAULT_CLICK_TOLERANCE/Math.min(_self.config.cssScaleX,_self.config.cssScaleY) );\n\tif( !p ) return;\n\t// Drag all selected elements?\n\tif( p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected ) {\n\t    // Multi drag\n\t    // for( var i in _self.vertices ) {\n\t    for( var i = 0; i < _self.vertices.length; i++ ) {\n\t\tif( _self.vertices[i].attr.isSelected ) {\n\t\t    _self.draggedElements.push( new PlotBoilerplate.Draggable( _self.vertices[i], PlotBoilerplate.Draggable.VERTEX ).setVIndex(i) );\n\t\t    _self.vertices[i].listeners.fireDragStartEvent( e );\n\t\t}\n\t    }\n\t} else {\n\t    // Single drag\n\t    if( !_self.vertices[p.vindex].attr.draggable )\n\t\treturn;\n\t    _self.draggedElements.push( p );\n\t    if( p.typeName == 'bpath' )\n\t\t_self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent( e );\n\t    else if( p.typeName == 'vertex' )\n\t\t_self.vertices[p.vindex].listeners.fireDragStartEvent( e );\n\t}\n\t_self.redraw();\n    };\n\n\n\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    private mouseDragHandler(e:XMouseEvent) {\n\tconst _self : PlotBoilerplate = this;\n\tconst oldDragAmount : XYCoords = { x : e.params.dragAmount.x, y : e.params.dragAmount.y };\n\te.params.dragAmount.x /= _self.config.cssScaleX;\n\te.params.dragAmount.y /= _self.config.cssScaleY;\n\t// Important note to: this.keyHandler.isDown('ctrl')\n\t//    We should not use this for any input.\n\t//    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n\t//            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n\t//            not this one. So this tab will never receive any [Ctrl-down] events\n\t//            until next keypress; the implication is, that [Ctrl] would still\n\t//            considered to be pressed which is not true.\n\tif( this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar') ) {\n\t    _self.setOffset( _self.draw.offset.clone().add( e.params.dragAmount ) );\n\t    _self.redraw();\n\t} else { \n\t    // Convert drag amount by scaling\n\t    // Warning: this possibly invalidates the dragEvent for other listeners!\n\t    //          Rethink the solution when other features are added.\n\t    e.params.dragAmount.x /= _self.draw.scale.x;\n\t    e.params.dragAmount.y /= _self.draw.scale.y;\t\t\n\t    for( var i in _self.draggedElements ) { \n\t\tvar p = _self.draggedElements[i];\n\t\tif( p.typeName == 'bpath' ) {\n\t\t    _self.paths[p.pindex].moveCurvePoint( p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y ) );\n\t\t    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent( e );\n\t\t} else if( p.typeName == 'vertex' ) {\n\t\t    if( !_self.vertices[p.vindex].attr.draggable )\n\t\t\tcontinue;\n\t\t    _self.vertices[p.vindex].add( e.params.dragAmount );\n\t\t    _self.vertices[p.vindex].listeners.fireDragEvent( e );\n\t\t}\n\t    }\n\t}\n\t// Restore old event values!\n\te.params.dragAmount.x = oldDragAmount.x;\n\te.params.dragAmount.y = oldDragAmount.y;\n\t_self.redraw();\n    };\n\n\n\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    private mouseUpHandler(e:XMouseEvent) {\n\tconst _self : PlotBoilerplate = this;\n\tif( e.which != 1 )\n\t    return; // Only react on left mouse;\n\tif( !e.params.wasDragged ) {\n\t    _self.handleClick( e ); // e.params.pos.x, e.params.pos.y );\n\t}\n\tfor( var i in _self.draggedElements ) {\n\t    var p : IDraggable = _self.draggedElements[i];\n\t    if( p.typeName == 'bpath' ) {\n\t\t_self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent( e );\n\t    } else if( p.typeName == 'vertex' ) {\n\t\t_self.vertices[p.vindex].listeners.fireDragEndEvent( e );\n\t    }\n\t}\n\t_self.draggedElements = [];\n\t_self.redraw();\n    };\n\n\n\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    private mouseWheelHandler(e:XMouseEvent) {\n\tvar zoomStep : number = 1.25;  // Make configurable?\n\t// CHANGED replaced _self by this\n\tconst _self : PlotBoilerplate = this;\n\tconst we : WheelEvent = ((e as unknown) as WheelEvent);\n\tif( we.deltaY < 0 ) {\n\t    _self.setZoom( _self.config.scaleX*zoomStep, _self.config.scaleY*zoomStep, new Vertex(e.params.pos.x, e.params.pos.y) );\n\t} else if( we.deltaY > 0 ) {\n\t    _self.setZoom( _self.config.scaleX/zoomStep, _self.config.scaleY/zoomStep, new Vertex(e.params.pos.x, e.params.pos.y) );\n\t}\n\t\n\te.preventDefault();\n\t_self.redraw();\n    };\n\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    private setOffset( newOffset : XYCoords ) {\n\tthis.draw.offset.set( newOffset );\n\tthis.fill.offset.set( newOffset );\n\tthis.config.offsetX = newOffset.x;\n\tthis.config.offsetY = newOffset.y;\n    };\n\n     /**\n     * Set a new zoom value (and re-adjust the draw offset).\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {number} zoomFactorX - The new horizontal zoom value.\n     * @param {number} zoomFactorY - The new vertical zoom value.\n     * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n     **/\n    private setZoom(zoomFactorX : number, zoomFactorY : number, interactionPos : Vertex ) {\n\tlet oldPos : XYCoords = this.transformMousePosition(interactionPos.x, interactionPos.y);\n\tthis.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX,0.01);\n\tthis.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY,0.01);\n\tlet newPos : XYCoords = this.transformMousePosition(interactionPos.x, interactionPos.y);\n\tlet newOffsetX : number = this.draw.offset.x + (newPos.x-oldPos.x)*this.draw.scale.x;\n\tlet newOffsetY : number = this.draw.offset.y + (newPos.y-oldPos.y)*this.draw.scale.y;\n\tthis.setOffset( { x : newOffsetX, y : newOffsetY } );\n    }\n\n\n    private installInputListeners() {\n\tvar _self : PlotBoilerplate = this;\n\tif( this.config.enableMouse ) { \n\t    // Install a mouse handler on the canvas.\n\t    new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n\t\t.down( (e:XMouseEvent) => { _self.mouseDownHandler(e); } )\n\t\t.drag( (e:XMouseEvent) => { _self.mouseDragHandler(e); } )\n\t\t.up( (e:XMouseEvent) => { _self.mouseUpHandler(e); } )\n\t    ;\n\t} else { _self.console.log('Mouse interaction disabled.'); }\n\t\n\tif( this.config.enableMouseWheel ) { \n\t    // Install a mouse handler on the canvas.\n\t    new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n\t\t.wheel( (e:XWheelEvent) => { _self.mouseWheelHandler(e); } );\n\t} else { _self.console.log('Mouse wheel interaction disabled.'); }\n\t\n\tif( this.config.enableTouch) { \n\t    // Install a touch handler on the canvas.\n\t    const relPos = (pos:XYCoords) : XYCoords => {\n\t\tconst bounds = _self.canvas.getBoundingClientRect();\n\t\treturn { x : pos.x - bounds.left, // _self.canvas.offsetLeft,\n\t\t\t y : pos.y - bounds.top   // _self.canvas.offsetTop\n\t\t       };\n\t    }\n\t    \n\t    if( globalThis[\"AlloyFinger\"] && typeof globalThis[\"AlloyFinger\"] == \"function\" ) {\t\t\n\t\ttry {\n\t\t    // Do not include AlloyFinger itself to the library\n\t\t    // (17kb, but we want to keep this lib as tiny as possible).\n\t\t    const AF : AlloyFinger = globalThis[\"AlloyFinger\"] as AlloyFinger;\n\t\t    var touchMovePos : Vertex|undefined|null= null;\n\t\t    var touchDownPos : Vertex|undefined|null = null;\n\t\t    var draggedElement : IDraggable|undefined|null = null;\n\t\t    var multiTouchStartScale : Vertex|undefined|null = null;\n\t\t    const clearTouch = () => {\n\t\t\ttouchMovePos = null;\n\t\t\ttouchDownPos = null;\n\t\t\tdraggedElement = null;\n\t\t\tmultiTouchStartScale = null;\n\t\t\t_self.draggedElements = [];\n\t\t    };\n\t\t    var af = new AF( this.eventCatcher ? this.eventCatcher : this.canvas, {\n\t\t\ttouchStart: function (e) {\n\t\t\t    if( e.touches.length == 1 ) {\n\t\t\t\ttouchMovePos = new Vertex( relPos( { x : e.touches[0].clientX, y : e.touches[0].clientY } ) );\n\t\t\t\ttouchDownPos = new Vertex( relPos( { x : e.touches[0].clientX, y : e.touches[0].clientY } ) );\n\t\t\t\tdraggedElement = _self.locatePointNear( _self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE/Math.min(_self.config.cssScaleX,_self.config.cssScaleY) );\n\t\t\t\tif( draggedElement && draggedElement.typeName == 'vertex' ) {\n\t\t\t\t    var draggingVertex : Vertex = _self.vertices[draggedElement.vindex];\n\t\t\t\t    var fakeEvent : VertEvent = ({ params : { isTouchEvent : true, dragAmount : { x: 0, y : 0 }, wasDragged : false, mouseDownPos : touchDownPos.clone(), mouseDragPos : touchDownPos.clone(), vertex : draggingVertex}} as unknown) as VertEvent;\n\t\t\t\t    _self.draggedElements = [ draggedElement ];\n\t\t\t\t    draggingVertex.listeners.fireDragStartEvent( fakeEvent );\n\t\t\t\t}\n\t\t\t    }\n\t\t\t},\n\t\t\ttouchMove: function (e) {\n\t\t\t    if( e.touches.length == 1 && draggedElement ) {\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation(); \n\t\t\t\tvar rel : XYCoords = relPos( { x : e.touches[0].clientX, y : e.touches[0].clientY } ); //  points[0] );\n\t\t\t\tvar trans : XYCoords = _self.transformMousePosition( rel.x, rel.y ); \n\t\t\t\tvar diff : Vertex = new Vertex(_self.transformMousePosition( touchMovePos.x, touchMovePos.y )).difference(trans);\n\t\t\t\tif( draggedElement.typeName == 'vertex' ) {\n\t\t\t\t    if( !_self.vertices[draggedElement.vindex].attr.draggable )\n\t\t\t\t\treturn;\n\t\t\t\t    _self.vertices[draggedElement.vindex].add( diff );\n\t\t\t\t    var draggingVertex : Vertex = _self.vertices[draggedElement.vindex];\n\t\t\t\t    var fakeEvent : VertEvent = ({ isTouchEvent : true, params : { dragAmount : diff.clone(), wasDragged : true, mouseDownPos : touchDownPos.clone(), mouseDragPos : touchDownPos.clone().add(diff), vertex : draggingVertex}} as unknown) as VertEvent;\n\t\t\t\t    draggingVertex.listeners.fireDragEvent( fakeEvent );\n\t\t\t\t    _self.redraw();\n\t\t\t\t}\n\t\t\t\ttouchMovePos = new Vertex(rel);\n\t\t\t    } else if( e.touches.length == 2 ) {\n\t\t\t\t// If at least two fingers touch and move, then change the draw offset (panning).\n\t\t\t\te.preventDefault();\n\t\t\t\te.stopPropagation();\n\t\t\t\t_self.setOffset( _self.draw.offset.clone().addXY( e.deltaX, e.deltaY ) ); // Apply zoom?\n\t\t\t\t_self.redraw();\n\t\t\t    }\n\t\t\t},\n\t\t\ttouchEnd:  function (e) {\n\t\t\t    // Note: e.touches.length is 0 here\n\t\t\t    if( draggedElement && draggedElement.typeName == 'vertex' ) {\n\t\t\t\tvar draggingVertex : Vertex = _self.vertices[draggedElement.vindex];\n\t\t\t\tvar fakeEvent : VertEvent = ({ isTouchEvent : true, params : { dragAmount : { x: 0, y : 0 }, wasDragged : false, mouseDownPos : touchDownPos.clone(), mouseDragPos : touchDownPos.clone(), vertex : draggingVertex}} as unknown) as VertEvent;\n\t\t\t\t// var rel : XYCoords = relPos( { x : e.touches[0].clientX, y : e.touches[0].clientY } ); //  points[0] );\n\t\t\t\t// var trans : XYCoords = _self.transformMousePosition( rel.x, rel.y ); \n\t\t\t\t// var diff : Vertex = new Vertex(_self.transformMousePosition( touchMovePos.x, touchMovePos.y )).difference(trans);\n\t\t\t\t// Check if vertex was moved\n\t\t\t\tif( touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001 ) {\n\t\t\t\t// if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n\t\t\t\t    draggingVertex.listeners.fireClickEvent( fakeEvent );\n\t\t\t\t} else {\n\t\t\t\t    draggingVertex.listeners.fireDragEndEvent( fakeEvent );\n\t\t\t\t}\n\t\t\t    }\n\t\t\t    clearTouch();\n\t\t\t},\n\t\t\ttouchCancel: function (e) {\n\t\t\t    clearTouch();\n\t\t\t},\n\t\t\tmultipointStart: function (e) {\n\t\t\t    multiTouchStartScale = _self.draw.scale.clone();\n\t\t\t},\n\t\t\tmultipointEnd: function (e) {\n\t\t\t    multiTouchStartScale = null;\n\t\t\t},\n\t\t\tpinch: function (e) {\n\t\t\t    // For pinching there must be at least two touch items\n\t\t\t    const fingerA : Vertex = new Vertex( e.touches.item(0).clientX, e.touches.item(0).clientY );\n\t\t\t    const fingerB : Vertex = new Vertex( e.touches.item(1).clientX, e.touches.item(1).clientY );\n\t\t\t    const center : Vertex = new Line( fingerA, fingerB ).vertAt( 0.5 );\n\t\t\t    _self.setZoom( multiTouchStartScale.x*e.zoom, multiTouchStartScale.y*e.zoom, center );\n\t\t\t    _self.redraw();\n\t\t\t}\n\t\t    });\n\t\t} catch( e ) {\n\t\t    console.error(\"Failed to initialize AlloyFinger!\");\n\t\t    console.error(e);\n\t\t};\n\n\t    } else if( globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\" ) {\n\t\tconsole.error('[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.');\n\t\t// Convert absolute touch positions to relative DOM element position (relative to canvas)\n\t    } else {\n\t\tconsole.warn( \"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\" );\n\t    }\n\t} else { _self.console.log('Touch interaction disabled.'); }\n\t\n\tif( this.config.enableKeys ) {\n\t    // Install key handler\n\t    this.keyHandler = new KeyHandler( { trackAll : true } )\n\t\t.down('escape',function() {\n\t\t    _self.clearSelection(true);\n\t\t} )\n\t\t.down('shift',function() {\n\t\t    _self.selectPolygon = new Polygon();\n\t\t    _self.redraw();\n\t\t} )\n\t\t.up('shift',function() {\n\t\t    // Find and select vertices in the drawn area\n\t\t    if( _self.selectPolygon == null )\n\t\t\treturn;\n\t\t    _self.selectVerticesInPolygon( _self.selectPolygon );\n\t\t    _self.selectPolygon = null;\n\t\t    _self.redraw();\n\t\t} )\n\t    ;\n\t} // END IF enableKeys?\n\telse  { _self.console.log('Keyboard interaction disabled.'); }\n\n    }\n\n\n    /**\n     * Creates a control GUI (a dat.gui instance) for this \n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI} \n     **/\n    createGUI() : GUI {\n\t// This function moved to the helper utils.\n\t// We do not want to include the whole dat.GUI package.\n\tif( globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\" )\n\t    return globalThis[\"utils\"].createGUI(this);\n\telse\n\t    throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n\n    /**\n     * A set of helper functions.\n     **/\n    static utils = {\n\t\n\t/** \n\t * Merge the elements in the 'extension' object into the 'base' object based on\n\t * the keys of 'base'.\n\t *\n\t * @param {Object} base\n\t * @param {Object} extension\n\t * @return {Object} base extended by the new attributes.\n\t **/\n\tsafeMergeByKeys : ( base:Object, extension:Object ) : Object => {\n\t    for( var k in extension ) {\n\t\tif( !extension.hasOwnProperty(k) )\n\t\t    continue;\n\t\tif( base.hasOwnProperty(k) ) {\n\t\t    var typ = typeof base[k];\n\t\t    try {\n\t\t\tif( typ == 'boolean' ) base[k] = !!JSON.parse(extension[k]);\n\t\t\telse if( typ == 'number' ) base[k] = JSON.parse(extension[k])*1;\n\t\t\telse if( typ == 'function' && typeof extension[k] == 'function' ) base[k] = extension[k] ;\n\t\t\telse base[k] = extension[k];\n\t\t    } catch( e ) {\n\t\t\tconsole.error( 'error in key ', k, extension[k], e );\n\t\t    }\n\t\t} else {\n\t\t    base[k] = extension[k];\n\t\t}\n\t    }\n\t    return base;\n\t},\n\t\n\t/** \n\t * A helper function to scale elements (usually the canvas) using CSS.\n\t *\n\t * transform-origin is at (0,0).\n\t *\n\t * @param {HTMLElement} element - The DOM element to scale.\n\t * @param {number} scaleX The - X scale factor.\n\t * @param {number} scaleY The - Y scale factor.\n\t * @return {void}\n\t **/ \n\tsetCSSscale : ( element : HTMLElement | SVGElement,\n\t\t\tscaleX : number,\n\t\t\tscaleY : number ) : void => {\n\t    element.style['transform-origin'] = '0 0';\n\t    if( scaleX==1.0 && scaleY==1.0 ) element.style.transform = null;\n\t    else                             element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n\t},\n\t\n\t// A helper for fetching data from objects.\n\tfetch : {\n\t    /**\n\t     * A helper function to the the object property value specified by the given key.\n\t     *\n\t     * @param {any} object   - The object to get the property's value from. Must not be null.\n\t     * @param {string} key      - The key of the object property (the name).\n\t     * @param {any}    fallback - A default value if the key does not exist.\n\t     **/\n\t    val : ( obj:any, key:string, fallback:any ) => {\n\t\tif( !obj.hasOwnProperty(key) )\n\t\t    return fallback;\n\t\tif( typeof obj[key] == 'undefined' )\n\t\t    return fallback;\n\t\treturn obj[key];\n\t    },\n\n\n\t    /**\n\t     * A helper function to the the object property numeric value specified by the given key.\n\t     *\n\t     * @param {any}    object   - The object to get the property's value from. Must not be null.\n\t     * @param {string} key      - The key of the object property (the name).\n\t     * @param {number} fallback - A default value if the key does not exist.\n\t     * @return {number}\n\t     **/\n\t    num : ( obj:any, key:string, fallback:number ) => {\n\t\tif( !obj.hasOwnProperty(key) )\n\t\t    return fallback;\n\t\tif( typeof obj[key] === 'number' )\n\t\t    return obj[key];\n\t\telse {\n\t\t    try {\n\t\t\treturn JSON.parse(obj[key])*1;\n\t\t    } catch( e ) {\n\t\t\treturn fallback;\n\t\t    }\n\t\t}\n\t    },\n\n\t    /**\n\t     * A helper function to the the object property boolean value specified by the given key.\n\t     *\n\t     * @param {any}     object   - The object to get the property's value from. Must not be null.\n\t     * @param {string}  key      - The key of the object property (the name).\n\t     * @param {boolean} fallback - A default value if the key does not exist.\n\t     * @return {boolean}\n\t     **/\n\t    bool : ( obj:any, key:string, fallback:boolean ) => {\n\t\tif( !obj.hasOwnProperty(key) )\n\t\t    return fallback;\n\t\tif( typeof obj[key] == 'boolean' )\n\t\t    return obj[key];\n\t\telse {\n\t\t    try {\n\t\t\treturn !!JSON.parse(obj[key]);\n\t\t    } catch( e ) {\n\t\t\treturn fallback;\n\t\t    }\n\t\t}\n\t    },\n\n\n\t    /**\n\t     * A helper function to the the object property function-value specified by the given key.\n\t     *\n\t     * @param {any}      object   - The object to get the property's value from. Must not be null.\n\t     * @param {string}   key      - The key of the object property (the name).\n\t     * @param {function} fallback - A default value if the key does not exist.\n\t     * @return {function}\n\t     **/\n\t    func : ( obj:any, key:string, fallback:((...args)=>any) ) => {\n\t\tif( !obj.hasOwnProperty(key) )\n\t\t    return fallback;\n\t\tif( typeof obj[key] !== 'function' )\n\t\t    return fallback;\n\t\treturn obj[key];\n\t    }\n\t},  // END fetch\n\t\n\t/**\n\t * Installs vertex listeners to the path's vertices so that controlpoints\n\t * move with their path points when dragged.\n\t *\n\t * Bézier path points with attr.bezierAutoAdjust==true will have their\n\t * two control points audo-updated if moved, too (keep path connections smooth).\n\t *\n\t * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n\t **/\n\tenableBezierPathAutoAdjust : ( bezierPath : BezierPath ) => {\n\t    for( var i = 0; i < bezierPath.bezierCurves.length; i++ ) {\n\t\t// This should be wrapped into the BezierPath implementation.\n\t\tbezierPath.bezierCurves[i].startPoint.listeners.addDragListener( function(e) {\n\t\t    var cindex : number = bezierPath.locateCurveByStartPoint( e.params.vertex );\n\t\t    bezierPath.bezierCurves[cindex].startPoint.addXY( -e.params.dragAmount.x, -e.params.dragAmount.y );\n\t\t    bezierPath.moveCurvePoint( cindex*1, \n\t\t\t\t\t     bezierPath.START_POINT,     \n\t\t\t\t\t     e.params.dragAmount \n\t\t\t\t\t   );\n\t\t    bezierPath.updateArcLengths();\n\t\t} );\n\t\tbezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener( function(e) {\n\t\t    var cindex : number = bezierPath.locateCurveByStartControlPoint( e.params.vertex );\n\t\t    if( !bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust )\n\t\t\treturn;\n\t\t    bezierPath.adjustPredecessorControlPoint( cindex*1, \n\t\t\t\t\t\t\t    true,      // obtain handle length?\n\t\t\t\t\t\t\t    false      // update arc lengths\n\t\t\t\t\t\t\t  );\n\t\t    bezierPath.updateArcLengths();\n\t\t} );\n\t\tbezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener( function(e) {\n\t\t    var cindex : number = bezierPath.locateCurveByEndControlPoint( e.params.vertex );\n\t\t    if( !bezierPath.bezierCurves[cindex%bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust )\n\t\t\treturn;\n\t\t    bezierPath.adjustSuccessorControlPoint( cindex*1, \n\t\t\t\t\t\t\t  true,        // obtain handle length?\n\t\t\t\t\t\t\t  false        // update arc lengths\n\t\t\t\t\t\t\t);\n\t\t    bezierPath.updateArcLengths();\n\t\t} );\n\t\tif( i+1 == bezierPath.bezierCurves.length ) { // && !bezierPath.adjustCircular ) { \n\t\t    // Move last control point with the end point (if not circular)\n\t\t    bezierPath.bezierCurves[bezierPath.bezierCurves.length-1].endPoint.listeners.addDragListener( function(e) {\n\t\t\tif( !bezierPath.adjustCircular ) {\n\t\t\t    var cindex : number = bezierPath.locateCurveByEndPoint( e.params.vertex );\n\t\t\t    bezierPath.moveCurvePoint( cindex*1, \n\t\t\t\t\t\t     bezierPath.END_CONTROL_POINT,     \n\t\t\t\t\t\t     new Vertex( { x: e.params.dragAmount.x, y : e.params.dragAmount.y } )\n\t\t\t\t\t\t   ); \n\t\t\t}\n\t\t\tbezierPath.updateArcLengths();\n\t\t    } ); \n\t\t}\n\t    } // END for\n\t}\t\n    }; // END utils\n} // END class PlotBoilerplate\n","/**\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @deprecated THIS CLASS IS DEPRECATED. Please use the new `drawutilssvg` instead.\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-12-17 Added Circle and CircleSection style classes.\n * @modified 2021-01-26 DEPRECATION\n * @version  1.0.5\n **/\n\n\nimport { Vertex } from \"./Vertex\";\nimport { XYCoords, SVGSerializable } from \"./interfaces\";\n\n\n/**\n * @classdesc A default SVG builder.\n *\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */ \nexport class SVGBuilder {\n\n    /**\n     * @constructor\n     **/\n    constructor() {\n\tconsole.warn(\"THIS CLASS IS DEPRECATED. Please use the new 'drawutilssvg' instead.\")\n    };\n\n\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    build( drawables:Array<SVGSerializable>,\n\t   options:{canvasSize:{width:number,height:number},zoom:Vertex,offset:Vertex}\n\t ) : string {\n\t\n\tvar nl : string = '\\n';\n\tvar indent : string = '  ';\n\tvar buffer : Array<string> = [];\n\t\n\tbuffer.push( '<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl );\n\tbuffer.push( '<svg width=\"'+options.canvasSize.width+'\" height=\"'+options.canvasSize.height+'\"' );\n\tbuffer.push( ' viewBox=\"' );\n\tbuffer.push( '0' );\n\tbuffer.push( ' ' );\n\tbuffer.push( '0' );\n\tbuffer.push( ' ' );\n\tbuffer.push( options.canvasSize.width.toString() );\n\tbuffer.push( ' ' );\n\tbuffer.push( options.canvasSize.height.toString() );\n\tbuffer.push( '\"' );\n\t\n\tbuffer.push( ' xmlns=\"http://www.w3.org/2000/svg\">' + nl );\n\n\tbuffer.push( indent + '<defs>' + nl );\n\tbuffer.push( indent + '<style>' + nl);\n\n\tbuffer.push( indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl );\n\tbuffer.push( indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl );\n\tbuffer.push( indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl );\n\tbuffer.push( indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl );\n\tbuffer.push( indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl );\n\tbuffer.push( indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl );\n\tbuffer.push( indent + indent + ' .Circle { fill : none; stroke : purple; stroke-width : 1px; } ' + nl );\n\tbuffer.push( indent + indent + ' .CircleSector { fill : none; stroke : purple; stroke-width : 1px; } ' + nl );\n\tbuffer.push( indent + '</style>' + nl );\n\tbuffer.push( indent + '</defs>' + nl );\n\n\tbuffer.push( indent + '<g class=\"main-g\"' );\n\tif( options.zoom || options.offset ) {\n\t    buffer.push( ' transform=\"' );\n\t    if( options.zoom )\n\t\tbuffer.push( 'scale(' + options.zoom.x + ',' + options.zoom.y + ')' );\n\t    if( options.offset )\n\t\tbuffer.push( ' translate(' + options.offset.x + ',' + options.offset.y + ')' );\n\t    buffer.push( '\"' ); \n\t}\n\tbuffer.push( '>' + nl );\n\t\n\tfor( var i in drawables ) {\n\t    var d : SVGSerializable = drawables[i];\n\t    if( typeof d.toSVGString == 'function' ) {\n\t\tbuffer.push( indent + indent );\n\t\tbuffer.push( d.toSVGString( { 'className' : d.className } ) );\n\t\tbuffer.push( nl );\n\t    } else {\n\t\tconsole.warn( 'Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className );\n\t    }\n\t}\n\tbuffer.push( indent + '</g>' + nl );\n\tbuffer.push( '</svg>' + nl );\n\treturn buffer.join('');\n    };\n}\n"],"names":[],"mappings":"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"};;;;;;;;;;;;;;;;;;;;;;;;;;;;"}