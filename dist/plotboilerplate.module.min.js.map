{"version":3,"file":"plotboilerplate.module.min.js","sources":["../src/es2015/UIDGenerator.js","../src/es2015/VertexAttr.js","../src/es2015/VertexListeners.js","../src/es2015/Vertex.js","../src/es2015/Polygon.js","../src/es2015/Bounds.js","../src/es2015/VertTuple.js","../src/es2015/Vector.js","../src/es2015/CubicBezierCurve.js","../src/es2015/BezierPath.js","../src/es2015/Line.js","../src/es2015/Circle.js","../src/es2015/CircleSector.js","../src/es2015/draw.js","../src/es2015/drawgl.js","../src/es2015/Triangle.js","../src/es2015/geomutils.js","../src/es2015/Grid.js","../src/es2015/PlotBoilerplate.js","../src/es2015/KeyHandler.js","../src/es2015/MouseHandler.js","../src/es2015/PBImage.js","../src/es2015/utils/helpers/drawutilssvg.js","../src/es2015/VEllipse.js","../src/es2015/module.js","../src/es2015/SVGBuilder.js"],"sourcesContent":["/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nexport class UIDGenerator {\n    static next() { return `${UIDGenerator.current++}`; }\n    ;\n}\nUIDGenerator.current = 0;\n;\n//# sourceMappingURL=UIDGenerator.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nexport class VertexAttr {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    constructor() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n}\n/**\n * This is the global attribute model. Set these object on the initialization\n * of your app to gain all VertexAttr instances have these attributes.\n *\n * @type {object}\n **/\nVertexAttr.model = {\n    draggable: true,\n    selectable: true,\n    isSelected: false,\n    visible: true\n};\n//# sourceMappingURL=VertexAttr.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nexport class VertexListeners {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    constructor(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addClickListener(listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeClickListener(listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    }\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragListener(listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragListener(listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragStartListener(listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    removeDragStartListener(listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    }\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    addDragEndListener(listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n    * Remove a drag listener.\n    *\n    * @method removeDragEndListener\n    * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n    * @return {VertexListeners} this (for chaining)\n    * @instance\n    * @memberof VertexListeners\n    **/\n    removeDragEndListener(listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    }\n    ;\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireClickEvent(e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    }\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEvent(e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    }\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragStartEvent(e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    }\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    fireDragEndEvent(e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    }\n    ;\n    /**\n     * @private\n     **/\n    static _fireEvent(_self, listeners, e) {\n        const ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    }\n    ;\n    /**\n     * @private\n     */\n    static _addListener(listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    }\n    ;\n    /**\n     * @private\n     */\n    static _removeListener(listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    }\n    ;\n}\n//# sourceMappingURL=VertexListeners.js.map","/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modifeid 2020-10-30 Change the warnings in `sub(...)` and `add(...)` into real errors.\n * @version  2.4.1\n *\n * @file Vertex\n * @public\n **/\nimport { VertexAttr } from \"./VertexAttr\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { VertexListeners } from \"./VertexListeners\";\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nexport class Vertex {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    constructor(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator.next();\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr();\n        this.listeners = new VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    set(x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    }\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setX(x) {\n        this.x = x;\n        return this;\n    }\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    setY(y) {\n        this.y = y;\n        return this;\n    }\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invX() {\n        this.x = -this.x;\n        return this;\n    }\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    invY() {\n        this.y = -this.y;\n        return this;\n    }\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    add(x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addXY(amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    }\n    ;\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addX(amountX) {\n        this.x += amountX;\n        return this;\n    }\n    ;\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    addY(amountY) {\n        this.y += amountY;\n        return this;\n    }\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    sub(x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            const tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    throw `Cannot add ${typeof x} to numeric x component!`;\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    throw `Cannot add ${typeof y} to numeric y component!`;\n            }\n        }\n        return this;\n    }\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    equals(vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    }\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    clone() {\n        return new Vertex(this.x, this.y);\n    }\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    distance(vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    }\n    ;\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    angle(origin) {\n        const a = (typeof origin === \"undefined\" ? Math.PI / 2 - Math.atan2(this.x, this.y) : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y));\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    }\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    difference(vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    }\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    scale(factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    }\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    rotate(angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        let len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        let lenX = this.x;\n        let lenY = this.y;\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    }\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    multiplyScalar(scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    }\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    round() {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    }\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    inv() {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    }\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toString() {\n        return '(' + this.x + ',' + this.y + ')';\n    }\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    static randomVertex(viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    }\n    ;\n}\nVertex.ZERO = new Vertex(0, 0);\n/**\n * An epsilon for comparison\n *\n * @private\n * @readonly\n **/\nVertex.EPSILON = 1.0e-6;\nVertex.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n    buildArrowHead: (zA, zB, headlen, scaleX, scaleY) => {\n        // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vertex.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @version 1.7.0\n *\n * @file Polygon\n * @public\n **/\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class Polygon {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    constructor(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator.next();\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    addVertex(vert) {\n        this.vertices.push(vert);\n    }\n    ;\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    getVertexAt(index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    }\n    ;\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    move(vert) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(vert);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    containsVert(vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            let xi = this.vertices[i].x, yi = this.vertices[i].y;\n            let xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    }\n    ;\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    area() {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        /* let total : number = 0.0;\n        \n        for (var i = 0, l = this.vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1)%l].y;\n            const subX = vertices[(i + 1)%l].x;\n            const subY = vertices[i].y;\n    \n            total += (addX * addY * 0.5);\n            total -= (subX * subY * 0.5);\n        }\n        return Math.abs(total); */\n        return Polygon.utils.area(this.vertices);\n    }\n    ;\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    signedArea() {\n        return Polygon.utils.signedArea(this.vertices);\n        /* let sum : number = 0;\n        const n = this.vertices.length;\n        for (var i = 0; i < n; i++ ) {\n            const j = (i+1) % n;\n            sum += (this.vertices[j].x - this.vertices[i].x) * (this.vertices[i].y + this.vertices[j].y);\n        }\n        return sum; */\n    }\n    ;\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    isClockwise() {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    }\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    scale(factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    rotate(angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    }\n    ;\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    getBounds() {\n        return Bounds.computeFromVertices(this.vertices);\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierData() {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toQuadraticBezierSVGString() {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierData(threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierSVGString(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    }\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    toCubicBezierPath(threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath.fromArray(pathdata);\n    }\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\nPolygon.utils = {\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @name area\n     * @return {number}\n     */\n    area(vertices) {\n        // Found at:\n        //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n        let total = 0.0;\n        for (var i = 0, l = vertices.length; i < l; i++) {\n            const addX = vertices[i].x;\n            const addY = vertices[(i + 1) % l].y;\n            const subX = vertices[(i + 1) % l].x;\n            const subY = vertices[i].y;\n            total += (addX * addY * 0.5);\n            total -= (subX * subY * 0.5);\n        }\n        return Math.abs(total);\n    },\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @name signedArea\n     * @return {number}\n     */\n    signedArea(vertices) {\n        let sum = 0;\n        const n = vertices.length;\n        for (var i = 0; i < n; i++) {\n            const j = (i + 1) % n;\n            sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n        }\n        return sum;\n    }\n};\n//# sourceMappingURL=Polygon.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @version  1.2.0\n **/\nimport { Polygon } from \"./Polygon\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nexport class Bounds {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    constructor(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    ;\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    toPolygon() {\n        return new Polygon([\n            new Vertex(this.min),\n            new Vertex(this.max.x, this.min.y),\n            new Vertex(this.max),\n            new Vertex(this.min.x, this.max.y)\n        ], false);\n    }\n    ;\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    static computeFromVertices(vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex(0, 0), new Vertex(0, 0));\n        let xMin = vertices[0].x;\n        let xMax = vertices[0].x;\n        let yMin = vertices[0].y;\n        let yMax = vertices[0].y;\n        let vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex(xMin, yMin), new Vertex(xMax, yMax));\n    }\n    ;\n} // END class bounds\n//# sourceMappingURL=Bounds.js.map","/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n */\nimport { Vertex } from \"./Vertex\";\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires SVGSerializable\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VertTuple {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    constructor(a, b, factory) {\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    length() {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    }\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    setLength(length) {\n        return this.scale(length / this.length());\n    }\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    sub(amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    }\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    add(amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    normalize() {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    }\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    scale(factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    }\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    moveTo(newA) {\n        let diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    }\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    angle(line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex(0, 0), new Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    }\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    vertAt(t) {\n        return new Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    }\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    denominator(line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    }\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    colinear(line) {\n        return Math.abs(this.denominator(line)) < Vertex.EPSILON;\n    }\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestT(p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    }\n    ;\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    hasPoint(point, insideBoundsOnly) {\n        const t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            const distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    }\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    getClosestPoint(p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    }\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    pointDistance(p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    }\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    clone() {\n        return this.factory(this.a.clone(), this.b.clone());\n    }\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    toString() {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    }\n    ;\n}\n/**\n * @private\n **/\nVertTuple.vtutils = {\n    dist2: function (v, w) {\n        return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n    }\n};\n//# sourceMappingURL=VertTuple.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @version  1.3.0\n *\n * @file Vector\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires Vertex, Line\n **/\nexport class Vector extends VertTuple {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    constructor(vertA, vertB) {\n        super(vertA, vertB, (a, b) => new Vector(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vector\";\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    perp() {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex(), new Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    }\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    inverse() {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    }\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    inv() {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    }\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    intersection(line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    }\n    ;\n}\nVector.utils = {\n    /**\n     * Generate a four-point arrow head, starting at the vector end minus the\n     * arrow head length.\n     *\n     * The first vertex in the returned array is guaranteed to be the located\n     * at the vector line end minus the arrow head length.\n     *\n     *\n     * Due to performance all params are required.\n     *\n     * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n     * scaling different). Arrow heads should not look distored on non-uniform scaling.\n     *\n     * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n     * For headlen use 8, it's a good arrow head size.\n     *\n     * Example:\n     *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n     *\n     * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n     * @param {Vertex} zB - The end vertex of the vector.\n     * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n     * @param {number} scaleX  - The horizontal scaling during draw.\n     * @param {number} scaleY  - the vertical scaling during draw.\n     **/\n    buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n        var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n        var vertices = [];\n        vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n        vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n        vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n        return vertices;\n    }\n};\n//# sourceMappingURL=Vector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @version 2.5.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { Vector } from \"./Vector\";\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class CubicBezierCurve {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    constructor(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    moveCurvePoint(pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(`[CubicBezierCurve.moveCurvePoint] pointID '${pointID}' invalid.`);\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    }\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    translate(amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    }\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    reverse() {\n        let tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    }\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    getLength() {\n        return this.arcLength;\n    }\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    updateArcLengths() {\n        let pointA = this.startPoint.clone(), pointB = new Vertex(0, 0), curveStep = 1.0 / this.curveIntervals;\n        let u = curveStep;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        let newLength = 0.0;\n        var t = 0.0;\n        let tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    }\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    getClosestT(p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var t = 0.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    }\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    locateIntervalByDistance(p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        const tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    }\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    getBounds() {\n        var min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        let v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds(min, max);\n    }\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    getStartPoint() {\n        return this.startPoint;\n    }\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    getEndPoint() {\n        return this.endPoint;\n    }\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    getStartControlPoint() {\n        return this.startControlPoint;\n    }\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    getEndControlPoint() {\n        return this.endControlPoint;\n    }\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointByID(id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(`Invalid point ID '${id}'.`);\n    }\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPointAt(t) {\n        // Perform some powerful math magic\n        const x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        const y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPoint(u) {\n        return this.getPointAt(u / this.arcLength);\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangentAt(t) {\n        const a = this.getStartPoint();\n        const b = this.getStartControlPoint();\n        const c = this.getEndControlPoint();\n        const d = this.getEndPoint();\n        // This is the shortened one\n        const t2 = t * t;\n        const t3 = t * t2;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        const nt2 = 1 - 2 * t + t2;\n        const tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        const tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex(tX, tY);\n    }\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    getSubCurveAt(tStart, tEnd) {\n        const startVec = new Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        const endVec = new Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    }\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    convertU2T(u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    }\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getTangent(u) {\n        return this.getTangentAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicular(u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    }\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    getPerpendicularAt(t) {\n        const tangentVector = this.getTangentAt(t);\n        return new Vertex(tangentVector.y, -tangentVector.x);\n    }\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    clone() {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    }\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    equals(curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    }\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    static isInstance(obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    }\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    toSVGPathData() {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    }\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    toJSON(prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    }\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    }\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromObject(obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    }\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    static fromArray(arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    }\n    ;\n}\n/** @constant {number} */\nCubicBezierCurve.START_POINT = 0;\n/** @constant {number} */\nCubicBezierCurve.START_CONTROL_POINT = 1;\n/** @constant {number} */\nCubicBezierCurve.END_CONTROL_POINT = 2;\n/** @constant {number} */\nCubicBezierCurve.END_POINT = 3;\n//# sourceMappingURL=CubicBezierCurve.js.map","/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @version 2.3.0\n *\n * @file BezierPath\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class BezierPath {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    constructor(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    addCurve(curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    }\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    locateCurveByStartPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByEndPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    locateCurveByStartControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    locateCurveByEndControlPoint(point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    }\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    getLength() {\n        return this.totalArcLength;\n    }\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    updateArcLengths() {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    }\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    getCurveCount() {\n        return this.bezierCurves.length;\n    }\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    getCurveAt(curveIndex) {\n        return this.bezierCurves[curveIndex];\n    }\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /*\n    insertVertexAt( t:number ) : void {\n    console.log('Inserting vertex at', t );\n    // Find the curve index\n    var u : number = 0;\n    var curveIndex : number = -1;\n    var localT : number = 0.0;\n    for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n        \n    }\n    }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    translate(amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    }\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    scale(anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    }\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    rotate(angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    }\n    ;\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    getClosestT(p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    }\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    getPoint(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    }\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    getPointAt(t) {\n        return this.getPoint(t * this.totalArcLength);\n    }\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    getTangentAt(t) {\n        return this.getTangent(t * this.totalArcLength);\n    }\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    getTangent(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    }\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    getPerpendicularAt(t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    }\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    getPerpendicular(u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    }\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    static _locateUIndex(path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    }\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    getSubPathAt(startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        let startU = startT * this.totalArcLength;\n        let endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    }\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    moveCurvePoint(curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustPredecessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    adjustSuccessorControlPoint(curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    }\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    static adjustNeighbourControlPoint(_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    }\n    ;\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    getBounds() {\n        const min = new Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        const max = new Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds(min, max);\n    }\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    clone() {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    }\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    equals(path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    }\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    toJSON(prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    static fromJSON(jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    }\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    static fromArray(obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        const arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    }\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    toReducedListRepresentation(digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    }\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    static fromReducedListRepresentation(listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            //if( i == 0 )\n            startPoint = new Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    }\n    ;\n}\n// +---------------------------------------------------------------------------------\n// | These constants equal the values from CubicBezierCurve.\n// +-------------------------------\n/** @constant {number} */\nBezierPath.START_POINT = 0;\n/** @constant {number} */\nBezierPath.START_CONTROL_POINT = 1;\n/** @constant {number} */\nBezierPath.END_CONTROL_POINT = 2;\n/** @constant {number} */\nBezierPath.END_POINT = 3;\n//# sourceMappingURL=BezierPath.js.map","/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @version  2.1.3\n *\n * @file Line\n * @public\n **/\nimport { VertTuple } from \"./VertTuple\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nexport class Line extends VertTuple {\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    constructor(a, b) {\n        super(a, b, (a, b) => new Line(a, b));\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Line\";\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    intersection(line) {\n        const denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        let a = this.a.y - line.a.y;\n        let b = this.a.x - line.a.x;\n        const numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        const numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        const x = this.a.x + (a * (this.b.x - this.a.x));\n        const y = this.a.y + (a * (this.b.y - this.a.y));\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return undefined;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex(x, y);\n    }\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=Line.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @version  1.2.0\n **/\nimport { Line } from \"./Line\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nexport class Circle {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    constructor(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    containsCircle(circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    }\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    lineDistance(line) {\n        const closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    }\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    vertAt(angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    }\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    tangentAt(angle) {\n        const pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector(pointA, new Vertex(0, 0)).add(this.center).perp();\n    }\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    circleIntersection(circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line(new Vertex(x3, y3), new Vertex(x4, y4));\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircle.circleUtils = {\n    vertAt: function (angle, radius) {\n        /* return new Vertex( Math.sin(angle) * radius,\n                   Math.cos(angle) * radius ); */\n        return new Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n    }\n};\n//# sourceMappingURL=Circle.js.map","/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @version  1.1.0\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nexport class CircleSector {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    constructor(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path ');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        const data = CircleSector.circleSectorUtils.describeSVGArc(this.circle.center.x, this.circle.center.y, this.circle.radius, this.startAngle, this.endAngle);\n        buffer.push(' d=\"' + data.join(\" \") + '\" />');\n        return buffer.join('');\n    }\n    ;\n} // END class\nCircleSector.circleSectorUtils = {\n    /**\n     * Helper function to convert polar circle coordinates to cartesian coordinates.\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {number} angle - The angle in radians.\n    */\n    polarToCartesian: (centerX, centerY, radius, angle) => {\n        return {\n            x: centerX + (radius * Math.cos(angle)),\n            y: centerY + (radius * Math.sin(angle))\n        };\n    },\n    /**\n     * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n     * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n     *\n     * TODO: generalize for ellipses (two radii).\n     *\n     * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n     * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n     */\n    describeSVGArc: (x, y, radius, startAngle, endAngle, options) => {\n        if (typeof options === 'undefined')\n            options = { moveToStart: true };\n        const end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n        const start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n        // Split full circles into two halves.\n        // Some browsers have problems to render full circles (described by start==end).\n        if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n            const firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n            const firstEndPoint = { x: firstHalf[firstHalf.length - 2],\n                y: firstHalf[firstHalf.length - 1]\n            };\n            const secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n            return firstHalf.concat(secondHalf);\n        }\n        // Boolean stored as integers (0|1).\n        const largeArcFlag = endAngle - startAngle <= Math.PI ? 0 : 1;\n        const sweepFlag = 1;\n        const pathData = [];\n        if (options.moveToStart) {\n            pathData.push('M', start.x, start.y);\n        }\n        pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n        return pathData;\n    }\n};\n//# sourceMappingURL=CircleSector.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @version  1.8.3\n **/\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { Vertex } from \"./Vertex\";\n// Todo: rename this class to Drawutils\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutils {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    beginDrawCycle(renderTime) {\n        // NOOP\n    }\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    setCurrentId(uid) {\n        // NOOP\n    }\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    rect(position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    _fillOrDraw(color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    }\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    quadraticBezier(startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var curve, startPoint, endPoint, startControlPoint, endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    }\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    }\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || '#000000');\n        }\n    }\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    }\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    }\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    }\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen) // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    }\n    ;\n    text(text, x, y, options) {\n        options = options || {};\n        this.ctx.save();\n        x = this.offset.x + x * this.scale.x;\n        y = this.offset.y + y * this.scale.y;\n        const color = options.color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, x, y);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, x, y);\n        }\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    label(text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    }\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    }\n    ;\n}\n//# sourceMappingURL=draw.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @version  0.0.5\n **/\nimport { Vertex } from \"./Vertex\";\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilsgl {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    constructor(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex(0, 0);\n        this.scale = new Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    _x2rel(x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; }\n    ;\n    _y2rel(y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; }\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    beginDrawCycle(renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    }\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    setCurrentId(uid) {\n        // NOOP\n        this.curId = uid;\n    }\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    setCurrentClassName(className) {\n        // NOOP\n    }\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    line(zA, zB, color) {\n        const vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    arrow(zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    image(image, position, size) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    _fillOrDraw(color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handle(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    handleLine(startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    dot(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    point(p, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circle(center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    square(center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    diamondHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    squareHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    circleHandle(center, size, color) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    crosshair(center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    }\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polygon(polygon, color, lineWidth) {\n        const vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        let uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        let currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    }\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    text(text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    label(text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    }\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    clear(color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n    ;\n}\n// Vertex shader source code\ndrawutilsgl.vertCode = `\n    precision mediump float;\n\n    attribute vec3 position;\n\n    uniform vec2 uRotationVector;\n\n    void main(void) {\n\tvec2 rotatedPosition = vec2(\n\t    position.x * uRotationVector.y +\n\t\tposition.y * uRotationVector.x,\n\t    position.y * uRotationVector.y -\n\t\tposition.x * uRotationVector.x\n\t);\n\n\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\n    }`;\n// Fragment shader source code\ndrawutilsgl.fragCode = `\n    precision highp float;\n\n    void main(void) {\n\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\n    }`;\n/**\n * Some GL helper utils.\n **/\nclass GLU {\n    constructor(gl) {\n        this.gl = gl;\n    }\n    ;\n    bufferData(verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    }\n    ;\n    /*=================== Shaders ====================*/\n    compileShader(shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        const vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    }\n    ;\n    makeProgram(vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    }\n    ;\n}\n//# sourceMappingURL=drawgl.js.map","/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @version   2.5.1\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { Line } from \"./Line\";\nimport { Polygon } from \"./Polygon\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vertex } from \"./Vertex\";\nimport { geomutils } from \"./geomutils\";\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n * @requires geomutils\n *\n */\nexport class Triangle {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    constructor(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    static fromArray(arr) {\n        if (arr.length < 3)\n            throw `Cannot create triangle from array with less than three vertices (${arr.length})`;\n        return new Triangle(arr[0], arr[1], arr[2]);\n    }\n    ;\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    getArea() {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    }\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    getCentroid() {\n        return new Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    }\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    scaleToCentroid(factor) {\n        let centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    }\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    getCircumcircle() {\n        // if( !this.center || !this.radius ) \n        this.calcCircumcircle();\n        return new Circle(this.center.clone(), this.radius);\n    }\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    isAdjacent(tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    }\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    getThirdVertex(vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    }\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    calcCircumcircle() {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        const A = this.b.x - this.a.x;\n        const B = this.b.y - this.a.y;\n        const C = this.c.x - this.a.x;\n        const D = this.c.y - this.a.y;\n        const E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        const F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        const G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        let dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            const bounds = this.bounds();\n            this.center = new Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            const cx = (D * E - B * F) / G;\n            const cy = (A * F - C * E) / G;\n            this.center = new Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    }\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    inCircumcircle(v) {\n        const dx = this.center.x - v.x;\n        const dy = this.center.y - v.y;\n        const dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    }\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    bounds() {\n        return new Bounds(new Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    }\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    toPolygon() {\n        return new Polygon([this.a, this.b, this.c]);\n    }\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    determinant() {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    }\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    containsPoint(p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    }\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    getIncircularTriangle() {\n        const lineA = new Line(this.a, this.b);\n        const lineB = new Line(this.b, this.c);\n        const lineC = new Line(this.c, this.a);\n        const bisector1 = geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        const bisector2 = geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        const intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        const circleIntersA = lineA.getClosestPoint(intersection);\n        const circleIntersB = lineB.getClosestPoint(intersection);\n        const circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    }\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    getIncircle() {\n        return this.getIncircularTriangle().getCircumcircle();\n    }\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    getIncenter() {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    }\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    toString() {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    }\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    }\n    ;\n}\n/**\n * An epsilon for comparison.\n * This should be the same epsilon as in Vertex.\n *\n * @private\n **/\nTriangle.EPSILON = 1.0e-6;\nTriangle.utils = {\n    // Used in the bounds() function.\n    max3(a, b, c) {\n        return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n    },\n    min3(a, b, c) {\n        return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n    },\n    signedArea(p0x, p0y, p1x, p1y, p2x, p2y) {\n        return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n    },\n    /**\n     * Used by the containsPoint() function.\n     *\n     * @private\n     **/\n    pointIsInTriangle(px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n        //\n        // Point-in-Triangle test found at\n        //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n        // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n        var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n        var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n        var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n        return s > 0 && t > 0 && (1 - s - t) > 0;\n    }\n};\n//# sourceMappingURL=Triangle.js.map","/**\n * @author  Ikaros Kappler\n * @date    2019-02-03\n * @version 1.0.0\n **/\nimport { Line } from \"./Line\";\nimport { Triangle } from \"./Triangle\";\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexport const geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle(pA, pB, pC, n) {\n        const triangle = new Triangle(pA, pB, pC);\n        const lineAB = new Line(pA, pB);\n        const lineAC = new Line(pA, pC);\n        // Compute the slope (theta) of line AB and line AC\n        const thetaAB = lineAB.angle();\n        const thetaAC = lineAC.angle();\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        const clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        const lineLength = Math.max(lineAB.length(), lineAC.length());\n        const scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    }\n};\n//# sourceMappingURL=geomutils.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nexport class Grid {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    constructor(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n}\n/**\n * @memberof Grid\n **/\nGrid.utils = {\n    /**\n     * Calculate the logarithm of the given number (num) to a given base.<br>\n     * <br>\n     * This function returns the number l with<br>\n     *  <pre>num == Math.pow(base,l)</pre>\n     *\n     * @member baseLog\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} base - The base to calculate the logarithm to.\n     * @param {number} num  - The number to calculate the logarithm for.\n     * @return {number} <pre>log(base)/log(num)</pre>\n     **/\n    baseLog: (base, num) => { return Math.log(base) / Math.log(num); },\n    /**\n     * Calculate the raster scale for a given logarithmic mapping.<br>\n     * <br>\n     * Example (with adjustFactor=2):<br>\n     * <pre>\n     * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n     * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n     * </pre>\n     *\n     * @member mapRasterScale\n     * @function\n     * @memberof Grid\n     * @inner\n     * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n     * @param {number} scale        The currently used scale factor.\n     * @return {number}\n     **/\n    mapRasterScale: (adjustFactor, scale) => {\n        var gf = 1.0;\n        if (scale >= 1) {\n            gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n            gf = 1 / Math.pow(adjustFactor, gf);\n        }\n        else {\n            gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n            //gf = Math.pow( adjustFactor, gf );\n        }\n        return gf;\n    }\n};\n//# sourceMappingURL=Grid.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @version  1.12.2\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nvar _a;\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { drawutilssvg } from \"./utils/helpers/drawutilssvg\";\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { Grid } from \"./Grid\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { Polygon } from \"./Polygon\";\nimport { Triangle } from \"./Triangle\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vector } from \"./Vector\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nexport class PlotBoilerplate {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    constructor(config) {\n        // This should be in some static block ...\n        VertexAttr.model = { bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        const f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, 'fullSize', true),\n            fitToParent: f.bool(config, 'fitToParent', true),\n            scaleX: f.num(config, 'scaleX', 1.0),\n            scaleY: f.num(config, 'scaleY', 1.0),\n            offsetX: f.num(config, 'offsetX', 0.0),\n            offsetY: f.num(config, 'offsetY', 0.0),\n            rasterGrid: f.bool(config, 'rasterGrid', true),\n            rasterScaleX: f.num(config, 'rasterScaleX', 1.0),\n            rasterScaleY: f.num(config, 'rasterScaleY', 1.0),\n            rasterAdjustFactor: f.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: f.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: f.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: f.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: f.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: f.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: f.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: f.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: f.num(config, 'cssScaleX', 1.0),\n            cssScaleY: f.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: f.bool(config, 'cssUniformScale', true),\n            saveFile: () => { _self.hooks.saveFile(_self); },\n            setToRetina: () => { _self._setToRetina(); },\n            autoDetectRetina: f.bool(config, 'autoDetectRetina', true),\n            enableSVGExport: f.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: f.func(config, 'preClear', null),\n            preDraw: f.func(config, 'preDraw', null),\n            postDraw: f.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: f.bool(config, 'enableMouse', true),\n            enableTouch: f.bool(config, 'enableTouch', true),\n            enableKeys: f.bool(config, 'enableKeys', true),\n            enableMouseWheel: f.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: f.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: f.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: f.bool(config, 'drawHandlePoints', true),\n            drawGrid: f.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            circle: {\n                color: '#22a8a8',\n                lineWidth: 2\n            },\n            circleSector: {\n                color: '#2280a8',\n                lineWidth: 1\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: '#c08000',\n                lineWidth: 2\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid(new Vertex(0, 0), new Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        const canvasElement = typeof config.canvas == 'string'\n            ? document.querySelector(config.canvas)\n            : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === 'canvas') {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawutilsgl === \"undefined\") {\n                console.warn(`Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.`);\n                console.warn(`Disabling GL and falling back to Canvas2D.`);\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                const ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n                this.draw = new drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n            }\n            else {\n                const ctx = this.canvas.getContext('2d');\n                this.draw = new drawutils(ctx, false);\n                this.fill = new drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === 'svg') {\n            if (typeof drawutilssvg === \"undefined\")\n                throw `The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.`;\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg(this.canvas, new Vertex(), // offset\n            new Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement('div');\n                this.eventCatcher.style.position = 'absolute';\n                this.eventCatcher.style.left = '0';\n                this.eventCatcher.style.top = '0';\n                this.eventCatcher.style.cursor = 'pointer';\n                this.canvas.parentElement.style.position = 'relative';\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw 'Element is neither a canvas nor an svg element.';\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener('resize', () => _self.resizeCanvas());\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    static _saveFile(pb) {\n        if (typeof drawutilssvg === \"undefined\") {\n            console.error(`Cannot convert image to SVG. The svg renderer 'drawutilssvg' is missing. Did you load it?`);\n            return;\n        }\n        // Create fake SVG node\n        const svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // var svgNode = document.getElementById('preview-svg');\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        tosvgDraw.clear(pb.config.backgroundColor);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    }\n    ;\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    _setToRetina() {\n        this.config.autoDetectRetina = true;\n        const pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio; // 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    }\n    ;\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    fitToView(bounds) {\n        const canvasCenter = new Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        const canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        const ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        const center = new Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            const newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            const newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    }\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    setConsole(con) {\n        this.console = con;\n    }\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    updateCSSscale() {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    }\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    add(drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            const arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath) {\n            this.drawables.push(drawable);\n            const bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener((e) => {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    }\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    remove(drawable, redraw, removeWithVertices) {\n        if (drawable instanceof Vertex)\n            this.removeVertex(drawable, false);\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    }\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    removeVertex(vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    }\n    ;\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    removeAll(keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    }\n    ;\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    getVertexNear(pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    }\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawGrid(draw) {\n        const gScale = {\n            x: Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX / this.config.cssScaleX,\n            y: Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY / this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) { // TODO: move config member to drawConfig\n                draw.setCurrentId('raster');\n                draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            }\n            else {\n                draw.setCurrentId('grid');\n                draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n            }\n        }\n    }\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawOrigin(draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId('origin');\n        draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    }\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    _handleColor(h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : (h.attr.draggable ? color : 'rgba(128,128,128,0.5)');\n    }\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawables(renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    }\n    ;\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawDrawable(d, renderTime, draw, fill) {\n        if (d instanceof BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].startPoint.attr.visible) {\n                            draw.setCurrentId(`${d.uid}_h0`);\n                            draw.setCurrentClassName(`${d.className}-start-handle`);\n                            draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    }\n                    if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].endPoint.attr.visible) {\n                            draw.setCurrentId(`${d.uid}_h1`);\n                            draw.setCurrentClassName(`${d.className}-end-handle`);\n                            draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h2`);\n                        draw.setCurrentClassName(`${d.className}-start-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        draw.setCurrentId(`${d.uid}_h3`);\n                        draw.setCurrentClassName(`${d.className}-end-control-handle`);\n                        draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                    }\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(`${d.uid}_l0`);\n                    draw.setCurrentClassName(`${d.className}-start-line`);\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(`${d.uid}_l1`);\n                    draw.setCurrentClassName(`${d.className}-end-line`);\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_e0`);\n                draw.setCurrentClassName(`${d.className}-v-line`);\n                draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                draw.setCurrentId(`${d.uid}_e1`);\n                draw.setCurrentClassName(`${d.className}-h-line`);\n                draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(`${d.className}`);\n            draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex) {\n            if (this.drawConfig.drawVertices &&\n                (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\t\t\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-handle`);\n                draw.circleHandle(d.b, 3, '#a8a8a8');\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(`${d.uid}_l0`);\n                draw.setCurrentClassName(`${d.className}-line`);\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(`${d.uid}_h0`);\n                draw.setCurrentClassName(`${d.className}-lower-right`);\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else {\n            console.error('Cannot draw object. Unknown class.');\n        }\n    }\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawSelectPolygon(draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, '#888888');\n            draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    }\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawVertices(renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices\n                && this.vertices[i].attr.renderTime != renderTime\n                && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    }\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    redraw() {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw();\n    }\n    ;\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    drawAll(renderTime, draw, fill) {\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        draw.beginDrawCycle(renderTime);\n        fill.beginDrawCycle(renderTime);\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n    }\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    clear() {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    }\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    clearSelection(redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    }\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    viewport() {\n        return new Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    }\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    saveFile() {\n        this.hooks.saveFile(this);\n    }\n    ;\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    getFProp(elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    }\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    getAvailableContainerSpace() {\n        const _self = this;\n        const container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        // var canvas : HTMLCanvasElement = _self.canvas;\n        _self.canvas.style.display = 'none';\n        /* var\n        padding : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding') ) || 0,\n        border : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-width') ) || 0,\n        pl : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-left') ) || padding,\n        pr : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-right') ) || padding,\n        pt : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-top') ) || padding,\n        pb : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-bottom') ) || padding,\n        bl : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-left-width') ) || border,\n        br : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-right-width') ) || border,\n        bt : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-top-width') ) || border,\n        bb : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-bottom-width') ) || border;\n        */\n        var padding = this.getFProp(container, 'padding') || 0, border = this.getFProp(_self.canvas, 'border-width') || 0, pl = this.getFProp(container, 'padding-left') || padding, pr = this.getFProp(container, 'padding-right') || padding, pt = this.getFProp(container, 'padding-top') || padding, pb = this.getFProp(container, 'padding-bottom') || padding, bl = this.getFProp(_self.canvas, 'border-left-width') || border, br = this.getFProp(_self.canvas, 'border-right-width') || border, bt = this.getFProp(_self.canvas, 'border-top-width') || border, bb = this.getFProp(_self.canvas, 'border-bottom-width') || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    }\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    resizeCanvas() {\n        const _self = this;\n        const _setSize = (w, h) => {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            // TODO: use CanvasWrapper.setSize here?\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                this.canvas.setAttribute('viewBox', `0 0 ${w} ${h}`);\n                this.canvas.setAttribute('width', `${w}`);\n                this.canvas.setAttribute('height', `${h}`);\n                this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                // console.log(\n                this.eventCatcher.style.width = `${w}px`;\n                this.eventCatcher.style.height = `${h}px`;\n            }\n            else {\n                console.error('Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.');\n            }\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            const space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    }\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    selectVerticesInPolygon(polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    }\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    locatePointNear(point, tolerance) {\n        const _self = this;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    }\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    handleClick(e) {\n        const _self = this;\n        // const x:number = e.params.pos.x;\n        //const y:number = e.params.pos.y;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    let vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    let vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            const vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    }\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    transformMousePosition(x, y) {\n        /* return { x : (x/this.config.cssScaleX-this.config.offsetX)/(this.config.scaleX),\n           y : (y/this.config.cssScaleY-this.config.offsetY)/(this.config.scaleY) }; */\n        // console.log('offset', this.config.offsetX, this.config.offsetY, this.draw.offset );\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    }\n    ;\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    revertMousePosition(x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX,\n            y: y / this.config.cssScaleY + this.config.offsetY };\n    }\n    ;\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    getDraggedElementCount() {\n        return this.draggedElements.length;\n    }\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDownHandler(e) {\n        const _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    }\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseDragHandler(e) {\n        const _self = this;\n        const oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar')) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    }\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseUpHandler(e) {\n        const _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    }\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    mouseWheelHandler(e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        const _self = this;\n        const we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    }\n    ;\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    setOffset(newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    }\n    ;\n    /**\n    * Set a new zoom value (and re-adjust the draw offset).\n    *\n    * Note: the function will not trigger any redraws.\n    *\n    * @param {number} zoomFactorX - The new horizontal zoom value.\n    * @param {number} zoomFactorY - The new vertical zoom value.\n    * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n    **/\n    setZoom(zoomFactorX, zoomFactorY, interactionPos) {\n        let oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        let newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        let newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        let newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    }\n    installInputListeners() {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down((e) => { _self.mouseDownHandler(e); })\n                .drag((e) => { _self.mouseDragHandler(e); })\n                .up((e) => { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .wheel((e) => { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            const relPos = (pos) => {\n                const bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left,\n                    y: pos.y - bounds.top // _self.canvas.offsetTop\n                };\n            };\n            if (globalThis[\"AlloyFinger\"] && typeof globalThis[\"AlloyFinger\"] == \"function\") {\n                try {\n                    // Do not include AlloyFinger itself to the library\n                    // (17kb, but we want to keep this lib as tiny as possible).\n                    const AF = globalThis[\"AlloyFinger\"];\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    const clearTouch = () => {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    var af = new AF(this.eventCatcher ? this.eventCatcher : this.canvas, {\n                        touchStart: function (e) {\n                            if (e.touches.length == 1) {\n                                touchMovePos = new Vertex(relPos({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                touchDownPos = new Vertex(relPos({ x: e.touches[0].clientX, y: e.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == 'vertex') {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { isTouchEvent: true, dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (e) {\n                            if (e.touches.length == 1 && draggedElement) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                var rel = relPos({ x: e.touches[0].clientX, y: e.touches[0].clientY }); //  points[0] );\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { isTouchEvent: true, params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex(rel);\n                            }\n                            else if (e.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                e.preventDefault();\n                                e.stopPropagation();\n                                _self.setOffset(_self.draw.offset.clone().addXY(e.deltaX, e.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (e) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == 'vertex') {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = { isTouchEvent: true, params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                // var rel : XYCoords = relPos( { x : e.touches[0].clientX, y : e.touches[0].clientY } ); //  points[0] );\n                                // var trans : XYCoords = _self.transformMousePosition( rel.x, rel.y ); \n                                // var diff : Vertex = new Vertex(_self.transformMousePosition( touchMovePos.x, touchMovePos.y )).difference(trans);\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch();\n                        },\n                        touchCancel: function (e) {\n                            clearTouch();\n                        },\n                        multipointStart: function (e) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (e) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (e) {\n                            // For pinching there must be at least two touch items\n                            const fingerA = new Vertex(e.touches.item(0).clientX, e.touches.item(0).clientY);\n                            const fingerB = new Vertex(e.touches.item(1).clientX, e.touches.item(1).clientY);\n                            const center = new Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * e.zoom, multiTouchStartScale.y * e.zoom, center);\n                            _self.redraw();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n                ;\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error('[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.');\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    }\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    createGUI() {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    }\n    ;\n} // END class PlotBoilerplate\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n/** @constant {number} */\nPlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n/**\n * A wrapper class for draggable items (mostly vertices).\n * @private\n **/\nPlotBoilerplate.Draggable = (_a = class {\n        constructor(item, typeName) {\n            this.item = item;\n            this.typeName = typeName;\n        }\n        ;\n        isVertex() { return this.typeName == PlotBoilerplate.Draggable.VERTEX; }\n        ;\n        setVIndex(vindex) { this.vindex = vindex; return this; }\n        ;\n    },\n    _a.VERTEX = 'vertex',\n    _a);\n/**\n * A set of helper functions.\n **/\nPlotBoilerplate.utils = {\n    /**\n     * Merge the elements in the 'extension' object into the 'base' object based on\n     * the keys of 'base'.\n     *\n     * @param {Object} base\n     * @param {Object} extension\n     * @return {Object} base extended by the new attributes.\n     **/\n    safeMergeByKeys: (base, extension) => {\n        for (var k in extension) {\n            if (!extension.hasOwnProperty(k))\n                continue;\n            if (base.hasOwnProperty(k)) {\n                var typ = typeof base[k];\n                try {\n                    if (typ == 'boolean')\n                        base[k] = !!JSON.parse(extension[k]);\n                    else if (typ == 'number')\n                        base[k] = JSON.parse(extension[k]) * 1;\n                    else if (typ == 'function' && typeof extension[k] == 'function')\n                        base[k] = extension[k];\n                    else\n                        base[k] = extension[k];\n                }\n                catch (e) {\n                    console.error('error in key ', k, extension[k], e);\n                }\n            }\n            else {\n                base[k] = extension[k];\n            }\n        }\n        return base;\n    },\n    /**\n     * A helper function to scale elements (usually the canvas) using CSS.\n     *\n     * transform-origin is at (0,0).\n     *\n     * @param {HTMLElement} element - The DOM element to scale.\n     * @param {number} scaleX The - X scale factor.\n     * @param {number} scaleY The - Y scale factor.\n     * @return {void}\n     **/\n    setCSSscale: (element, scaleX, scaleY) => {\n        element.style['transform-origin'] = '0 0';\n        if (scaleX == 1.0 && scaleY == 1.0)\n            element.style.transform = null;\n        else\n            element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n    },\n    // A helper for fetching data from objects.\n    fetch: {\n        /**\n         * A helper function to the the object property value specified by the given key.\n         *\n         * @param {any} object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {any}    fallback - A default value if the key does not exist.\n         **/\n        val: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == 'undefined')\n                return fallback;\n            return obj[key];\n        },\n        /**\n         * A helper function to the the object property numeric value specified by the given key.\n         *\n         * @param {any}    object   - The object to get the property's value from. Must not be null.\n         * @param {string} key      - The key of the object property (the name).\n         * @param {number} fallback - A default value if the key does not exist.\n         * @return {number}\n         **/\n        num: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] === 'number')\n                return obj[key];\n            else {\n                try {\n                    return JSON.parse(obj[key]) * 1;\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property boolean value specified by the given key.\n         *\n         * @param {any}     object   - The object to get the property's value from. Must not be null.\n         * @param {string}  key      - The key of the object property (the name).\n         * @param {boolean} fallback - A default value if the key does not exist.\n         * @return {boolean}\n         **/\n        bool: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] == 'boolean')\n                return obj[key];\n            else {\n                try {\n                    return !!JSON.parse(obj[key]);\n                }\n                catch (e) {\n                    return fallback;\n                }\n            }\n        },\n        /**\n         * A helper function to the the object property function-value specified by the given key.\n         *\n         * @param {any}      object   - The object to get the property's value from. Must not be null.\n         * @param {string}   key      - The key of the object property (the name).\n         * @param {function} fallback - A default value if the key does not exist.\n         * @return {function}\n         **/\n        func: (obj, key, fallback) => {\n            if (!obj.hasOwnProperty(key))\n                return fallback;\n            if (typeof obj[key] !== 'function')\n                return fallback;\n            return obj[key];\n        }\n    },\n    /**\n     * Installs vertex listeners to the path's vertices so that controlpoints\n     * move with their path points when dragged.\n     *\n     * Bézier path points with attr.bezierAutoAdjust==true will have their\n     * two control points audo-updated if moved, too (keep path connections smooth).\n     *\n     * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n     **/\n    enableBezierPathAutoAdjust: (bezierPath) => {\n        for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n            // This should be wrapped into the BezierPath implementation.\n            bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                    return;\n                bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                false // update arc lengths\n                );\n                bezierPath.updateArcLengths();\n            });\n            if (i + 1 == bezierPath.bezierCurves.length) { // && !bezierPath.adjustCircular ) { \n                // Move last control point with the end point (if not circular)\n                bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                    if (!bezierPath.adjustCircular) {\n                        var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                        bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                    }\n                    bezierPath.updateArcLengths();\n                });\n            }\n        } // END for\n    }\n}; // END utils\n//# sourceMappingURL=PlotBoilerplate.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @version  1.0.4\n *\n * @file KeyHandler\n * @public\n **/\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nexport class KeyHandler {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    constructor(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    fireEvent(event, listeners) {\n        let hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    }\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireDownEvent(e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    }\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    firePressEvent(e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    }\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    fireUpEvent(e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    }\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    static key2code(key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    }\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    installListeners() {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = (e) => { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = (e) => { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = (e) => { _self.fireUpEvent(e, _self); });\n    }\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    releaseListeners() {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    }\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    down(key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    press(key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    up(key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    }\n    ;\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    isDown(key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    }\n}\n/**\n * Source:\n * https://keycode.info/\n */\nKeyHandler.KEY_CODES = {\n    'break': 3,\n    'backspace': 8,\n    // 'delete'\t : 8, // alternate: 46\n    'tab': 9,\n    'clear': 12,\n    'enter': 13,\n    'shift': 16,\n    'ctrl': 17,\n    'alt': 18,\n    'pause': 19,\n    // 'break'\t         : 19,\n    'capslock': 20,\n    'hangul': 21,\n    'hanja': 25,\n    'escape': 27,\n    'conversion': 28,\n    'non-conversion': 29,\n    'spacebar': 32,\n    'pageup': 33,\n    'pagedown': 34,\n    'end': 35,\n    'home': 36,\n    'leftarrow': 37,\n    'uparrow': 38,\n    'rightarrow': 39,\n    'downarrow': 40,\n    'select': 41,\n    'print': 42,\n    'execute': 43,\n    'printscreen': 44,\n    'insert': 45,\n    'delete': 46,\n    'help': 47,\n    '0': 48,\n    '1': 49,\n    '2': 50,\n    '3': 51,\n    '4': 52,\n    '5': 53,\n    '6': 54,\n    '7': 55,\n    '8': 56,\n    '9': 57,\n    ':': 58,\n    'semicolon (firefox)': 59,\n    'equals': 59,\n    '<': 60,\n    'equals (firefox)': 61,\n    'ß': 63,\n    '@ (firefox)': 64,\n    'a': 65,\n    'b': 66,\n    'c': 67,\n    'd': 68,\n    'e': 69,\n    'f': 70,\n    'g': 71,\n    'h': 72,\n    'i': 73,\n    'j': 74,\n    'k': 75,\n    'l': 76,\n    'm': 77,\n    'n': 78,\n    'o': 79,\n    'p': 80,\n    'q': 81,\n    'r': 82,\n    's': 83,\n    't': 84,\n    'u': 85,\n    'v': 86,\n    'w': 87,\n    'x': 88,\n    'y': 89,\n    'z': 90,\n    'windows': 91,\n    'leftcommand': 91,\n    'chromebooksearch': 91,\n    'rightwindowkey': 92,\n    'windowsmenu': 93,\n    'rightcommant': 93,\n    'sleep': 95,\n    'numpad0': 96,\n    'numpad1': 97,\n    'numpad2': 98,\n    'numpad3': 99,\n    'numpad4': 100,\n    'numpad5': 101,\n    'numpad6': 102,\n    'numpad7': 103,\n    'numpad8': 104,\n    'numpad9': 105,\n    'multiply': 106,\n    'add': 107,\n    'numpadperiod': 108,\n    'subtract': 109,\n    'decimalpoint': 110,\n    'divide': 111,\n    'f1': 112,\n    'f2': 113,\n    'f3': 114,\n    'f4': 115,\n    'f5': 116,\n    'f6': 117,\n    'f7': 118,\n    'f8': 119,\n    'f9': 120,\n    'f10': 121,\n    'f11': 122,\n    'f12': 123,\n    'f13': 124,\n    'f14': 125,\n    'f15': 126,\n    'f16': 127,\n    'f17': 128,\n    'f18': 129,\n    'f19': 130,\n    'f20': 131,\n    'f21': 132,\n    'f22': 133,\n    'f23': 134,\n    'f24': 135,\n    'numlock': 144,\n    'scrolllock': 145,\n    '^': 160,\n    '!': 161,\n    // '؛' \t : 162 // (arabic semicolon)\n    '#': 163,\n    '$': 164,\n    'ù': 165,\n    'pagebackward': 166,\n    'pageforward': 167,\n    'refresh': 168,\n    'closingparen': 169,\n    '*': 170,\n    '~+*': 171,\n    // 'home'\t         : 172,\n    'minus': 173,\n    // 'mute'           : 173,\n    // 'unmute'\t : 173,\n    'decreasevolumelevel': 174,\n    'increasevolumelevel': 175,\n    'next': 176,\n    'previous': 177,\n    'stop': 178,\n    'play/pause': 179,\n    'email': 180,\n    'mute': 181,\n    'unmute': 181,\n    //'decreasevolumelevel'\t182 // firefox\n    //'increasevolumelevel'\t183 // firefox\n    'semicolon': 186,\n    'ñ': 186,\n    'equal': 187,\n    'comma': 188,\n    'dash': 189,\n    'period': 190,\n    'forwardslash': 191,\n    'ç': 191,\n    'grave accent': 192,\n    //'ñ' 192,\n    'æ': 192,\n    'ö': 192,\n    '?': 193,\n    '/': 193,\n    '°': 193,\n    // 'numpadperiod'\t : 194, // chrome\n    'openbracket': 219,\n    'backslash': 220,\n    'closebracket': 221,\n    'å': 221,\n    'singlequote': 222,\n    'ø': 222,\n    'ä': 222,\n    '`': 223,\n    // 'left or right ⌘ key (firefox)'\t224\n    'altgr': 225,\n    // '< /git >, left back slash'\t226\n    'GNOME Compose Key': 230,\n    'XF86Forward': 233,\n    'XF86Back': 234,\n    'alphanumeric': 240,\n    'hiragana': 242,\n    'katakana': 242,\n    'half-width': 243,\n    'full-width': 243,\n    'kanji': 244,\n    'unlocktrackpad': 251,\n    'toggletouchpad': 255\n};\n//# sourceMappingURL=KeyHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @version  1.2.0\n *\n * @file MouseHandler\n * @public\n **/\nexport class XMouseEvent extends MouseEvent {\n}\nexport class XWheelEvent extends WheelEvent {\n}\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nexport class MouseHandler {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    constructor(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        this.mousePos = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        this.mousePos = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        const _self = this;\n        this.handlers['mousemove'] = (e) => {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = (e) => {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = (e) => {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = (e) => {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = (e) => {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    relPos(e) {\n        return { x: e.offsetX,\n            y: e.offsetY\n        };\n    }\n    ;\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    mkParams(e, eventName) {\n        const rel = this.relPos(e);\n        const xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    }\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    listenFor(eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    }\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    unlistenFor(eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    }\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    drag(callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    move(callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    up(callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    down(callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    click(callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    }\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    wheel(callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    }\n    ;\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    throwAlreadyInstalled(name) {\n        throw `This MouseHandler already has a '${name}' callback. To keep the code simple there is only room for one.`;\n    }\n    ;\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    destroy() {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    }\n}\n//# sourceMappingURL=MouseHandler.js.map","/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nexport class PBImage {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    constructor(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    toSVGString(options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    }\n    ;\n}\n//# sourceMappingURL=PBImage.js.map","/**\n * Draws elements into an SVG node.\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @version  1.0.0\n **/\nimport { CircleSector } from \"../../CircleSector\";\nimport { CubicBezierCurve } from \"../../CubicBezierCurve\";\nimport { Vertex } from \"../../Vertex\";\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class drawutilssvg {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    constructor(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex(0, 0).set(offset);\n        this.scale = new Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.gNode = this.createSVGNode('g');\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    ;\n    addStyleDefs(drawConfig) {\n        const nodeStyle = this.createSVGNode('style');\n        this.svgNode.appendChild(nodeStyle); // nodeDef);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        const keys = {\n            'polygon': 'Polygon',\n            'triangle': 'Triangle',\n            'ellipse': 'Ellipse',\n            'circle': 'Circle',\n            'circleSector': 'CircleSector',\n            'vertex': 'Vertex',\n            'line': 'Line',\n            'vector': 'Vector',\n            'image': 'Image'\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        const rules = [];\n        for (var k in keys) {\n            const className = keys[k];\n            const drawSettings = drawConfig[k];\n            rules.push(`.${className} { fill : none; stroke: ${drawSettings.color}; stroke-width: ${drawSettings.lineWidth}px }`);\n        }\n        nodeStyle.innerHTML = rules.join(\"\\n\");\n    }\n    ;\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    findElement(key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    }\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    createSVGNode(nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    }\n    ;\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    makeNode(nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        return node;\n    }\n    ;\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    _bindFillDraw(node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute('class', `${this.curClassName} ${className}`);\n        }\n        else {\n            node.setAttribute('class', className);\n        }\n        node.setAttribute('fill', this.fillShapes ? color : 'none');\n        node.setAttribute('stroke', this.fillShapes ? 'none' : color);\n        node.setAttribute('stroke-width', `${lineWidth || 1}`);\n        if (this.curId) {\n            node.setAttribute('id', `${this.curId}`); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.gNode.appendChild(node);\n        }\n        return node;\n    }\n    ;\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    setSize(canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute('viewBox', `0 0 ${this.canvasSize.width} ${this.canvasSize.height}`);\n        this.svgNode.setAttribute('width', `${this.canvasSize.width}`);\n        this.svgNode.setAttribute('height', `${this.canvasSize.height}`);\n    }\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    copyInstance(fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode);\n        return copy;\n    }\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentId(uid) {\n        this.curId = uid;\n    }\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    setCurrentClassName(className) {\n        this.curClassName = className;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    beginDrawCycle(renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n    }\n    ;\n    _x(x) { return this.offset.x + this.scale.x * x; }\n    _y(y) { return this.offset.y + this.scale.y * y; }\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    line(zA, zB, color, lineWidth) {\n        const line = this.makeNode('line');\n        line.setAttribute('x1', `${this._x(zA.x)}`);\n        line.setAttribute('y1', `${this._y(zA.y)}`);\n        line.setAttribute('x2', `${this._x(zB.x)}`);\n        line.setAttribute('y2', `${this._y(zB.y)}`);\n        return this._bindFillDraw(line, 'line', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    arrow(zA, zB, color, lineWidth) {\n        const node = this.makeNode('path');\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        const d = [\n            'M', this._x(zA.x), this._y(zA.y)\n        ];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push('L');\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'arrow', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    image(image, position, size) {\n        const node = this.makeNode('image');\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        const setImageSize = (image) => {\n            if (image.naturalWidth) {\n                const ratioX = size.x / image.naturalWidth;\n                const ratioY = size.y / image.naturalHeight;\n                node.setAttribute('width', `${image.naturalWidth * this.scale.x}`);\n                node.setAttribute('height', `${image.naturalHeight * this.scale.y}`);\n                node.setAttribute('display', null); // Dislay when loaded\n                node.setAttribute('transform', `translate(${this._x(position.x)} ${this._y(position.y)}) scale(${(ratioX)} ${(ratioY)})`);\n            }\n        };\n        image.addEventListener('load', (event) => { setImageSize(image); });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute('x', `${0}`);\n        node.setAttribute('y', `${0}`);\n        node.setAttribute('display', 'none'); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute('href', image.src);\n        return this._bindFillDraw(node, 'image', null, null);\n    }\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezier(startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        const node = this.makeNode('path');\n        // Draw curve\n        const d = [\n            'M', this._x(startPoint.x), this._y(startPoint.y),\n            'C', this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y)\n        ];\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'cubierBezier', color, lineWidth);\n    }\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    cubicBezierPath(path, color, lineWidth) {\n        const node = this.makeNode('path');\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        const d = [\n            'M', this._x(path[0].x), this._y(path[0].y)\n        ];\n        // Draw curve path\n        var startPoint, endPoint, startControlPoint, endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push('C', this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'cubicBezierPath', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handle(startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    }\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    handleLine(startPoint, endPoint) {\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    }\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    dot(p, color) {\n        const node = this.makeNode('line');\n        const d = [\n            'M', this._x(p.x), this._y(p.y),\n            'L', this._x(p.x + 1), this._y(p.y + 1)\n        ];\n        return this._bindFillDraw(node, 'dot', color, 1);\n    }\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    point(p, color) {\n        var radius = 3;\n        const node = this.makeNode('circle');\n        node.setAttribute('cx', `${this._x(p.x)}`);\n        node.setAttribute('cy', `${this._y(p.y)}`);\n        node.setAttribute('r', `${radius}`);\n        return this._bindFillDraw(node, 'point', color, 1);\n    }\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circle(center, radius, color, lineWidth) {\n        const node = this.makeNode('circle');\n        node.setAttribute('cx', `${this._x(center.x)}`);\n        node.setAttribute('cy', `${this._y(center.y)}`);\n        node.setAttribute('r', `${radius * this.scale.x}`); // y?\n        return this._bindFillDraw(node, 'circle', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleArc(center, radius, startAngle, endAngle, color, lineWidth) {\n        const node = this.makeNode('path');\n        const arcData = CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute('d', arcData.join(' '));\n        return this._bindFillDraw(node, 'circleArc', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    ellipse(center, radiusX, radiusY, color, lineWidth) {\n        const node = this.makeNode('ellipse');\n        node.setAttribute('cx', `${this._x(center.x)}`);\n        node.setAttribute('cy', `${this._y(center.y)}`);\n        node.setAttribute('rx', `${radiusX * this.scale.x}`);\n        node.setAttribute('ry', `${radiusY * this.scale.y}`);\n        return this._bindFillDraw(node, 'ellipse', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    square(center, size, color, lineWidth) {\n        const node = this.makeNode('rectangle');\n        node.setAttribute('x', `${this._x(center.x - size / 2.0)}`);\n        node.setAttribute('y', `${this._y(center.y - size / 2.0)}`);\n        node.setAttribute('width', `${size * this.scale.x}`);\n        node.setAttribute('height', `${size * this.scale.y}`);\n        return this._bindFillDraw(node, 'square', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    grid(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode('path');\n        const d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push('M', this._x(center.x + x), this._y(center.y + yMin));\n            d.push('L', this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push('M', this._x(center.x + xMin), this._y(center.y + y));\n            d.push('L', this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'grid', color, 1);\n    }\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    raster(center, width, height, sizeX, sizeY, color) {\n        const node = this.makeNode('path');\n        const d = [];\n        var cx = 0, cy = 0;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            cx++;\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                if (cx == 1)\n                    cy++;\n                // Draw a crosshair\n                d.push('M', this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push('L', this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push('M', this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push('L', this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'raster', color, 1);\n    }\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    diamondHandle(center, size, color) {\n        const node = this.makeNode('path');\n        const d = [\n            'M', this._x(center.x) - size / 2.0, this._y(center.y),\n            'L', this._x(center.x), this._y(center.y) - size / 2.0,\n            'L', this._x(center.x) + size / 2.0, this._y(center.y),\n            'L', this._x(center.x), this._y(center.y) + size / 2.0,\n            'Z'\n        ];\n        ;\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'diamondHandle', color, 1);\n    }\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    squareHandle(center, size, color) {\n        const node = this.makeNode('rect');\n        node.setAttribute('x', `${this._x(center.x) - size / 2.0}`);\n        node.setAttribute('y', `${this._y(center.y) - size / 2.0}`);\n        node.setAttribute('width', `${size}`);\n        node.setAttribute('height', `${size}`);\n        return this._bindFillDraw(node, 'squareHandle', color, 1);\n    }\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    circleHandle(center, radius, color) {\n        radius = radius || 3;\n        const node = this.makeNode('circle');\n        node.setAttribute('cx', `${this._x(center.x)}`);\n        node.setAttribute('cy', `${this._y(center.y)}`);\n        node.setAttribute('r', `${radius}`);\n        return this._bindFillDraw(node, 'circleHandle', color, 1);\n    }\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    crosshair(center, radius, color) {\n        const node = this.makeNode('path');\n        const d = [\n            'M', this._x(center.x) - radius, this._y(center.y),\n            'L', this._x(center.x) + radius, this._y(center.y),\n            'M', this._x(center.x), this._y(center.y) - radius,\n            'L', this._x(center.x), this._y(center.y) + radius\n        ];\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'crosshair', color, 0.5);\n    }\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polygon(polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    }\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    polyline(vertices, isOpen, color, lineWidth) {\n        const node = this.makeNode('path');\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        const d = [\n            'M', this._x(vertices[0].x), this._y(vertices[0].y)\n        ];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push('L', this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push('Z');\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'polyline', color, lineWidth || 1);\n    }\n    ;\n    /**\n     * Draw a text label at the given relative position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    text(text, x, y, options) {\n        options = options || {};\n        const color = options.color || 'black';\n        const node = this.makeNode('text');\n        node.setAttribute('x', `${this._x(x)}`);\n        node.setAttribute('y', `${this._x(y)}`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, 'text', color, 1);\n    }\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    label(text, x, y, rotation) {\n        const node = this.makeNode('text');\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute('transform', `translate(${this.offset.x},${this.offset.y}), rotate(${rotation / Math.PI * 180})`);\n        node.innerHTML = text;\n        return this._bindFillDraw(node, 'label', 'black', null);\n    }\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    clear(color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.gNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.gNode.childNodes[i];\n            this.cache.set(child.getAttribute('id'), child);\n        }\n        this.removeAllChildNodes();\n        // Add a covering rect with the given background color\n        this.curId = 'background';\n        const node = this.makeNode('rect');\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute('x', '0');\n        node.setAttribute('y', '0');\n        node.setAttribute('width', `${this.canvasSize.width}`);\n        node.setAttribute('height', `${this.canvasSize.height}`);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute('fill', typeof color === \"undefined\" ? 'none' : color);\n        // Clear the current ID again\n        this.curId = null;\n        // return node;\n    }\n    ;\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    removeAllChildNodes() {\n        while (this.gNode.firstChild) {\n            this.gNode.removeChild(this.gNode.lastChild);\n        }\n    }\n    ;\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    static createSvg() {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    }\n    ;\n}\ndrawutilssvg.HEAD_XML = [\n    '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n    '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n    '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n    ''\n].join(\"\\n\");\n//# sourceMappingURL=drawutilssvg.js.map","/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version  1.1.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nimport { UIDGenerator } from \"./UIDGenerator\";\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nexport class VEllipse {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    constructor(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    toSVGString(options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=VEllipse.js.map","// ? https://www.pluralsight.com/guides/react-typescript-module-create\nimport { BezierPath } from \"./BezierPath\";\nimport { Bounds } from \"./Bounds\";\nimport { Circle } from \"./Circle\";\nimport { CircleSector } from \"./CircleSector\";\nimport { CubicBezierCurve } from \"./CubicBezierCurve\";\nimport { drawutils } from \"./draw\";\nimport { drawutilsgl } from \"./drawgl\";\nimport { geomutils } from \"./geomutils\";\nimport { Grid } from \"./Grid\";\nimport * as interf from \"./interfaces\";\nimport { KeyHandler } from \"./KeyHandler\";\nimport { Line } from \"./Line\";\nimport { MouseHandler } from \"./MouseHandler\";\nimport { PBImage } from \"./PBImage\";\nimport { PlotBoilerplate } from \"./PlotBoilerplate\";\nimport { Polygon } from \"./Polygon\";\nimport { SVGBuilder } from \"./SVGBuilder\";\nimport { Triangle } from \"./Triangle\";\nimport { UIDGenerator } from \"./UIDGenerator\";\nimport { Vector } from \"./Vector\";\nimport { VEllipse } from \"./VEllipse\";\nimport { Vertex } from \"./Vertex\";\nimport { VertexAttr } from \"./VertexAttr\";\nimport { VertexListeners } from \"./VertexListeners\";\nimport { VertTuple } from \"./VertTuple\";\nimport { drawutilssvg } from \"./utils/helpers/drawutilssvg\";\nexport default {\n    BezierPath,\n    Bounds,\n    Circle,\n    CircleSector,\n    CubicBezierCurve,\n    drawutils,\n    drawutilsgl,\n    geomutils,\n    Grid,\n    ...interf,\n    KeyHandler,\n    Line,\n    MouseHandler,\n    PBImage,\n    PlotBoilerplate,\n    Polygon,\n    SVGBuilder,\n    Triangle,\n    UIDGenerator,\n    Vector,\n    VEllipse,\n    Vertex,\n    VertexAttr,\n    VertexListeners,\n    VertTuple,\n    drawutilssvg\n};\n//# sourceMappingURL=module.js.map","/**\n * Todos:\n *  + use a Drawable interface\n *  + use a SVGSerializable interface\n *\n * @require Vertex\n *\n * @deprecated THIS CLASS IS DEPRECATED. Please use the new `drawutilssvg` instead.\n *\n * @author   Ikaros Kappler\n * @date     2018-12-04\n * @modified 2019-11-07 Added the 'Triangle' style class.\n * @modified 2019-11-13 Added the <?xml ...?> tag.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-12-17 Added Circle and CircleSection style classes.\n * @modified 2021-01-26 DEPRECATION\n * @version  1.0.5\n **/\n/**\n * @classdesc A default SVG builder.\n *\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nexport class SVGBuilder {\n    /**\n     * @constructor\n     **/\n    constructor() {\n        console.warn(\"THIS CLASS IS DEPRECATED. Please use the new 'drawutilssvg' instead.\");\n    }\n    ;\n    /**\n     *  Builds the SVG code from the given list of drawables.\n     *\n     * @param {object[]} drawables - The drawable elements (should implement Drawable) to be converted (each must have a toSVGString-function).\n     * @param {object}   options  - { canvasSize, zoom, offset }\n     * @return {string}\n     **/\n    build(drawables, options) {\n        var nl = '\\n';\n        var indent = '  ';\n        var buffer = [];\n        buffer.push('<?xml version=\"1.0\" encoding=\"UTF-8\"?>' + nl);\n        buffer.push('<svg width=\"' + options.canvasSize.width + '\" height=\"' + options.canvasSize.height + '\"');\n        buffer.push(' viewBox=\"');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push('0');\n        buffer.push(' ');\n        buffer.push(options.canvasSize.width.toString());\n        buffer.push(' ');\n        buffer.push(options.canvasSize.height.toString());\n        buffer.push('\"');\n        buffer.push(' xmlns=\"http://www.w3.org/2000/svg\">' + nl);\n        buffer.push(indent + '<defs>' + nl);\n        buffer.push(indent + '<style>' + nl);\n        buffer.push(indent + indent + ' .Vertex { fill : blue; stroke : none; } ' + nl);\n        buffer.push(indent + indent + ' .Triangle { fill : none; stroke : turquoise; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Polygon { fill : none; stroke : green; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .BezierPath { fill : none; stroke : blue; stroke-width : 2px; } ' + nl);\n        buffer.push(indent + indent + ' .VEllipse { fill : none; stroke : black; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Line { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .Circle { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + indent + ' .CircleSector { fill : none; stroke : purple; stroke-width : 1px; } ' + nl);\n        buffer.push(indent + '</style>' + nl);\n        buffer.push(indent + '</defs>' + nl);\n        buffer.push(indent + '<g class=\"main-g\"');\n        if (options.zoom || options.offset) {\n            buffer.push(' transform=\"');\n            if (options.zoom)\n                buffer.push('scale(' + options.zoom.x + ',' + options.zoom.y + ')');\n            if (options.offset)\n                buffer.push(' translate(' + options.offset.x + ',' + options.offset.y + ')');\n            buffer.push('\"');\n        }\n        buffer.push('>' + nl);\n        for (var i in drawables) {\n            var d = drawables[i];\n            if (typeof d.toSVGString == 'function') {\n                buffer.push(indent + indent);\n                buffer.push(d.toSVGString({ 'className': d.className }));\n                buffer.push(nl);\n            }\n            else {\n                console.warn('Unrecognized drawable type has no toSVGString()-function. Ignoring: ' + d.className);\n            }\n        }\n        buffer.push(indent + '</g>' + nl);\n        buffer.push('</svg>' + nl);\n        return buffer.join('');\n    }\n    ;\n}\n//# sourceMappingURL=SVGBuilder.js.map"],"names":["UIDGenerator","[object Object]","current","VertexAttr","key","this","draggable","selectable","isSelected","visible","model","VertexListeners","vertex","click","drag","dragStart","dragEnd","listener","_addListener","_removeListener","e","_fireEvent","_self","listeners","ve","i","params","newListener","push","oldListener","length","splice","Vertex","x","y","className","uid","next","tuple","NaN","attr","amountX","amountY","eqX","Math","abs","EPSILON","eqY","vert","sqrt","pow","origin","a","PI","atan2","factor","center","angle","sub","len","distance","ZERO","cos","sin","add","scalar","round","options","buffer","join","viewPort","min","random","max","utils","buildArrowHead","zA","zB","headlen","scaleX","scaleY","vertices","Polygon","isOpen","index","inside","j","xi","yi","xj","yj","area","signedArea","scale","console","log","rotate","Bounds","computeFromVertices","qbezier","cc0","cc1","edgeCenter","limit","t","qdata","toQuadraticBezierData","threshold","cbezier","b","c","aCenter","bCenter","a2","b0","toCubicBezierData","pathdata","BezierPath","fromArray","toString","total","l","sum","n","width","height","xMin","xMax","yMin","yMax","VertTuple","factory","amount","set","newA","diff","difference","line","v0","clone","v1","denominator","p","l2","vtutils","dist2","point","insideBoundsOnly","getClosestT","vertAt","v","w","Vector","vertA","vertB","super","tmp","numerator1","numerator2","CubicBezierCurve","startPoint","endPoint","startControlPoint","endControlPoint","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","curveIntervals","segmentCache","segmentLengths","arcLength","updateArcLengths","pointID","moveAmount","moveControlPoint","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","pointA","pointB","curveStep","newLength","tmpLength","getPointAt","result","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","minIndex","minDist","tDiff","dist","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","id","Error","u","d","t2","nt2","tX","tY","startVec","getTangentAt","endVec","inv","convertU2T","getPerpendicularAt","tangentVector","curve","equals","obj","prettyFormat","jsonString","JSON","parse","fromObject","arr","Array","isArray","pathPoints","totalArcLength","adjustCircular","bezierCurves","adjustSuccessorControlPoint","getLength","curveIndex","anchor","scaling","curveT","uMin","uTemp","relativeU","getPoint","getTangent","warn","getPerpendicular","uResult","_locateUIndex","bCurve","uPart","path","uBefore","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","curves","reverse","getCurveAt","moveCurvePoint","adjustPredecessorControlPoint","getCurveCount","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","neighbourHandleBounds","mainHandleLength","neighbourHandleLength","getBounds","undefined","toSVGPathData","toJSON","bPath","lastCurve","isInstance","digits","toFixed","listJSON","pointArray","bezierPath","Line","isNaN","Circle","radius","circle","getClosestPoint","circleUtils","perp","p0","p1","h","p2","x3","y3","x4","y4","CircleSector","startAngle","endAngle","data","circleSectorUtils","describeSVGArc","polarToCartesian","centerX","centerY","moveToStart","end","start","firstHalf","secondHalf","concat","largeArcFlag","pathData","drawutils","context","fillShapes","ctx","offset","renderTime","color","lineWidth","save","beginPath","moveTo","lineTo","strokeStyle","stroke","restore","_fillOrDraw","image","position","size","complete","naturalWidth","drawImage","naturalHeight","closePath","fillStyle","fill","cubicBezier","bezierCurveTo","controlPoint","quadraticCurveTo","square","arc","ellipse","asSegment","radiusX","radiusY","rect","sizeX","sizeY","ceil","polygon","polyline","setLineDash","text","fillText","strokeText","rotation","translate","clearRect","canvas","fillRect","drawutilsgl","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","copy","curId","Float32Array","_x2rel","_y2rel","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","viewport","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","Triangle","calcCircumcircle","centroid","getCentroid","tri","vert1","vert2","A","B","C","D","E","F","G","dx","dy","bounds","cx","cy","radius_squared","min3","max3","pointIsInTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","intersection","circleIntersA","circleIntersB","circleIntersC","getIncircularTriangle","getCircumcircle","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","pA","pB","pC","triangle","lineAB","lineAC","insideAngle","clockwise","determinant","scaleFactor","Grid","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","_a","KeyHandler","downListeners","pressListeners","upListeners","keyStates","element","globalThis","trackAllKeys","trackAll","installListeners","event","hasListener","lis","keyCode","handler","fireEvent","KEY_CODES","addEventListener","_keyDownListener","fireDownEvent","_keyPressListener","firePressEvent","_keyUpListener","fireUpEvent","removeEventListener","key2code","break","backspace","tab","enter","shift","ctrl","alt","pause","capslock","hangul","hanja","escape","conversion","non-conversion","spacebar","pageup","pagedown","home","leftarrow","uparrow","rightarrow","downarrow","select","print","execute","printscreen","insert","delete","help","0","1","2","3","4","5","6","7","8","9",":","semicolon (firefox)","<","equals (firefox)","ß","@ (firefox)","f","g","k","m","o","q","r","z","windows","leftcommand","chromebooksearch","rightwindowkey","windowsmenu","rightcommant","sleep","numpad0","numpad1","numpad2","numpad3","numpad4","numpad5","numpad6","numpad7","numpad8","numpad9","multiply","numpadperiod","subtract","decimalpoint","divide","f1","f2","f3","f4","f5","f6","f7","f8","f9","f10","f11","f12","f13","f14","f15","f16","f17","f18","f19","f20","f21","f22","f23","f24","numlock","scrolllock","^","!","#","$","ù","pagebackward","pageforward","refresh","closingparen","*","~+*","minus","decreasevolumelevel","increasevolumelevel","previous","stop","play/pause","email","mute","unmute","semicolon","ñ","equal","comma","dash","period","forwardslash","ç","grave accent","æ","ö","?","/","°","openbracket","backslash","closebracket","å","singlequote","ø","ä","`","altgr","GNOME Compose Key","XF86Forward","XF86Back","alphanumeric","hiragana","katakana","half-width","full-width","kanji","unlocktrackpad","toggletouchpad","MouseHandler","name","mouseDownPos","mouseDragPos","mousePos","mouseButton","installed","handlers","mousemove","mkParams","relPos","mouseup","button","mousedown","wheel","offsetX","offsetY","eventName","rel","xEvent","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","callback","throwAlreadyInstalled","listenFor","unlistenFor","PBImage","upperLeft","lowerRight","drawutilssvg","svgNode","canvasSize","drawConfig","isSecondary","gNode","cache","Map","setSize","addStyleDefs","createSVGNode","appendChild","nodeStyle","keys","circleSector","vector","rules","drawSettings","innerHTML","nodeName","node","get","toUpperCase","document","createElementNS","findElement","curClassName","setAttribute","parentNode","makeNode","_x","_y","_bindFillDraw","setImageSize","ratioX","ratioY","src","arcData","childNodes","child","getAttribute","removeAllChildNodes","firstChild","removeChild","lastChild","HEAD_XML","VEllipse","axis","PlotBoilerplate","config","bezierAutoAdjust","fetch","fullSize","val","fitToParent","bool","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","handleLine","selectedVertex","grid","canvasElement","querySelector","tagName","toLowerCase","eventCatcher","getContext","draw","copyInstance","parentElement","createElement","style","left","top","cursor","body","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","pb","error","tosvgDraw","tosvgFill","beginDrawCycle","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","pixelRatio","devicePixelRatio","canvasCenter","canvasRatio","ratio","addXY","setOffset","newUniformZoom","setZoom","con","setCSSscale","drawable","addDragListener","enableBezierPathAutoAdjust","removeWithVertices","removeVertex","keepVertices","Boolean","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","setCurrentId","raster","crosshair","setCurrentClassName","drawDrawable","diamondHandle","_handleColor","circleHandle","circleArc","arrow","squareHandle","Date","getTime","drawDrawables","drawSelectPolygon","elem","propName","parseFloat","getComputedStyle","getPropertyValue","container","display","padding","getFProp","border","pl","pr","pt","bl","br","bt","bb","clientWidth","clientHeight","_setSize","HTMLCanvasElement","SVGElement","innerWidth","documentElement","innerHeight","space","getAvailableContainerSpace","containsVert","tolerance","Draggable","VERTEX","setVIndex","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","isDown","paths","pindex","cindex","getPointByID","pid","which","fireDragStartEvent","oldDragAmount","fireDragEvent","handleClick","fireDragEndEvent","zoomStep","we","deltaY","preventDefault","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","down","mouseDownHandler","mouseDragHandler","up","mouseUpHandler","mouseWheelHandler","getBoundingClientRect","AF","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch","touchStart","touches","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","touchMove","stopPropagation","trans","deltaX","touchEnd","touchCancel","multipointStart","multipointEnd","pinch","fingerA","item","fingerB","zoom","clearSelection","selectVerticesInPolygon","createGUI","safeMergeByKeys","extension","hasOwnProperty","typ","transform","fallback","locateCurveByStartPoint","locateCurveByStartControlPoint","locateCurveByEndControlPoint","locateCurveByEndPoint","interf","SVGBuilder","nl","indent","toSVGString"],"mappings":"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"}