{"version":3,"sources":["webpack://plotboilerplate/../AlloyFinger-Typescript/dist/alloy_finger.js","webpack://plotboilerplate/./src/js/BezierPath.js","webpack://plotboilerplate/./src/js/Bounds.js","webpack://plotboilerplate/./src/js/Circle.js","webpack://plotboilerplate/./src/js/CircleSector.js","webpack://plotboilerplate/./src/js/CubicBezierCurve.js","webpack://plotboilerplate/./src/js/Grid.js","webpack://plotboilerplate/./src/js/KeyHandler.js","webpack://plotboilerplate/./src/js/Line.js","webpack://plotboilerplate/./src/js/MouseHandler.js","webpack://plotboilerplate/./src/js/PBImage.js","webpack://plotboilerplate/./src/js/PlotBoilerplate.js","webpack://plotboilerplate/./src/js/Polygon.js","webpack://plotboilerplate/./src/js/Triangle.js","webpack://plotboilerplate/./src/js/UIDGenerator.js","webpack://plotboilerplate/./src/js/VEllipse.js","webpack://plotboilerplate/./src/js/Vector.js","webpack://plotboilerplate/./src/js/VertTuple.js","webpack://plotboilerplate/./src/js/Vertex.js","webpack://plotboilerplate/./src/js/VertexAttr.js","webpack://plotboilerplate/./src/js/VertexListeners.js","webpack://plotboilerplate/./src/js/draw.js","webpack://plotboilerplate/./src/js/drawgl.js","webpack://plotboilerplate/./src/js/geomutils.js","webpack://plotboilerplate/./src/js/utils/helpers/drawutilssvg.js","webpack://plotboilerplate/webpack/bootstrap","webpack://plotboilerplate/./src/js/entry.js"],"names":["exports","unwrapExports","x","__esModule","Object","prototype","hasOwnProperty","call","createCommonjsModule","fn","module","alloy_finger","defineProperty","value","AlloyFinger","getLen","v","Math","sqrt","y","getRotateAngle","v1","v2","angle","mr","r","dot","acos","getAngle","cross","PI","HandlerAdmin","el","this","handlers","add","handler","push","del","i","length","splice","dispatch","arguments$1","arguments","_args","_i","len","apply","wrapFunc","handlerAdmin","option","element","document","querySelector","start","bind","move","end","cancel","addEventListener","preV","pinchStartLen","zoom","isDoubleTap","noop","rotate","touchStart","multipointStart","multipointEnd","pinch","swipe","tap","doubleTap","longTap","singleTap","pressMove","twoFingerPressMove","touchMove","touchEnd","touchCancel","_cancelAllHandler","cancelAll","globalThis","delta","last","now","tapTimeout","singleTapTimeout","longTapTimeout","swipeTimeout","x1","x2","y1","y2","preTapPosition","evt","touches","_self","Date","pageX","pageY","abs","clearTimeout","_cancelLongTap","_cancelSingleTap","_preventTap","setTimeout","event","afEvent","currentX","currentY","sCurrentX","sCurrentY","sx2","deltaX","deltaY","sy2","movedX","movedY","preventDefault","changedTouches","self","direction","_swipeDirection","on","off","destroy","removeEventListener","default","js","enumerable","get","index","js_1","factory","BezierPath","Bounds_1","CubicBezierCurve_1","UIDGenerator_1","Vertex_1","pathPoints","className","START_POINT","START_CONTROL_POINT","END_CONTROL_POINT","END_POINT","uid","UIDGenerator","next","totalArcLength","adjustCircular","bezierCurves","addCurve","curve","startPoint","endPoint","adjustSuccessorControlPoint","getLength","locateCurveByStartPoint","point","equals","locateCurveByEndPoint","locateCurveByStartControlPoint","startControlPoint","locateCurveByEndControlPoint","endControlPoint","updateArcLengths","getCurveCount","getCurveAt","curveIndex","translate","amount","getStartPoint","getStartControlPoint","getEndControlPoint","getEndPoint","scale","anchor","scaling","center","getClosestT","p","minIndex","minDist","dist","curveT","uMin","u","getPointAt","distance","max","min","getPoint","console","log","uTemp","clone","relativeU","t","getTangentAt","getTangent","warn","getPerpendicularAt","getPerpendicular","uResult","_locateUIndex","bCurve","uPart","path","uBefore","getSubPathAt","startT","endT","startU","endU","uStartResult","uEndResult","firstT","lastT","firstCurve","getSubCurveAt","fromArray","curves","reverse","moveCurvePoint","pointID","moveAmount","adjustPredecessorControlPoint","obtainHandleLength","mainCurve","neighbourCurve","adjustNeighbourControlPoint","_mainCurve","mainPoint","mainControlPoint","neighbourPoint","neighbourControlPoint","obtainHandleLengths","_updateArcLengths","mainHandleBounds","Vertex","neighbourHandleBounds","mainHandleLength","pow","neighbourHandleLength","set","getBounds","b","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","Bounds","undefined","toSVGString","options","buffer","c","toSVGPathData","join","toJSON","prettyFormat","fromJSON","jsonString","obj","JSON","parse","Array","isArray","arr","bPath","lastCurve","CubicBezierCurve","isInstance","fromObject","toReducedListRepresentation","digits","toFixed","fromReducedListRepresentation","listJSON","pointArray","bezierPath","Polygon_1","width","height","toPolygon","Polygon","computeFromVertices","vertices","vert","xMin","xMax","yMin","yMax","Circle","Line_1","Vector_1","radius","containsCircle","circle","lineDistance","line","getClosestPoint","vertAt","circleUtils","tangentAt","pointA","Vector","perp","circleIntersection","p0","p1","d","a","h","p2","x3","y3","x4","y4","Line","cos","sin","CircleSector","startAngle","endAngle","data","circleSectorUtils","describeSVGArc","polarToCartesian","centerX","centerY","moveToStart","firstHalf","secondHalf","concat","largeArcFlag","pathData","curveIntervals","segmentCache","segmentLengths","arcLength","moveControlPoint","tmp","pointB","curveStep","tmpLength","newLength","result","tPrev","tNext","iteration","locateIntervalByDistance","tStart","tEnd","stepCount","tDiff","getPointByID","id","Error","t2","nt2","tX","tY","startVec","endVec","inv","convertU2T","tangentVector","toString","Grid","size","utils","baseLog","base","num","mapRasterScale","adjustFactor","gf","floor","KeyHandler","downListeners","pressListeners","upListeners","keyStates","trackAllKeys","trackAll","installListeners","fireEvent","listeners","hasListener","lis","keyCode","listener","fireDownEvent","e","firePressEvent","fireUpEvent","key2code","key","KEY_CODES","_keyDownListener","_keyPressListener","_keyUpListener","releaseListeners","down","press","up","isDown","extendStatics","__extends","setPrototypeOf","__proto__","__","constructor","create","VertTuple_1","_super","_this","intersection","denominator","numerator1","numerator2","isNaN","VertTuple","MouseHandler","XWheelEvent","XMouseEvent","MouseEvent","WheelEvent","name","mouseDownPos","mouseDragPos","mouseButton","installed","mousemove","mkParams","drag","relPos","mouseup","button","mousedown","click","wheel","offsetX","offsetY","eventName","rel","xEvent","params","isTouchEvent","pos","leftButton","middleButton","rightButton","draggedFrom","wasDragged","dragAmount","listenFor","unlistenFor","callback","throwAlreadyInstalled","PBImage","image","upperLeft","lowerRight","alloyfinger_typescript_1","draw_1","drawgl_1","drawutilssvg_1","BezierPath_1","Circle_1","CircleSector_1","Grid_1","KeyHandler_1","MouseHandler_1","PBImage_1","Triangle_1","VEllipse_1","VertexAttr_1","PlotBoilerplate","config","VertexAttr","model","bezierAutoAdjust","renderTime","selectable","isSelected","draggable","visible","canvas","f","fetch","fullSize","val","fitToParent","bool","scaleX","scaleY","rasterGrid","rasterScaleX","rasterScaleY","rasterAdjustFactor","drawOrigin","autoAdjustOffset","offsetAdjustXPercent","offsetAdjustYPercent","backgroundColor","redrawOnResize","defaultCanvasWidth","DEFAULT_CANVAS_WIDTH","defaultCanvasHeight","DEFAULT_CANVAS_HEIGHT","canvasWidthFactor","canvasHeightFactor","cssScaleX","cssScaleY","cssUniformScale","saveFile","hooks","setToRetina","_setToRetina","autoDetectRetina","enableSVGExport","preClear","func","preDraw","postDraw","enableMouse","enableTouch","enableKeys","enableMouseWheel","enableGL","drawConfig","drawVertices","drawBezierHandleLines","drawBezierHandlePoints","drawHandleLines","drawHandlePoints","drawGrid","bezier","color","lineWidth","handleLine","polygon","triangle","ellipse","circleSector","vertex","selectedVertex","vector","grid","canvasSize","canvasElement","tagName","toLowerCase","eventCatcher","drawutilsgl","ctx","getContext","draw","fill","copyInstance","drawutils","drawutilssvg","parentElement","createElement","style","position","left","top","cursor","appendChild","body","selectPolygon","draggedElements","drawables","_saveFile","resizeCanvas","installInputListeners","updateCSSscale","redraw","focus","_a","pb","svgNode","createElementNS","tosvgDraw","offset","tosvgFill","beginDrawCycle","clear","drawAll","svgCode","XMLSerializer","serializeToString","blob","Blob","type","_saveAs","error","pixelRatio","devicePixelRatio","fitToView","bounds","canvasCenter","canvasRatio","ratio","addXY","setOffset","newUniformZoom","setZoom","setConsole","con","setCSSscale","drawable","VEllipse","axis","addDragListener","Triangle","attr","enableBezierPathAutoAdjust","remove","removeWithVertices","removeVertex","removeAll","keepVertices","Boolean","getVertexNear","pixelPosition","pixelTolerance","locatePointNear","transformMousePosition","typeName","vindex","gScale","gSize","cs","round","setCurrentId","raster","crosshair","_handleColor","drawDrawables","setCurrentClassName","drawDrawable","cubicBezier","diamondHandle","circleHandle","polyline","circleArc","arrow","sub","drawSelectPolygon","squareHandle","getTime","clearSelection","viewport","getFProp","elem","propName","parseFloat","getComputedStyle","getPropertyValue","getAvailableContainerSpace","container","parentNode","display","padding","border","pl","pr","pt","bl","br","bt","bb","w","clientWidth","clientHeight","_setSize","HTMLCanvasElement","SVGElement","setAttribute","setSize","innerWidth","documentElement","innerHeight","space","selectVerticesInPolygon","containsVert","tolerance","Draggable","VERTEX","setVIndex","handleClick","DEFAULT_CLICK_TOLERANCE","fireClickEvent","keyHandler","paths","pindex","cindex","pid","revertMousePosition","getDraggedElementCount","mouseDownHandler","which","fireDragStartEvent","mouseDragHandler","oldDragAmount","fireDragEvent","mouseUpHandler","fireDragEndEvent","mouseWheelHandler","zoomStep","we","newOffset","zoomFactorX","zoomFactorY","interactionPos","oldPos","newPos","newOffsetX","newOffsetY","relPos_1","getBoundingClientRect","touchMovePos","touchDownPos","draggedElement","multiTouchStartScale","clearTouch_1","clientX","clientY","DEFAULT_TOUCH_TOLERANCE","draggingVertex","fakeEvent","stopPropagation","trans","diff","difference","fingerA","item","fingerB","createGUI","class_1","isVertex","safeMergeByKeys","extension","k","typ","transform","fallback","isOpen","addVertex","getVertexAt","inside","j","xi","yi","xj","yj","area","signedArea","isClockwise","factor","toQuadraticBezierData","qbezier","cc0","cc1","edgeCenter","limit","toQuadraticBezierSVGString","qdata","toCubicBezierData","threshold","cbezier","aCenter","bCenter","a2","b0","toCubicBezierSVGString","toCubicBezierPath","pathdata","total","l","sum","n","geomutils_1","calcCircumcircle","getArea","getCentroid","scaleToCentroid","centroid","getCircumcircle","isAdjacent","tri","getThirdVertex","vert1","vert2","dx","dy","A","B","C","D","E","F","G","EPSILON","cx","cy","radius_squared","inCircumcircle","min3","max3","determinant","containsPoint","pointIsInTriangle","getIncircularTriangle","lineA","lineB","lineC","bisector1","geomutils","nsectAngle","bisector2","getIncircle","getIncenter","p0x","p0y","p1x","p1y","p2x","p2y","px","py","s","current","vertA","vertB","inverse","buildArrowHead","zA","zB","headlen","atan2","setLength","normalize","moveTo","newA","v0","colinear","l2","vtutils","dist2","hasPoint","insideBoundsOnly","pointDistance","VertexListeners_1","tuple","NaN","VertexListeners","setX","setY","invX","invY","amountX","amountY","addX","addY","eqX","eqY","origin","ZERO","multiplyScalar","scalar","randomVertex","viewPort","random","dragStart","dragEnd","addClickListener","_addListener","removeClickListener","_removeListener","removeDragListener","addDragStartListener","removeDragStartListener","addDragEndListener","removeDragEndListener","_fireEvent","ve","newListener","oldListener","context","fillShapes","save","beginPath","lineTo","strokeStyle","stroke","restore","_fillOrDraw","complete","naturalWidth","drawImage","naturalHeight","rect","closePath","fillStyle","bezierCurveTo","quadraticBezier","controlPoint","quadraticCurveTo","cubicBezierPath","handle","square","arc","asSegment","radiusX","radiusY","sizeX","sizeY","ceil","setLineDash","text","fillText","strokeText","label","rotation","clearRect","fillRect","gl","_zindex","glutils","GLU","_vertShader","compileShader","vertCode","VERTEX_SHADER","_fragShader","fragCode","FRAGMENT_SHADER","_program","makeProgram","vertex_buffer","createBuffer","_x2rel","_y2rel","copy","curId","Float32Array","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","coord","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","uRotationVector","getUniformLocation","uniform2fv","drawArrays","LINES","TRIANGLE_FAN","clearColor","enable","DEPTH_TEST","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","verts","vbuffer","shaderCode","shaderType","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","vertShader","fragShader","program","createProgram","attachShader","linkProgram","useProgram","detachShader","pA","pB","pC","lineAB","lineAC","insideAngle","clockwise","scaleFactor","isSecondary","gNode","cache","Map","addStyleDefs","createSVGNode","nodeStyle","keys","rules","drawSettings","innerHTML","findElement","nodeName","node","toUpperCase","delete","makeNode","_bindFillDraw","curClassName","_x","_y","setImageSize","ratioX","ratioY","src","arcData","childNodes","child","getAttribute","removeAllChildNodes","lastChild","removeChild","createSvg","HEAD_XML","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"plotboilerplate.browser.min.js","sourcesContent":["/**\n * alloy_finger v0.1.17\n * super tiny size multi-touch gestures library for the web. Cloned from alloyfinger\n *\n * @author dntzhang\n * @license MIT\n * @preserve\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.AlloyFinger = {}));\n}(this, (function (exports) { 'use strict';\n\n\tfunction unwrapExports (x) {\n\t\treturn x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;\n\t}\n\n\tfunction createCommonjsModule(fn, module) {\n\t\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n\t}\n\n\tvar alloy_finger = createCommonjsModule(function (module, exports) {\n\t/* Port from AlloyFinger v0.1.15\n\t * Original by dntzhang\n\t * Typescript port by Ikaros Kappler\n\t * Github: https://github.com/IkarosKappler/AlloyFinger-Typescript\n\t *\n\t * @date    2021-02-10 (Typescript port)\n\t * @version 0.1.15\n\t */\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.AlloyFinger = void 0;\n\t/**\n\t * Tiny math function to calculate the length of a vector in euclidean space.\n\t *\n\t * @param {XYCoords} v - The vector in {x,y} notation.\n\t * @return {number} The length of the vector.\n\t */\n\tvar getLen = function (v) {\n\t    return Math.sqrt(v.x * v.x + v.y * v.y);\n\t};\n\t/**\n\t * Tiny math function to calculate the dot product of two vectors.\n\t *\n\t * @param {XYCoords} v1 - The first vector in {x,y} notation.\n\t * @param {XYCoords} v2 - The second vector in {x,y} notation.\n\t * @return {number} The dot product of both vectors.\n\t */\n\tvar dot = function (v1, v2) {\n\t    return v1.x * v2.x + v1.y * v2.y;\n\t};\n\t/**\n\t * Tiny math function to calculate the angle between two vectors.\n\t *\n\t * @param {XYCoords} v1 - The first vector in {x,y} notation.\n\t * @param {XYCoords} v2 - The second vector in {x,y} notation.\n\t * @return {number} The angle (in radians) between the two vectors.\n\t */\n\tvar getAngle = function (v1, v2) {\n\t    var mr = getLen(v1) * getLen(v2);\n\t    if (mr === 0)\n\t        { return 0; }\n\t    var r = dot(v1, v2) / mr;\n\t    if (r > 1)\n\t        { r = 1; }\n\t    return Math.acos(r);\n\t};\n\t/**\n\t * Tiny math function to calculate the cross product of two vectors.\n\t *\n\t * @param {XYCoords} v1 - The first vector in {x,y} notation.\n\t * @param {XYCoords} v2 - The second vector in {x,y} notation.\n\t * @return {number} The cross product of both vectors.\n\t */\n\tvar cross = function (v1, v2) {\n\t    return v1.x * v2.y - v2.x * v1.y;\n\t};\n\t/**\n\t * Tiny math function to calculate the rotate-angle (in degrees) for two vectors.\n\t *\n\t * @param {XYCoords} v1 - The first vector in {x,y} notation.\n\t * @param {XYCoords} v2 - The second vector in {x,y} notation.\n\t * @return {number} The rotate-angle in degrees for the two vectors.\n\t */\n\tvar getRotateAngle = function (v1, v2) {\n\t    var angle = getAngle(v1, v2);\n\t    if (cross(v1, v2) > 0) {\n\t        angle *= -1;\n\t    }\n\t    return angle * 180 / Math.PI;\n\t};\n\t/**\n\t * A HandlerAdmin holds all the added event handlers for one kind of event type.\n\t */\n\tvar HandlerAdmin = /** @class */ (function () {\n\t    function HandlerAdmin(el) {\n\t        this.handlers = [];\n\t        this.el = el;\n\t    }\n\t    HandlerAdmin.prototype.add = function (handler) {\n\t        this.handlers.push(handler);\n\t    };\n\t    HandlerAdmin.prototype.del = function (handler) {\n\t        if (!handler)\n\t            { this.handlers = []; }\n\t        for (var i = this.handlers.length; i >= 0; i--) {\n\t            if (this.handlers[i] === handler) {\n\t                this.handlers.splice(i, 1);\n\t            }\n\t        }\n\t    };\n\t    HandlerAdmin.prototype.dispatch = function () {\n\t        var arguments$1 = arguments;\n\n\t        var _args = [];\n\t        for (var _i = 0; _i < arguments.length; _i++) {\n\t            _args[_i] = arguments$1[_i];\n\t        }\n\t        for (var i = 0, len = this.handlers.length; i < len; i++) {\n\t            var handler = this.handlers[i];\n\t            if (typeof handler === 'function') {\n\t                handler.apply(this.el, arguments$1);\n\t            }\n\t        }\n\t    };\n\t    return HandlerAdmin;\n\t}()); // END class HandlerAdmin\n\t/**\n\t * A wrapper for handler functions; converts the passed handler function into a HadlerAdmin instance..\n\t */\n\tvar wrapFunc = function (el, handler) {\n\t    var handlerAdmin = new HandlerAdmin(el);\n\t    handlerAdmin.add(handler);\n\t    return handlerAdmin;\n\t};\n\t/**\n\t * @classdesc The AlloyFinger main class. Use this to add handler functions for\n\t *            touch events to any HTML- or SVG-Element.\n\t **/\n\tvar AlloyFinger = /** @class */ (function () {\n\t    function AlloyFinger(el, option) {\n\t        this.element = typeof el == 'string' ? document.querySelector(el) : el;\n\t        // Fancy stuff: change `this` from the start-, move-, end- and cancel-function.\n\t        //    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind\n\t        this.start = this.start.bind(this);\n\t        this.move = this.move.bind(this);\n\t        this.end = this.end.bind(this);\n\t        this.cancel = this.cancel.bind(this);\n\t        this.element.addEventListener(\"touchstart\", this.start, false);\n\t        this.element.addEventListener(\"touchmove\", this.move, false);\n\t        this.element.addEventListener(\"touchend\", this.end, false);\n\t        this.element.addEventListener(\"touchcancel\", this.cancel, false);\n\t        this.preV = { x: null, y: null };\n\t        this.pinchStartLen = null;\n\t        this.zoom = 1;\n\t        this.isDoubleTap = false;\n\t        var noop = function () { };\n\t        this.rotate = wrapFunc(this.element, option.rotate || noop);\n\t        this.touchStart = wrapFunc(this.element, option.touchStart || noop);\n\t        this.multipointStart = wrapFunc(this.element, option.multipointStart || noop);\n\t        this.multipointEnd = wrapFunc(this.element, option.multipointEnd || noop);\n\t        this.pinch = wrapFunc(this.element, option.pinch || noop);\n\t        this.swipe = wrapFunc(this.element, option.swipe || noop);\n\t        this.tap = wrapFunc(this.element, option.tap || noop);\n\t        this.doubleTap = wrapFunc(this.element, option.doubleTap || noop);\n\t        this.longTap = wrapFunc(this.element, option.longTap || noop);\n\t        this.singleTap = wrapFunc(this.element, option.singleTap || noop);\n\t        this.pressMove = wrapFunc(this.element, option.pressMove || noop);\n\t        this.twoFingerPressMove = wrapFunc(this.element, option.twoFingerPressMove || noop);\n\t        this.touchMove = wrapFunc(this.element, option.touchMove || noop);\n\t        this.touchEnd = wrapFunc(this.element, option.touchEnd || noop);\n\t        this.touchCancel = wrapFunc(this.element, option.touchCancel || noop);\n\t        this._cancelAllHandler = this.cancelAll.bind(this);\n\t        if (globalThis && typeof globalThis.addEventListener === \"function\") {\n\t            globalThis.addEventListener('scroll', this._cancelAllHandler);\n\t        }\n\t        this.delta = null;\n\t        this.last = null;\n\t        this.now = null;\n\t        this.tapTimeout = null;\n\t        this.singleTapTimeout = null;\n\t        this.longTapTimeout = null;\n\t        this.swipeTimeout = null;\n\t        this.x1 = this.x2 = this.y1 = this.y2 = null;\n\t        this.preTapPosition = { x: null, y: null };\n\t    }\n\t    // AlloyFinger.prototype = {\n\t    AlloyFinger.prototype.start = function (evt) {\n\t        if (!evt.touches)\n\t            { return; }\n\t        var _self = this;\n\t        this.now = Date.now();\n\t        this.x1 = evt.touches[0].pageX;\n\t        this.y1 = evt.touches[0].pageY;\n\t        this.delta = this.now - (this.last || this.now);\n\t        this.touchStart.dispatch(evt, this.element);\n\t        if (this.preTapPosition.x !== null) {\n\t            this.isDoubleTap = (this.delta > 0 && this.delta <= 250 && Math.abs(this.preTapPosition.x - this.x1) < 30 && Math.abs(this.preTapPosition.y - this.y1) < 30);\n\t            if (this.isDoubleTap)\n\t                { clearTimeout(this.singleTapTimeout); }\n\t        }\n\t        this.preTapPosition.x = this.x1;\n\t        this.preTapPosition.y = this.y1;\n\t        this.last = this.now;\n\t        var preV = this.preV;\n\t        var len = evt.touches.length;\n\t        if (len > 1) {\n\t            this._cancelLongTap();\n\t            this._cancelSingleTap();\n\t            var v = { x: evt.touches[1].pageX - this.x1, y: evt.touches[1].pageY - this.y1 };\n\t            preV.x = v.x;\n\t            preV.y = v.y;\n\t            this.pinchStartLen = getLen(preV);\n\t            this.multipointStart.dispatch(evt, this.element);\n\t        }\n\t        this._preventTap = false;\n\t        this.longTapTimeout = setTimeout((function () {\n\t            _self.longTap.dispatch(evt, _self.element);\n\t            _self._preventTap = true;\n\t        }).bind(_self), 750);\n\t    };\n\t    AlloyFinger.prototype.move = function (event) {\n\t        if (!event.touches)\n\t            { return; }\n\t        var afEvent = event;\n\t        var preV = this.preV;\n\t        var len = event.touches.length;\n\t        var currentX = event.touches[0].pageX;\n\t        var currentY = event.touches[0].pageY;\n\t        this.isDoubleTap = false;\n\t        if (len > 1) {\n\t            var sCurrentX = afEvent.touches[1].pageX;\n\t            var sCurrentY = afEvent.touches[1].pageY;\n\t            var v = { x: afEvent.touches[1].pageX - currentX, y: afEvent.touches[1].pageY - currentY };\n\t            if (preV.x !== null) {\n\t                if (this.pinchStartLen > 0) {\n\t                    afEvent.zoom = getLen(v) / this.pinchStartLen;\n\t                    this.pinch.dispatch(afEvent, this.element);\n\t                }\n\t                afEvent.angle = getRotateAngle(v, preV);\n\t                this.rotate.dispatch(afEvent, this.element);\n\t            }\n\t            preV.x = v.x;\n\t            preV.y = v.y;\n\t            if (this.x2 !== null && this.sx2 !== null) {\n\t                afEvent.deltaX = (currentX - this.x2 + sCurrentX - this.sx2) / 2;\n\t                afEvent.deltaY = (currentY - this.y2 + sCurrentY - this.sy2) / 2;\n\t            }\n\t            else {\n\t                afEvent.deltaX = 0;\n\t                afEvent.deltaY = 0;\n\t            }\n\t            this.twoFingerPressMove.dispatch(afEvent, this.element);\n\t            this.sx2 = sCurrentX;\n\t            this.sy2 = sCurrentY;\n\t        }\n\t        else {\n\t            if (this.x2 !== null) {\n\t                afEvent.deltaX = currentX - this.x2;\n\t                afEvent.deltaY = currentY - this.y2;\n\t                //move事件中添加对当前触摸点到初始触摸点的判断，\n\t                //如果曾经大于过某个距离(比如10),就认为是移动到某个地方又移回来，应该不再触发tap事件才对。\n\t                //\n\t                // translation:\n\t                //    Add the judgment of the current touch point to the initial touch point in the event,\n\t                //    If it has been greater than a certain distance (such as 10), it is considered to be\n\t                //    moved to a certain place and then moved back, and the tap event should no longer be triggered.\n\t                var movedX = Math.abs(this.x1 - this.x2);\n\t                var movedY = Math.abs(this.y1 - this.y2);\n\t                if (movedX > 10 || movedY > 10) {\n\t                    this._preventTap = true;\n\t                }\n\t            }\n\t            else {\n\t                afEvent.deltaX = 0;\n\t                afEvent.deltaY = 0;\n\t            }\n\t            this.pressMove.dispatch(afEvent, this.element);\n\t        }\n\t        this.touchMove.dispatch(afEvent, this.element);\n\t        this._cancelLongTap();\n\t        this.x2 = currentX;\n\t        this.y2 = currentY;\n\t        if (len > 1) {\n\t            event.preventDefault();\n\t        }\n\t    };\n\t    AlloyFinger.prototype.end = function (event) {\n\t        if (!event.changedTouches)\n\t            { return; }\n\t        var afEvent = event;\n\t        this._cancelLongTap();\n\t        var self = this;\n\t        if (afEvent.touches.length < 2) {\n\t            this.multipointEnd.dispatch(afEvent, this.element);\n\t            this.sx2 = this.sy2 = null;\n\t        }\n\t        //swipe\n\t        if ((this.x2 && Math.abs(this.x1 - this.x2) > 30) ||\n\t            (this.y2 && Math.abs(this.y1 - this.y2) > 30)) {\n\t            afEvent.direction = this._swipeDirection(this.x1, this.x2, this.y1, this.y2);\n\t            this.swipeTimeout = setTimeout(function () {\n\t                self.swipe.dispatch(afEvent, self.element);\n\t            }, 0);\n\t        }\n\t        else {\n\t            this.tapTimeout = setTimeout(function () {\n\t                if (!self._preventTap) {\n\t                    self.tap.dispatch(afEvent, self.element);\n\t                }\n\t                // trigger double tap immediately\n\t                if (self.isDoubleTap) {\n\t                    self.doubleTap.dispatch(afEvent, self.element);\n\t                    self.isDoubleTap = false;\n\t                }\n\t            }, 0);\n\t            if (!self.isDoubleTap) {\n\t                self.singleTapTimeout = setTimeout(function () {\n\t                    self.singleTap.dispatch(afEvent, self.element);\n\t                }, 250);\n\t            }\n\t        }\n\t        this.touchEnd.dispatch(afEvent, this.element);\n\t        this.preV.x = 0;\n\t        this.preV.y = 0;\n\t        this.zoom = 1;\n\t        this.pinchStartLen = null;\n\t        this.x1 = this.x2 = this.y1 = this.y2 = null;\n\t    };\n\t    AlloyFinger.prototype.cancelAll = function () {\n\t        this._preventTap = true;\n\t        clearTimeout(this.singleTapTimeout);\n\t        clearTimeout(this.tapTimeout);\n\t        clearTimeout(this.longTapTimeout);\n\t        clearTimeout(this.swipeTimeout);\n\t    };\n\t    AlloyFinger.prototype.cancel = function (evt) {\n\t        this.cancelAll();\n\t        this.touchCancel.dispatch(evt, this.element);\n\t    };\n\t    AlloyFinger.prototype._cancelLongTap = function () {\n\t        clearTimeout(this.longTapTimeout);\n\t    };\n\t    AlloyFinger.prototype._cancelSingleTap = function () {\n\t        clearTimeout(this.singleTapTimeout);\n\t    };\n\t    AlloyFinger.prototype._swipeDirection = function (x1, x2, y1, y2) {\n\t        return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n\t    };\n\t    AlloyFinger.prototype.on = function (evt, handler) {\n\t        if (this[evt]) {\n\t            // Force the generic parameter into it's expected candidate here ;)\n\t            var admin = this[evt];\n\t            admin.add(handler);\n\t        }\n\t    };\n\t    AlloyFinger.prototype.off = function (evt, handler) {\n\t        if (this[evt]) {\n\t            // Force the generic parameter into it's expected candidate here ;)\n\t            var admin = this[evt];\n\t            admin.del(handler);\n\t        }\n\t    };\n\t    AlloyFinger.prototype.destroy = function () {\n\t        if (this.singleTapTimeout) {\n\t            clearTimeout(this.singleTapTimeout);\n\t        }\n\t        if (this.tapTimeout) {\n\t            clearTimeout(this.tapTimeout);\n\t        }\n\t        if (this.longTapTimeout) {\n\t            clearTimeout(this.longTapTimeout);\n\t        }\n\t        if (this.swipeTimeout) {\n\t            clearTimeout(this.swipeTimeout);\n\t        }\n\t        this.element.removeEventListener(\"touchstart\", this.start);\n\t        this.element.removeEventListener(\"touchmove\", this.move);\n\t        this.element.removeEventListener(\"touchend\", this.end);\n\t        this.element.removeEventListener(\"touchcancel\", this.cancel);\n\t        this.rotate.del();\n\t        this.touchStart.del();\n\t        this.multipointStart.del();\n\t        this.multipointEnd.del();\n\t        this.pinch.del();\n\t        this.swipe.del();\n\t        this.tap.del();\n\t        this.doubleTap.del();\n\t        this.longTap.del();\n\t        this.singleTap.del();\n\t        this.pressMove.del();\n\t        this.twoFingerPressMove.del();\n\t        this.touchMove.del();\n\t        this.touchEnd.del();\n\t        this.touchCancel.del();\n\t        this.preV = this.pinchStartLen = this.zoom = this.isDoubleTap = this.delta = this.last = this.now = this.tapTimeout = this.singleTapTimeout = this.longTapTimeout = this.swipeTimeout = this.x1 = this.x2 = this.y1 = this.y2 = this.preTapPosition = this.rotate = this.touchStart = this.multipointStart = this.multipointEnd = this.pinch = this.swipe = this.tap = this.doubleTap = this.longTap = this.singleTap = this.pressMove = this.touchMove = this.touchEnd = this.touchCancel = this.twoFingerPressMove = null;\n\t        if (globalThis && typeof globalThis.removeEventListener === \"function\") {\n\t            globalThis.removeEventListener('scroll', this._cancelAllHandler);\n\t        }\n\t    };\n\t    return AlloyFinger;\n\t}());\n\texports.AlloyFinger = AlloyFinger;\n\texports.default = AlloyFinger;\n\n\t});\n\n\tunwrapExports(alloy_finger);\n\talloy_finger.AlloyFinger;\n\n\tvar js = createCommonjsModule(function (module, exports) {\n\t/**\n\t * TypeScript port by Ikaros Kappler.\n\t *\n\t * Original file from https://github.com/AlloyTeam/AlloyFinger\n\t *\n\t * @date 2021-02-10\n\t */\n\tObject.defineProperty(exports, \"__esModule\", { value: true });\n\texports.AlloyFinger = void 0;\n\n\tObject.defineProperty(exports, \"AlloyFinger\", { enumerable: true, get: function () { return alloy_finger.AlloyFinger; } });\n\texports.default = alloy_finger.AlloyFinger;\n\n\t});\n\n\tvar index = unwrapExports(js);\n\tvar js_1 = js.AlloyFinger;\n\n\texports.AlloyFinger = js_1;\n\texports.default = index;\n\n\tObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=alloy_finger.js.map\n","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date 2013-08-19\n * @modified 2018-08-16 Added closure. Removed the 'IKRS' wrapper.\n * @modified 2018-11-20 Added circular auto-adjustment.\n * @modified 2018-11-25 Added the point constants to the BezierPath class itself.\n * @modified 2018-11-28 Added the locateCurveByStartPoint() function.\n * @modified 2018-12-04 Added the toSVGString() function.\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2019-03-23 Changed the fuctions getPoint and getPointAt to match semantics in the Line class.\n * @modified 2019-11-18 Fixed the clone function: adjustCircular attribute was not cloned.\n * @modified 2019-12-02 Removed some excessive comments.\n * @modified 2019-12-04 Fixed the missing obtainHandleLengths behavior in the adjustNeightbourControlPoint function.\n * @modified 2020-02-06 Added function locateCurveByEndPoint( Vertex ).\n * @modified 2020-02-11 Added 'return this' to the scale(Vertex,number) and to the translate(Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-06-03 Made the private helper function _locateUIndex to a private function.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords).\n * @modified 2020-07-24 Added the getClosestT(Vertex) function.\n * @modified 2020-12-29 Constructor is now private (no explicit use intended).\n * @version 2.3.0\n *\n * @file BezierPath\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BezierPath = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A BezierPath class.\n *\n * This was refactored from an older project.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires CubicBezierCurve\n * @requires XYCoords\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n **/\nvar BezierPath = /** @class */ (function () {\n    /**\n     * The constructor.<br>\n     * <br>\n     * This constructor expects a sequence of path points and will approximate\n     * the location of control points by picking some between the points.<br>\n     * You should consider just constructing empty paths and then add more curves later using\n     * the addCurve() function.\n     *\n     * @constructor\n     * @name BezierPath\n     * @param {Vertex[]} pathPoints - An array of path vertices (no control points).\n     **/\n    function BezierPath(pathPoints) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"BezierPath\";\n        /** @constant {number} */\n        this.START_POINT = 0;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = 1;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = 2;\n        /** @constant {number} */\n        this.END_POINT = 3;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (!pathPoints)\n            pathPoints = [];\n        this.totalArcLength = 0.0;\n        // Set this flag to true if you want the first point and\n        // last point of the path to be auto adjusted, too.\n        this.adjustCircular = false;\n        this.bezierCurves = [];\n    }\n    ;\n    /**\n     * Add a cubic bezier curve to the end of this path.\n     *\n     * @method addCurve\n     * @param {CubicBezierCurve} curve - The curve to be added to the end of the path.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.addCurve = function (curve) {\n        if (curve == null || typeof curve == 'undefined')\n            throw \"Cannot add null curve to bézier path.\";\n        this.bezierCurves.push(curve);\n        if (this.bezierCurves.length > 1) {\n            curve.startPoint = this.bezierCurves[this.bezierCurves.length - 2].endPoint;\n            this.adjustSuccessorControlPoint(this.bezierCurves.length - 2, // curveIndex,\n            true, // obtainHandleLength,  \n            true // updateArcLengths  \n            );\n        }\n        else {\n            this.totalArcLength += curve.getLength();\n        }\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartPoint\n     * @param {Vertex} point - The (curve start-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (start-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given end point (function returns the index).\n     *\n     * @method locateCurveByEndPoint\n     * @param {Vertex} point - The (curve end-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByEndPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Locate the curve with the given start point (function returns the index).\n     *\n     * @method locateCurveByStartControlPoint\n     * @param {Vertex} point - The (curve endt-) point to look for.\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The curve index or -1 if curve (end-) point not found\n     **/\n    BezierPath.prototype.locateCurveByStartControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].startControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | Locate the curve with the given end control point.\n    // |\n    // | @param point:Vertex The point to look for.\n    // | @return Number The index or -1 if not found.\n    // +-------------------------------\n    BezierPath.prototype.locateCurveByEndControlPoint = function (point) {\n        // for( var i in this.bezierCurves ) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (this.bezierCurves[i].endControlPoint.equals(point))\n                return i;\n        }\n        return -1;\n    };\n    ;\n    /**\n     * Get the total length of this path.<br>\n     * <br>\n     * Note that the returned value comes from the curve buffer. Unregistered changes\n     * to the curve points will result in invalid path length values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The (buffered) length of the path.\n     **/\n    BezierPath.prototype.getLength = function () {\n        return this.totalArcLength;\n    };\n    ;\n    /**\n     * This function is internally called whenever the curve or path configuration\n     * changed. It updates the attribute that stores the path length information.<br>\n     * <br>\n     * If you perform any unregistered changes to the curve points you should call\n     * this function afterwards to update the curve buffer. Not updating may\n     * result in unexpected behavior.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.updateArcLengths = function () {\n        this.totalArcLength = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            this.bezierCurves[i].updateArcLengths();\n            this.totalArcLength += this.bezierCurves[i].getLength();\n        }\n    };\n    ;\n    /**\n     * Get the number of curves in this path.\n     *\n     * @method getCurveCount\n     * @instance\n     * @memberof BezierPath\n     * @return {number} The number of curves in this path.\n     **/\n    BezierPath.prototype.getCurveCount = function () {\n        return this.bezierCurves.length;\n    };\n    ;\n    /**\n     * Get the cubic bezier curve at the given index.\n     *\n     * @method getCurveAt\n     * @param {number} index - The curve index from 0 to getCurveCount()-1.\n     * @instance\n     * @memberof BezierPath\n     * @return {CubicBezierCurve} The curve at the specified index.\n     **/\n    BezierPath.prototype.getCurveAt = function (curveIndex) {\n        return this.bezierCurves[curveIndex];\n    };\n    ;\n    /**\n     * Remove the end point of this path (which removes the last curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the first curve, thus the path\n     * cannot be empty after this call.\n     *\n     * @method removeEndPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the last curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeEndPoint = function() {\n    if( this.bezierCurves.length <= 1 )\n        return false;\n    \n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 0; i < this.bezierCurves.length-1; i++ ) {\n        newArray[i] = this.bezierCurves[i];\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ this.bezierCurves.length-1 ].getLength();\n    this.bezierCurves = newArray;\n    return true;\n    }\n    */\n    /**\n     * Remove the start point of this path (which removes the first curve from this path).<br>\n     * <br>\n     * Please note that this function does never remove the last curve, thus the path\n     * cannot be empty after this call.<br>\n     *\n     * @method removeStartPoint\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} Indicating if the first curve was removed.\n     **/\n    /*\n    BezierPath.prototype.removeStartPoint = function() {\n\n    if( this.bezierCurves.length <= 1 )\n        return false;\n\n    var newArray = [ this.bezierCurves.length-1 ];\n    for( var i = 1; i < this.bezierCurves.length; i++ ) {\n\n        newArray[i-1] = this.bezierCurves[i];\n\n    }\n    \n    // Update arc length\n    this.totalArcLength -= this.bezierCurves[ 0 ].getLength();\n    this.bezierCurves = newArray;\n    \n    return true;\n    }\n    */\n    /**\n     * Removes a path point inside the path.\n     *\n     * This function joins the bezier curve at the given index with\n     * its predecessor, which means that the start point at the given\n     * curve index will be removed.\n     *\n     * @method joinAt\n     * @param {number} curveIndex - The index of the curve to be joined with its predecessor.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed index indicated an inner vertex and the two curves were joined.\n     **/\n    /*\n    BezierPath.prototype.joinAt = function( curveIndex ) {\n\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n    \n    var leftCurve  = this.bezierCurves[ curveIndex-1 ];\n    var rightCurve = this.bezierCurves[ curveIndex ];\n\n    // Make the length of the new handle double that long\n    var leftControlPoint = leftCurve.getStartControlPoint().clone();\n    leftControlPoint.sub( leftCurve.getStartPoint() );\n    leftControlPoint.multiplyScalar( 2.0 );\n    leftControlPoint.add( leftCurve.getStartPoint() );\n    \n    var rightControlPoint = rightCurve.getEndControlPoint().clone();\n    rightControlPoint.sub( rightCurve.getEndPoint() );\n    rightControlPoint.multiplyScalar( 2.0 );\n    rightControlPoint.add( rightCurve.getEndPoint() );\n\n    var newCurve = new IKRS.CubicBezierCurve( leftCurve.getStartPoint(),\n                          rightCurve.getEndPoint(),\n                          leftControlPoint,\n                          rightControlPoint\n                        );\n    // Place into array\n    var newArray = [ this.bezierCurves.length - 1 ];\n\n    for( var i = 0; i < curveIndex-1; i++ )\n        newArray[ i ] = this.bezierCurves[i];\n    \n    newArray[ curveIndex-1 ] = newCurve;\n    \n    // Shift trailing curves left\n    for( var i = curveIndex; i+1 < this.bezierCurves.length; i++ )\n        newArray[ i ] = this.bezierCurves[ i+1 ];\n        \n    this.bezierCurves = newArray;\n    this.updateArcLengths();\n\n    return true;\n    }\n    */\n    /**\n     * Add a new inner curve point to the path.<br>\n     * <br>\n     * This function splits the bezier curve at the given index and given\n     * curve segment index.\n     *\n     * @method splitAt\n     * @param {number} curveIndex - The index of the curve to split.\n     * @param {nunber} segmentIndex - The index of the curve segment where the split should be performed.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean} True if the passed indices were valid and the path was split.\n     **/\n    /*\n    BezierPath.prototype.splitAt = function( curveIndex,\n                         segmentIndex\n                       ) {\n    // Must be a valid curve index\n    if( curveIndex < 0 || curveIndex >= this.bezierCurves.length )\n        return false;\n\n    var oldCurve = this.bezierCurves[ curveIndex ];\n\n    // Segment must be an INNER point!\n    // (the outer points are already bezier end/start points!)\n    if( segmentIndex < 1 || segmentIndex-1 >= oldCurve.segmentCache.length )\n        return false;\n\n    // Make room for a new curve\n    for( var c = this.bezierCurves.length; c > curveIndex; c-- ) {\n        // Move one position to the right\n        this.bezierCurves[ c ] = this.bezierCurves[ c-1 ];\n    }\n\n    // Accumulate segment lengths\n    var u = 0;\n    for( var i = 0; i < segmentIndex; i++ )\n        u += oldCurve.segmentLengths[i];\n    //var tangent = oldCurve.getTangentAt( u );\n    var tangent = oldCurve.getTangent( u );\n    tangent = tangent.multiplyScalar( 0.25 );\n\n    var leftEndControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    leftEndControlPoint.sub( tangent );\n    \n    var rightStartControlPoint = oldCurve.segmentCache[ segmentIndex ].clone();\n    rightStartControlPoint.add( tangent );\n    \n    // Make the old existing handles a quarter that long\n    var leftStartControlPoint = oldCurve.getStartControlPoint().clone();\n    // move to (0,0)\n    leftStartControlPoint.sub( oldCurve.getStartPoint() );\n    leftStartControlPoint.multiplyScalar( 0.25 );\n    leftStartControlPoint.add( oldCurve.getStartPoint() );\n\n    var rightEndControlPoint = oldCurve.getEndControlPoint().clone();\n    // move to (0,0)\n    rightEndControlPoint.sub( oldCurve.getEndPoint() );\n    rightEndControlPoint.multiplyScalar( 0.25 );\n    rightEndControlPoint.add( oldCurve.getEndPoint() );\n\n    var newLeft  = new CubicBezierCurve( oldCurve.getStartPoint(),                      // old start point\n                         oldCurve.segmentCache[ segmentIndex ],         // new end point\n                         leftStartControlPoint,                         // old start control point\n                         leftEndControlPoint                            // new end control point\n                       );\n    var newRight = new CubicBezierCurve( oldCurve.segmentCache[ segmentIndex ],         // new start point\n                         oldCurve.getEndPoint(),                        // old end point\n                         rightStartControlPoint,                        // new start control point\n                         rightEndControlPoint                           // old end control point\n                       );\n    \n    // Insert split curve(s) at free index\n    this.bezierCurves[ curveIndex ]     = newLeft;\n    this.bezierCurves[ curveIndex + 1 ] = newRight;\n    \n    // Update total arc length, even if there is only a very little change!\n    this.totalArcLength -= oldCurve.getLength();\n    this.totalArcLength += newLeft.getLength();\n    this.totalArcLength += newRight.getLength();\n\n    return true;\n    };\n    */\n    /*\n    insertVertexAt( t:number ) : void {\n    console.log('Inserting vertex at', t );\n    // Find the curve index\n    var u : number = 0;\n    var curveIndex : number = -1;\n    var localT : number = 0.0;\n    for( var i = 0; curveIndex == -1 && i < this.bezierCurves.length; i++ ) {\n        \n    }\n    }; */\n    /**\n     * Move the whole bezier path by the given (x,y)-amount.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to be added (amount.x and amount.y)\n     *                          to each vertex of the curve.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining\n     **/\n    BezierPath.prototype.translate = function (amount) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().add(amount);\n            curve.getStartControlPoint().add(amount);\n            curve.getEndControlPoint().add(amount);\n        }\n        // Don't forget to translate the last curve's last point\n        var curve = this.bezierCurves[this.bezierCurves.length - 1];\n        curve.getEndPoint().add(amount);\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Scale the whole bezier path by the given (x,y)-factors.\n     *\n     * @method scale\n     * @param {Vertex} anchor - The scale origin to scale from.\n     * @param {number} amount - The scalar to be multiplied with.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} this for chaining.\n     **/\n    BezierPath.prototype.scale = function (anchor, scaling) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().scale(scaling, anchor);\n            curve.getStartControlPoint().scale(scaling, anchor);\n            curve.getEndControlPoint().scale(scaling, anchor);\n            // Do NOT scale the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().scale(scaling, anchor);\n        }\n        this.updateArcLengths();\n        return this;\n    };\n    ;\n    /**\n     * Rotate the whole bezier path around a point..\n     *\n     * @method rotate\n     * @param {Vertex} angle  - The angle to rotate this path by.\n     * @param {Vertex} center - The rotation center.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.rotate = function (angle, center) {\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            curve.getStartPoint().rotate(angle, center);\n            curve.getStartControlPoint().rotate(angle, center);\n            curve.getEndControlPoint().rotate(angle, center);\n            // Do NOT rotate the end point here!\n            // Don't forget that the curves are connected and on curve's end point\n            // the the successor's start point (same instance)!\n        }\n        // Finally move the last end point (was not scaled yet)\n        if (this.bezierCurves.length > 0 && !this.adjustCircular) {\n            this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().rotate(angle, center);\n        }\n    };\n    ;\n    /**\n     * Get the 't' position on this curve with the minimal distance to point p.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @return {number} A value t with 0.0 <= t <= 1.0.\n     **/\n    BezierPath.prototype.getClosestT = function (p) {\n        // Find the spline to extract the value from\n        var minIndex = -1;\n        var minDist = 0.0;\n        var dist = 0.0;\n        var curveT = 0.0;\n        var uMin = 0.0;\n        var u = 0.0;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            curveT = this.bezierCurves[i].getClosestT(p);\n            dist = this.bezierCurves[i].getPointAt(curveT).distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n                uMin = u + curveT * this.bezierCurves[i].getLength();\n            }\n            u += this.bezierCurves[i].getLength();\n        }\n        return Math.max(0.0, Math.min(1.0, uMin / this.totalArcLength));\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given relative path location.\n     *\n     * @method getPoint\n     * @param {number} u - The relative path position: <pre>0 <= u <= this.getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the relative path position.\n     **/\n    BezierPath.prototype.getPoint = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPoint(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(u, 0));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        // if u == arcLength\n        //   -> i is max\n        if (i >= this.bezierCurves.length)\n            return this.bezierCurves[this.bezierCurves.length - 1].getEndPoint().clone();\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getPoint(relativeU);\n    };\n    ;\n    /**\n     * Get the point on the bézier path at the given path fraction.\n     *\n     * @method getPointAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The point at the absolute path position.\n     **/\n    BezierPath.prototype.getPointAt = function (t) {\n        return this.getPoint(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the tangent of the bézier path at the given path fraction.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangentAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the absolute path position.\n     **/\n    BezierPath.prototype.getTangentAt = function (t) {\n        return this.getTangent(t * this.totalArcLength);\n    };\n    ;\n    /**\n     *  Get the tangent of the bézier path at the given path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The tangent vector at the relative path position.\n     **/\n    BezierPath.prototype.getTangent = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.warn(\"[BezierPath.getTangent(u)] u is out of bounds: \" + u + \".\");\n            // return undefined;\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var i = 0;\n        var uTemp = 0.0;\n        while (i < this.bezierCurves.length &&\n            (uTemp + this.bezierCurves[i].getLength()) < u) {\n            uTemp += this.bezierCurves[i].getLength();\n            i++;\n        }\n        var bCurve = this.bezierCurves[i];\n        var relativeU = u - uTemp;\n        return bCurve.getTangent(relativeU);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given absolute path location (fraction).<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} t - The absolute path position: <pre>0.0 <= t <= 1.0</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the absolute path position.\n     **/\n    BezierPath.prototype.getPerpendicularAt = function (t) {\n        return this.getPerpendicular(t * this.totalArcLength);\n    };\n    ;\n    /**\n     * Get the perpendicular of the bézier path at the given relative path location.<br>\n     * <br>\n     * Note that the returned vector is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative path position: <pre>0 <= u <= getLength()</pre>\n     * @instance\n     * @memberof BezierPath\n     * @return {Vertex} The perpendicluar vector at the relative path position.\n     **/\n    BezierPath.prototype.getPerpendicular = function (u) {\n        if (u < 0 || u > this.totalArcLength) {\n            console.log(\"[BezierPath.getPerpendicular(u)] u is out of bounds: \" + u + \".\");\n            u = Math.min(this.totalArcLength, Math.max(0, u));\n        }\n        // Find the spline to extract the value from\n        var uResult = BezierPath._locateUIndex(this, u);\n        var bCurve = this.bezierCurves[uResult.i];\n        var relativeU = u - uResult.uPart;\n        return bCurve.getPerpendicular(relativeU);\n    };\n    ;\n    /**\n     * This is a helper function to locate the curve index for a given\n     * absolute path position u.\n     *\n     * I decided to put this into privat scope as it is really specific. Maybe\n     * put this into a utils wrapper.\n     *\n     * Returns:\n     * - {number} i - the index of the containing curve.\n     * - {number} uPart - the absolute curve length sum (length from the beginning to u, should equal u itself).\n     * - {number} uBefore - the absolute curve length for all segments _before_ the matched curve (usually uBefore <= uPart).\n     **/\n    BezierPath._locateUIndex = function (path, u) {\n        var i = 0;\n        var uTemp = 0.0;\n        var uBefore = 0.0;\n        while (i < path.bezierCurves.length &&\n            (uTemp + path.bezierCurves[i].getLength()) < u) {\n            uTemp += path.bezierCurves[i].getLength();\n            if (i + 1 < path.bezierCurves.length)\n                uBefore += path.bezierCurves[i].getLength();\n            i++;\n        }\n        return { i: i, uPart: uTemp, uBefore: uBefore };\n    };\n    ;\n    /**\n     * Get a specific sub path from this path. The start and end position are specified by\n     * ratio number in [0..1].\n     *\n     * 0.0 is at the beginning of the path.\n     * 1.0 is at the end of the path.\n     *\n     * Values below 0 or beyond 1 are cropped down to the [0..1] interval.\n     *\n     * startT > endT is allowed, the returned sub path will have inverse direction then.\n     *\n     * @method getSubPathAt\n     * @param {number} startT - The start position of the sub path.\n     * @param {number} endT - The end position of the sub path.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The desired sub path in the bounds [startT..endT].\n     **/\n    BezierPath.prototype.getSubPathAt = function (startT, endT) {\n        startT = Math.max(0, startT);\n        endT = Math.min(1.0, endT);\n        var startU = startT * this.totalArcLength;\n        var endU = endT * this.totalArcLength;\n        var uStartResult = BezierPath._locateUIndex(this, startU); // { i:int, uPart:float, uBefore:float }\n        var uEndResult = BezierPath._locateUIndex(this, endU); // { i:int, uPart:float, uBefore:float }\n        var firstT = (startU - uStartResult.uBefore) / this.bezierCurves[uStartResult.i].getLength();\n        if (uStartResult.i == uEndResult.i) {\n            // Subpath begins and ends in the same path segment (just get a simple sub curve from that path element).\n            var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n            var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, lastT);\n            return BezierPath.fromArray([firstCurve]);\n        }\n        else {\n            var curves = [];\n            if (uStartResult.i > uEndResult.i) {\n                // Back to front direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 0.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i - 1; i > uEndResult.i; i--) {\n                    curves.push(this.bezierCurves[i].clone().reverse());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(1.0, lastT));\n            }\n            else {\n                // Front to back direction\n                var firstCurve = this.bezierCurves[uStartResult.i].getSubCurveAt(firstT, 1.0);\n                curves.push(firstCurve);\n                for (var i = uStartResult.i + 1; i < uEndResult.i && i < this.bezierCurves.length; i++) {\n                    curves.push(this.bezierCurves[i].clone());\n                }\n                var lastT = (endU - uEndResult.uBefore) / this.bezierCurves[uEndResult.i].getLength();\n                curves.push(this.bezierCurves[uEndResult.i].getSubCurveAt(0, lastT));\n            }\n            return BezierPath.fromArray(curves);\n        }\n    };\n    ;\n    /**\n     * This function moves the addressed curve point (or control point) with\n     * keeping up the path's curve integrity.<br>\n     * <br>\n     * Thus is done by moving neighbour- and control- points as needed.\n     *\n     * @method moveCurvePoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {number} pointID - One of the curve's four point IDs (START_POINT,\n     *                           START_CONTROL_POINT, END_CONTRO_POINT or END_POINT).\n     * @param {XYCoords} moveAmount - The amount to move the addressed vertex by.\n     * @instance\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.moveCurvePoint = function (curveIndex, pointID, moveAmount) {\n        var bCurve = this.getCurveAt(curveIndex);\n        bCurve.moveCurvePoint(pointID, moveAmount, true, // move control point, too\n        true // updateArcLengths\n        );\n        // If inner point and NOT control point\n        //  --> move neightbour\n        if (pointID == this.START_POINT && (curveIndex > 0 || this.adjustCircular)) {\n            // Set predecessor's control point!\n            var predecessor = this.getCurveAt(curveIndex - 1 < 0 ? this.bezierCurves.length + (curveIndex - 1) : curveIndex - 1);\n            predecessor.moveCurvePoint(this.END_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.END_POINT && (curveIndex + 1 < this.bezierCurves.length || this.adjustCircular)) {\n            // Set successcor\n            var successor = this.getCurveAt((curveIndex + 1) % this.bezierCurves.length);\n            successor.moveCurvePoint(this.START_CONTROL_POINT, moveAmount, true, // move control point, too\n            false // updateArcLengths\n            );\n        }\n        else if (pointID == this.START_CONTROL_POINT && curveIndex > 0) {\n            this.adjustPredecessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        else if (pointID == this.END_CONTROL_POINT && curveIndex + 1 < this.getCurveCount()) {\n            this.adjustSuccessorControlPoint(curveIndex, true, // obtain handle length?\n            false // update arc lengths\n            );\n        }\n        // Don't forget to update the arc lengths!\n        // Note: this can be optimized as only two curves have changed their lengths!\n        this.updateArcLengths();\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's predecessor's control point.\n     *\n     * @method adjustPredecessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustPredecessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex <= 0)\n            return; // false;\n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt(curveIndex - 1 < 0 ? this.getCurveCount() + (curveIndex - 1) : curveIndex - 1);\n        BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getStartPoint(), // the reference point\n        mainCurve.getStartControlPoint(), // the dragged control point\n        neighbourCurve.getEndPoint(), // the neighbour's point\n        neighbourCurve.getEndControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustSuccessorControlPoint\n     * @param {number} curveIndex - The curve index to move a point from.\n     * @param {boolean} obtainHandleLength - Moves the point with keeping the original handle length.\n     * @param {boolean} updateArcLength - The amount to move the addressed vertex by.\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.prototype.adjustSuccessorControlPoint = function (curveIndex, obtainHandleLength, updateArcLengths) {\n        if (!this.adjustCircular && curveIndex + 1 > this.getCurveCount())\n            return; //  false; \n        var mainCurve = this.getCurveAt(curveIndex);\n        var neighbourCurve = this.getCurveAt((curveIndex + 1) % this.getCurveCount());\n        /* return */ BezierPath.adjustNeighbourControlPoint(mainCurve, neighbourCurve, mainCurve.getEndPoint(), // the reference point\n        mainCurve.getEndControlPoint(), // the dragged control point\n        neighbourCurve.getStartPoint(), // the neighbour's point\n        neighbourCurve.getStartControlPoint(), // the neighbour's control point to adjust\n        obtainHandleLength, updateArcLengths);\n    };\n    ;\n    /**\n     * This helper function adjusts the given point's successor's control point.\n     *\n     * @method adjustNeighbourControlPoint\n     * @param {CubicBezierCurve} mainCurve\n     * @param {CubicBezierCurve} neighbourCurve\n     * @param {Vertex} mainPoint\n     * @param {Vertex} mainControlPoint\n     * @param {Vertex} neighbourPoint\n     * @param {Vertex} neighbourControlPoint\n     * @param {boolean} obtainHandleLengths\n     * @param {boolean} updateArcLengths\n     * @instance\n     * @private\n     * @memberof BezierPath\n     * @return {void}\n     **/\n    BezierPath.adjustNeighbourControlPoint = function (_mainCurve, // TODO: remove param\n    neighbourCurve, mainPoint, mainControlPoint, neighbourPoint, neighbourControlPoint, obtainHandleLengths, _updateArcLengths // TODO: remove param\n    ) {\n        // Calculate start handle length\n        var mainHandleBounds = new Vertex_1.Vertex(mainControlPoint.x - mainPoint.x, mainControlPoint.y - mainPoint.y);\n        var neighbourHandleBounds = new Vertex_1.Vertex(neighbourControlPoint.x - neighbourPoint.x, neighbourControlPoint.y - neighbourPoint.y);\n        var mainHandleLength = Math.sqrt(Math.pow(mainHandleBounds.x, 2) + Math.pow(mainHandleBounds.y, 2));\n        var neighbourHandleLength = Math.sqrt(Math.pow(neighbourHandleBounds.x, 2) + Math.pow(neighbourHandleBounds.y, 2));\n        if (mainHandleLength <= 0.1)\n            return; // no secure length available for division? What about zoom? Use EPSILON?\t\n        // Just invert the main handle (keep length or not?\n        if (obtainHandleLengths) {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x * (neighbourHandleLength / mainHandleLength), neighbourPoint.y - mainHandleBounds.y * (neighbourHandleLength / mainHandleLength));\n        }\n        else {\n            neighbourControlPoint.set(neighbourPoint.x - mainHandleBounds.x, neighbourPoint.y - mainHandleBounds.y);\n        }\n        neighbourCurve.updateArcLengths();\n    };\n    ;\n    /**\n     * Get the bounds of this Bézier path.\n     *\n     * Note the the curves' underlyung segment buffers are used to determine the bounds. The more\n     * elements the segment buffers have, the more precise the returned bounds will be.\n     *\n     * @return {Bounds} The bounds of this Bézier path.\n     **/\n    BezierPath.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var b;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            b = this.bezierCurves[i].getBounds();\n            min.x = Math.min(min.x, b.min.x);\n            min.y = Math.min(min.y, b.min.y);\n            max.x = Math.max(max.x, b.max.x);\n            max.y = Math.max(max.y, b.max.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Clone this BezierPath (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath}\n     **/\n    BezierPath.prototype.clone = function () {\n        var path = new BezierPath(undefined);\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            path.bezierCurves.push(this.bezierCurves[i].clone());\n            // Connect splines\n            if (i > 0)\n                path.bezierCurves[i - 1].endPoint = path.bezierCurves[i].startPoint;\n        }\n        path.updateArcLengths();\n        path.adjustCircular = this.adjustCircular;\n        return path;\n    };\n    ;\n    /**\n     * Compare this and the passed Bézier path.\n     *\n     * @method equals\n     * @param {BezierPath} path - The pass to compare with.\n     * @instance\n     * @memberof BezierPath\n     * @return {boolean}\n     **/\n    BezierPath.prototype.equals = function (path) {\n        if (!path)\n            return false;\n        // Check if path contains the credentials\n        if (!path.bezierCurves)\n            return false;\n        if (typeof path.bezierCurves.length == \"undefined\")\n            return false;\n        if (path.bezierCurves.length != this.bezierCurves.length)\n            return false;\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (!this.bezierCurves[i].equals(path.bezierCurves[i]))\n                return false;\n        }\n        return true;\n    };\n    ;\n    /**\n     * Create a <pre>&lt;path&gt;</pre> SVG representation of this bézier curve.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} [options={}] - Like options.className\n     * @param {string=} [options.className] - The classname to use for the SVG item.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The SVG string.\n     **/\n    BezierPath.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        for (var c = 0; c < this.bezierCurves.length; c++) {\n            if (c > 0)\n                buffer.push(' ');\n            buffer.push(this.bezierCurves[c].toSVGPathData());\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Create a JSON string representation of this bézier curve.\n     *\n     * @method toJSON\n     * @param {boolean} prettyFormat - If true then the function will add line breaks.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The JSON string.\n     **/\n    BezierPath.prototype.toJSON = function (prettyFormat) {\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            if (i > 0)\n                buffer.push(\",\");\n            if (prettyFormat)\n                buffer.push(\"\\n\\t\");\n            else\n                buffer.push(\" \");\n            buffer.push(this.bezierCurves[i].toJSON(prettyFormat));\n        }\n        if (this.bezierCurves.length != 0)\n            buffer.push(\" \");\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The string with the JSON data.\n     * @throw An error if the string is not JSON or does not contain a bezier path object.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The parsed bezier path instance.\n     **/\n    BezierPath.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return BezierPath.fromArray(obj);\n    };\n    ;\n    /**\n     * Create a BezierPath instance from the given array.\n     *\n     * @method fromArray\n     * @param {Vertex[][]} arr - A two-dimensional array containing the bezier path vertices.\n     * @throw An error if the array does not contain proper bezier path data.\n     * @static\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the array data.\n     **/\n    BezierPath.fromArray = function (obj) {\n        if (!Array.isArray(obj))\n            throw \"[BezierPath.fromArray] Passed object must be an array.\";\n        var arr = obj; // FORCE?\n        if (arr.length < 1)\n            throw \"[BezierPath.fromArray] Passed array must contain at least one bezier curve (has \" + arr.length + \").\";\n        // Create an empty bezier path\n        var bPath = new BezierPath(undefined);\n        var lastCurve = null;\n        for (var i = 0; i < arr.length; i++) {\n            // Convert object (or array?) to bezier curve\n            var bCurve;\n            if (CubicBezierCurve_1.CubicBezierCurve.isInstance(arr[i])) {\n                bCurve = arr[i].clone();\n            }\n            else if (0 in arr[i] && 1 in arr[i] && 2 in arr[i] && 3 in arr[i]) {\n                if (!arr[i][0] || !arr[i][1] || !arr[i][2] || !arr[i][3])\n                    throw \"Cannot convert path data to BezierPath instance. At least one element is undefined (index=\" + i + \"): \" + arr[i];\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromArray(arr[i]);\n            }\n            else {\n                bCurve = CubicBezierCurve_1.CubicBezierCurve.fromObject(arr[i]);\n            }\n            // Set curve start point?\n            // (avoid duplicate point instances!)\n            if (lastCurve)\n                bCurve.startPoint = lastCurve.endPoint;\n            // Add to path's internal list\n            bPath.bezierCurves.push(bCurve);\n            // bPath.totalArcLength += bCurve.getLength(); \t    \n            lastCurve = bCurve;\n        }\n        bPath.updateArcLengths();\n        // Bezier segments added. Done\n        return bPath;\n    };\n    ;\n    /**\n     * This function converts the bezier path into a string containing\n     * integer values only.\n     * The points' float values are rounded to 1 digit after the comma.\n     *\n     * The returned string represents a JSON array (with leading '[' and\n     * trailing ']', the separator is ',').\n     *\n     * @method toReducedListRepresentation\n     * @param {number} digits - The number of digits to be used after the comma '.'.\n     * @instance\n     * @memberof BezierPath\n     * @return {string} The reduced list representation of this path.\n     **/\n    BezierPath.prototype.toReducedListRepresentation = function (digits) {\n        if (typeof digits == \"undefined\")\n            digits = 1;\n        var buffer = [];\n        buffer.push(\"[\"); // array begin\n        for (var i = 0; i < this.bezierCurves.length; i++) {\n            var curve = this.bezierCurves[i];\n            buffer.push(curve.getStartPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getStartControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndControlPoint().y.toFixed(digits));\n            buffer.push(\",\");\n        }\n        if (this.bezierCurves.length != 0) {\n            var curve = this.bezierCurves[this.bezierCurves.length - 1];\n            buffer.push(curve.getEndPoint().x.toFixed(digits));\n            buffer.push(\",\");\n            buffer.push(curve.getEndPoint().y.toFixed(digits));\n        }\n        buffer.push(\"]\"); // array end\n        return buffer.join(\"\"); // Convert to string, with empty separator.\n    };\n    ;\n    /**\n     * Parse a BezierPath instance from the reduced list representation.<br>\n     * <br>\n     * The passed string must represent a JSON array containing numbers only.\n     *\n     * @method fromReducedListRepresentation\n     * @param {string} listJSON - The number of digits to be used after the floating point.\n     * @throw An error if the string is malformed.\n     * @instance\n     * @memberof BezierPath\n     * @return {BezierPath} The bezier path instance retrieved from the string.\n     **/\n    BezierPath.fromReducedListRepresentation = function (listJSON) {\n        // Parse the array\n        var pointArray = JSON.parse(listJSON);\n        if (!pointArray.length) {\n            console.log(\"Cannot parse bezier path from non-array object nor from empty point list.\");\n            throw \"Cannot parse bezier path from non-array object nor from empty point list.\";\n        }\n        if (pointArray.length < 8) {\n            console.log(\"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\");\n            throw \"Cannot build bezier path. The passed array must contain at least 8 elements (numbers).\";\n        }\n        // Convert to object\n        var bezierPath = new BezierPath(null); // No points yet\n        var startPoint;\n        var startControlPoint;\n        var endControlPoint;\n        var endPoint;\n        var i = 0;\n        do {\n            //if( i == 0 )\n            startPoint = new Vertex_1.Vertex(pointArray[i], pointArray[i + 1]);\n            startControlPoint = new Vertex_1.Vertex(pointArray[i + 2], pointArray[i + 3]);\n            endControlPoint = new Vertex_1.Vertex(pointArray[i + 4], pointArray[i + 5]);\n            endPoint = new Vertex_1.Vertex(pointArray[i + 6], pointArray[i + 7]);\n            var bCurve = new CubicBezierCurve_1.CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint);\n            bezierPath.bezierCurves.push(bCurve);\n            startPoint = endPoint;\n            i += 6;\n        } while (i + 2 < pointArray.length);\n        bezierPath.updateArcLengths();\n        return bezierPath;\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | These constants equal the values from CubicBezierCurve.\n    // +-------------------------------\n    /** @constant {number} */\n    BezierPath.START_POINT = 0;\n    /** @constant {number} */\n    BezierPath.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    BezierPath.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    BezierPath.END_POINT = 3;\n    return BezierPath;\n}());\nexports.BezierPath = BezierPath;\n//# sourceMappingURL=BezierPath.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-11\n * @modified 2020-10-30 Added the static computeFromVertices function.\n * @modified 2020-11-19 Set min, max, width and height to private.\n * @modified 2021-02-02 Added the `toPolygon` method.\n * @version  1.2.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bounds = void 0;\nvar Polygon_1 = require(\"./Polygon\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A bounds class with min and max values. Implementing IBounds.\n *\n * @requires XYCoords\n * @requires Vertex\n * @requires IBounds\n **/\nvar Bounds = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Bounds\n     * @param {XYCoords} min - The min values (x,y) as a XYCoords tuple.\n     * @param {XYCoords} max - The max values (x,y) as a XYCoords tuple.\n     **/\n    function Bounds(min, max) {\n        this.min = min;\n        this.max = max;\n        this.width = max.x - min.x;\n        this.height = max.y - min.y;\n    }\n    ;\n    /**\n     * Convert this rectangular bounding box to a polygon with four vertices.\n     *\n     * @method toPolygon\n     * @instance\n     * @memberof Bounds\n     * @return {Polygon} This bound rectangle as a polygon.\n     */\n    Bounds.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([\n            new Vertex_1.Vertex(this.min),\n            new Vertex_1.Vertex(this.max.x, this.min.y),\n            new Vertex_1.Vertex(this.max),\n            new Vertex_1.Vertex(this.min.x, this.max.y)\n        ], false);\n    };\n    ;\n    /**\n     * Compute the minimal bounding box for a given set of vertices.\n     *\n     * An empty vertex array will return an empty bounding box located at (0,0).\n     *\n     * @static\n     * @method computeFromVertices\n     * @memberof Bounds\n     * @param {Array<Vertex>} vertices - The set of vertices you want to get the bounding box for.\n     * @return The minimal Bounds for the given vertices.\n     **/\n    Bounds.computeFromVertices = function (vertices) {\n        if (vertices.length == 0)\n            return new Bounds(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(0, 0));\n        var xMin = vertices[0].x;\n        var xMax = vertices[0].x;\n        var yMin = vertices[0].y;\n        var yMax = vertices[0].y;\n        var vert;\n        for (var i in vertices) {\n            vert = vertices[i];\n            xMin = Math.min(xMin, vert.x);\n            xMax = Math.max(xMax, vert.x);\n            yMin = Math.min(yMin, vert.y);\n            yMax = Math.max(yMax, vert.y);\n        }\n        return new Bounds(new Vertex_1.Vertex(xMin, yMin), new Vertex_1.Vertex(xMax, yMax));\n    };\n    ;\n    return Bounds;\n}()); // END class bounds\nexports.Bounds = Bounds;\n//# sourceMappingURL=Bounds.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-05-04\n * @modified 2020-05-09 Ported to typescript.\n * @modified 2020-05-25 Added the vertAt and tangentAt functions.\n * @mofidied 2020-09-07 Added the circleIntersection(Circle) function.\n * @modified 2020-09-07 Changed the vertAt function by switching sin and cos! The old version did not return the correct vertex (by angle) accoring to the assumed circle math.\n * @modified 2020-10-16 Added the containsCircle(...) function.\n * @modified 2021-01-20 Added UID.\n * @version  1.2.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Circle = void 0;\nvar Line_1 = require(\"./Line\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A simple circle: center point and radius.\n *\n * @requires Line\n * @requires Vector\n * @requires VertTuple\n * @requires Vertex\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n **/\nvar Circle = /** @class */ (function () {\n    /**\n     * Create a new circle with given center point and radius.\n     *\n     * @constructor\n     * @name Circle\n     * @param {Vertex} center - The center point of the circle.\n     * @param {number} radius - The radius of the circle.\n     */\n    function Circle(center, radius) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Circle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.radius = radius;\n    }\n    ;\n    /**\n     * Check if the given circle is fully contained inside this circle.\n     *\n     * @method containsCircle\n     * @param {Circle} circle - The circle to check if it is contained in this circle.\n     * @instance\n     * @memberof Circle\n     * @return {boolean} `true` if any only if the given circle is completely inside this circle.\n     */\n    Circle.prototype.containsCircle = function (circle) {\n        return this.center.distance(circle.center) + circle.radius < this.radius;\n    };\n    ;\n    /**\n     * Calculate the distance from this circle to the given line.\n     *\n     * * If the line does not intersect this ciecle then the returned\n     *   value will be the minimal distance.\n     * * If the line goes through this circle then the returned value\n     *   will be max inner distance and it will be negative.\n     *\n     * @method lineDistance\n     * @param {Line} line - The line to measure the distance to.\n     * @return {number} The minimal distance from the outline of this circle to the given line.\n     * @instance\n     * @memberof Circle\n     */\n    Circle.prototype.lineDistance = function (line) {\n        var closestPointOnLine = line.getClosestPoint(this.center);\n        return closestPointOnLine.distance(this.center) - this.radius;\n    };\n    ;\n    /**\n     * Get the vertex on the this circle for the given angle.\n     *\n     * @method vertAt\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Vertex} The vertex (point) at the given angle.\n     * @instance\n     * @memberof Circle\n     **/\n    Circle.prototype.vertAt = function (angle) {\n        // Find the point on the circle respective the angle. Then move relative to center.\n        return Circle.circleUtils.vertAt(angle, this.radius).add(this.center);\n    };\n    ;\n    /**\n     * Get a tangent line of this circle for a given angle.\n     *\n     * Point a of the returned line is located on the circle, the length equals the radius.\n     *\n     * @method tangentAt\n     * @instance\n     * @param {number} angle - The angle (in radians) to use.\n     * @return {Line} The tangent line.\n     * @memberof Circle\n     **/\n    Circle.prototype.tangentAt = function (angle) {\n        var pointA = Circle.circleUtils.vertAt(angle, this.radius);\n        // Construct the perpendicular of the line in point a. Then move relative to center.\n        return new Vector_1.Vector(pointA, new Vertex_1.Vertex(0, 0)).add(this.center).perp();\n    };\n    ;\n    /**\n     * Calculate the intersection points (if exists) with the given circle.\n     *\n     * @method circleIntersection\n     * @instance\n     * @memberof Circle\n     * @param {Circle} circle\n     * @return {Line|null} The intersection points (as a line) or null if the two circles do not intersect.\n     **/\n    Circle.prototype.circleIntersection = function (circle) {\n        // Circles do not intersect at all?\n        if (this.center.distance(circle.center) > this.radius + circle.radius) {\n            return null;\n        }\n        // One circle is fully inside the other?\n        if (this.center.distance(circle.center) < Math.abs(this.radius - circle.radius)) {\n            return null;\n        }\n        // Based on the C++ implementation by Robert King\n        //    https://stackoverflow.com/questions/3349125/circle-circle-intersection-points\n        // and the 'Circles and spheres' article by Paul Bourke.\n        //    http://paulbourke.net/geometry/circlesphere/\n        //\n        // This is the original C++ implementation:\n        //\n        // pair<Point, Point> intersections(Circle c) {\n        //    Point P0(x, y);\n        //    Point P1(c.x, c.y);\n        //    float d, a, h;\n        //    d = P0.distance(P1);\n        //    a = (r*r - c.r*c.r + d*d)/(2*d);\n        //    h = sqrt(r*r - a*a);\n        //    Point P2 = P1.sub(P0).scale(a/d).add(P0);\n        //    float x3, y3, x4, y4;\n        //    x3 = P2.x + h*(P1.y - P0.y)/d;\n        //    y3 = P2.y - h*(P1.x - P0.x)/d;\n        //    x4 = P2.x - h*(P1.y - P0.y)/d;\n        //    y4 = P2.y + h*(P1.x - P0.x)/d;\n        //    return pair<Point, Point>(Point(x3, y3), Point(x4, y4));\n        // } \n        var p0 = this.center;\n        var p1 = circle.center;\n        var d = p0.distance(p1);\n        var a = (this.radius * this.radius - circle.radius * circle.radius + d * d) / (2 * d);\n        var h = Math.sqrt(this.radius * this.radius - a * a);\n        var p2 = p1.clone().scale(a / d, p0);\n        var x3 = p2.x + h * (p1.y - p0.y) / d;\n        var y3 = p2.y - h * (p1.x - p0.x) / d;\n        var x4 = p2.x - h * (p1.y - p0.y) / d;\n        var y4 = p2.y + h * (p1.x - p0.x) / d;\n        return new Line_1.Line(new Vertex_1.Vertex(x3, y3), new Vertex_1.Vertex(x4, y4));\n    };\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    Circle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' r=\"' + this.radius + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    Circle.circleUtils = {\n        vertAt: function (angle, radius) {\n            /* return new Vertex( Math.sin(angle) * radius,\n                       Math.cos(angle) * radius ); */\n            return new Vertex_1.Vertex(Math.cos(angle) * radius, Math.sin(angle) * radius);\n        }\n    };\n    return Circle;\n}()); // END class\nexports.Circle = Circle;\n//# sourceMappingURL=Circle.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2020-12-17\n * @modified 2021-01-20 Added UID.\n * @version  1.1.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CircleSector = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A simple circle sector: circle, start- and end-angle.\n *\n * @requires Line\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires XYCoords\n **/\nvar CircleSector = /** @class */ (function () {\n    /**\n     * Create a new circle sector with given circle, start- and end-angle.\n     *\n     * @constructor\n     * @name CircleSector\n     * @param {Circle} circle - The circle.\n     * @param {number} startAngle - The start angle of the sector.\n     * @param {number} endAngle - The end angle of the sector.\n     */\n    function CircleSector(circle, startAngle, endAngle) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"CircleSector\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.circle = circle;\n        this.startAngle = startAngle;\n        this.endAngle = endAngle;\n    }\n    ;\n    /**\n      * Create an SVG representation of this circle.\n      *\n      * @method toSVGString\n      * @param {object=} options - An optional set of options, like 'className'.\n      * @return {string} A string representing the SVG code for this vertex.\n      * @instance\n      * @memberof Circle\n      */\n    CircleSector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path ');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        var data = CircleSector.circleSectorUtils.describeSVGArc(this.circle.center.x, this.circle.center.y, this.circle.radius, this.startAngle, this.endAngle);\n        buffer.push(' d=\"' + data.join(\" \") + '\" />');\n        return buffer.join('');\n    };\n    ;\n    CircleSector.circleSectorUtils = {\n        /**\n         * Helper function to convert polar circle coordinates to cartesian coordinates.\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {number} angle - The angle in radians.\n        */\n        polarToCartesian: function (centerX, centerY, radius, angle) {\n            return {\n                x: centerX + (radius * Math.cos(angle)),\n                y: centerY + (radius * Math.sin(angle))\n            };\n        },\n        /**\n         * Helper function to convert a circle section as SVG arc params (for the `d` attribute).\n         * Found at: https://stackoverflow.com/questions/5736398/how-to-calculate-the-svg-path-for-an-arc-of-a-circle\n         *\n         * TODO: generalize for ellipses (two radii).\n         *\n         * @param {boolean} options.moveToStart - If false (default=true) the initial 'Move' command will not be used.\n         * @return [ 'A', radiusx, radiusy, rotation=0, largeArcFlag=1|0, sweepFlag=0, endx, endy ]\n         */\n        describeSVGArc: function (x, y, radius, startAngle, endAngle, options) {\n            if (typeof options === 'undefined')\n                options = { moveToStart: true };\n            var end = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, endAngle);\n            var start = CircleSector.circleSectorUtils.polarToCartesian(x, y, radius, startAngle);\n            // Split full circles into two halves.\n            // Some browsers have problems to render full circles (described by start==end).\n            if (Math.PI * 2 - Math.abs(startAngle - endAngle) < 0.001) {\n                var firstHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle, startAngle + (endAngle - startAngle) / 2, options);\n                var secondHalf = CircleSector.circleSectorUtils.describeSVGArc(x, y, radius, startAngle + (endAngle - startAngle) / 2, endAngle, options);\n                return firstHalf.concat(secondHalf);\n            }\n            // Boolean stored as integers (0|1).\n            var largeArcFlag = endAngle - startAngle <= Math.PI ? 0 : 1;\n            var sweepFlag = 1;\n            var pathData = [];\n            if (options.moveToStart) {\n                pathData.push('M', start.x, start.y);\n            }\n            pathData.push(\"A\", radius, radius, 0, largeArcFlag, sweepFlag, end.x, end.y);\n            return pathData;\n        }\n    };\n    return CircleSector;\n}()); // END class\nexports.CircleSector = CircleSector;\n//# sourceMappingURL=CircleSector.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2013-08-15\n * @modified 2018-08-16 Added a closure. Removed the wrapper class 'IKRS'. Replaced class THREE.Vector2 by Vertex class.\n * @modified 2018-11-19 Added the fromArray(Array) function.\n * @modified 2018-11-28 Added the locateCurveByPoint(Vertex) function.\n * @modified 2018-12-04 Added the toSVGPathData() function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-03-23 Changed the signatures of getPoint, getPointAt and getTangent (!version 2.0).\n * @modified 2019-12-02 Fixed the updateArcLength function. It used the wrong pointAt function (was renamed before).\n * @modified 2020-02-06 Added the getSubCurveAt(number,number) function.\n * @modified 2020-02-06 Fixed a serious bug in the arc lenght calculation (length was never reset, urgh).\n * @modified 2020-02-07 Added the isInstance(any) function.\n * @modified 2020-02-10 Added the reverse() function.\n * @modified 2020-02-10 Fixed the translate(...) function (returning 'this' was missing).\n * @modified 2020-03-24 Ported this class from vanilla JS to Typescript.\n * @modified 2020-06-03 Added the getBounds() function.\n * @modified 2020-07-14 Changed the moveCurvePoint(...,Vertex) to moveCurvePoint(...,XYCoords), which is more generic.\n * @modified 2020-07-24 Added the getClosestT function and the helper function locateIntervalByDistance(...).\n * @modified 2021-01-20 Added UID.\n * @version 2.5.0\n *\n * @file CubicBezierCurve\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CubicBezierCurve = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar Vector_1 = require(\"./Vector\");\n/**\n * @classdesc A refactored cubic bezier curve class.\n *\n * @requires Bounds\n * @requires Vertex\n * @requires Vector\n * @requires XYCoords\n * @requires UID\n * @requires UIDGenerator\n */\nvar CubicBezierCurve = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name CubicBezierCurve\n     * @param {Vertex} startPoint - The Bézier curve's start point.\n     * @param {Vertex} endPoint   - The Bézier curve's end point.\n     * @param {Vertex} startControlPoint - The Bézier curve's start control point.\n     * @param {Vertex} endControlPoint   - The Bézier curve's end control point.\n     **/\n    function CubicBezierCurve(startPoint, endPoint, startControlPoint, endControlPoint) {\n        /** @constant {number} */\n        this.START_POINT = CubicBezierCurve.START_POINT;\n        /** @constant {number} */\n        this.START_CONTROL_POINT = CubicBezierCurve.START_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_CONTROL_POINT = CubicBezierCurve.END_CONTROL_POINT;\n        /** @constant {number} */\n        this.END_POINT = CubicBezierCurve.END_POINT;\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.startPoint = startPoint;\n        this.startControlPoint = startControlPoint;\n        this.endPoint = endPoint;\n        this.endControlPoint = endControlPoint;\n        this.curveIntervals = 30;\n        // An array of vertices\n        this.segmentCache = [];\n        // An array of floats\n        this.segmentLengths = [];\n        // float\n        this.arcLength = null;\n        this.updateArcLengths();\n    }\n    ;\n    /**\n     * Move the given curve point (the start point, end point or one of the two\n     * control points).\n     *\n     * @method moveCurvePoint\n     * @param {number} pointID - The numeric identicator of the point to move. Use one of the four eBezierPoint constants.\n     * @param {XYCoords} moveAmount - The amount to move the specified point by.\n     * @param {boolean} moveControlPoint - Move the control points along with their path point (if specified point is a path point).\n     * @param {boolean} updateArcLengths - Specifiy if the internal arc segment buffer should be updated.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.moveCurvePoint = function (pointID, moveAmount, moveControlPoint, updateArcLengths) {\n        if (pointID == this.START_POINT) {\n            this.getStartPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.START_CONTROL_POINT) {\n            this.getStartControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_CONTROL_POINT) {\n            this.getEndControlPoint().add(moveAmount);\n        }\n        else if (pointID == this.END_POINT) {\n            this.getEndPoint().add(moveAmount);\n            if (moveControlPoint)\n                this.getEndControlPoint().add(moveAmount);\n        }\n        else {\n            console.log(\"[CubicBezierCurve.moveCurvePoint] pointID '\" + pointID + \"' invalid.\");\n        }\n        if (updateArcLengths)\n            this.updateArcLengths();\n    };\n    ;\n    /**\n     * Translate the whole curve by the given {x,y} amount: moves all four points.\n     *\n     * @method translate\n     * @param {Vertex} amount - The amount to translate this curve by.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.translate = function (amount) {\n        this.startPoint.add(amount);\n        this.startControlPoint.add(amount);\n        this.endControlPoint.add(amount);\n        this.endPoint.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Reverse this curve, means swapping start- and end-point and swapping\n     * start-control- and end-control-point.\n     *\n     * @method reverse\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} this (for chaining).\n     **/\n    CubicBezierCurve.prototype.reverse = function () {\n        var tmp = this.startPoint;\n        this.startPoint = this.endPoint;\n        this.endPoint = tmp;\n        tmp = this.startControlPoint;\n        this.startControlPoint = this.endControlPoint;\n        this.endControlPoint = tmp;\n        return this;\n    };\n    ;\n    /**\n     * Get the total curve length.<br>\n     * <br>\n     * As not all Bézier curved have a closed formula to calculate their lengths, this\n     * implementation uses a segment buffer (with a length of 30 segments). So the\n     * returned length is taken from the arc segment buffer.<br>\n     * <br>\n     * Note that if the curve points were changed and the segment buffer was not\n     * updated this function might return wrong (old) values.\n     *\n     * @method getLength\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number} >= 0\n     **/\n    CubicBezierCurve.prototype.getLength = function () {\n        return this.arcLength;\n    };\n    ;\n    /**\n     * Uptate the internal arc segment buffer and their lengths.<br>\n     * <br>\n     * All class functions update the buffer automatically; if any\n     * curve point is changed by other reasons you should call this\n     * function to keep actual values in the buffer.\n     *\n     * @method updateArcLengths\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {void}\n     **/\n    CubicBezierCurve.prototype.updateArcLengths = function () {\n        var pointA = this.startPoint.clone();\n        var pointB = new Vertex_1.Vertex(0, 0);\n        var curveStep = 1.0 / this.curveIntervals;\n        // Clear segment cache\n        this.segmentCache = [];\n        // Push start point into buffer\n        this.segmentCache.push(this.startPoint);\n        this.segmentLengths = [];\n        var newLength = 0.0;\n        var t = 0.0;\n        var tmpLength;\n        while (t <= 1.0) {\n            pointB = this.getPointAt(t);\n            // Store point into cache\n            this.segmentCache.push(pointB);\n            // Calculate segment length\n            tmpLength = pointA.distance(pointB);\n            this.segmentLengths.push(tmpLength);\n            newLength += tmpLength;\n            pointA = pointB;\n            t += curveStep;\n        }\n        this.arcLength = newLength;\n    };\n    ;\n    /**\n     * Get a 't' (relative position on curve) with the closest distance to point 'p'.\n     *\n     * The returned number is 0.0 <= t <= 1.0. Use the getPointAt(t) function to retrieve the actual curve point.\n     *\n     * This function uses a recursive approach by cutting the curve into several linear segments.\n     *\n     * @param {Vertex} p - The point to find the closest position ('t' on the curve).\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.getClosestT = function (p) {\n        // We would like to have an error that's not larger than 1.0.\n        var desiredEpsilon = 1.0;\n        var result = { t: 0, tPrev: 0.0, tNext: 1.0 };\n        var iteration = 0;\n        do {\n            result = this.locateIntervalByDistance(p, result.tPrev, result.tNext, this.curveIntervals);\n            iteration++;\n            // Be sure: stop after 4 iterations\n        } while (iteration < 4 && this.getPointAt(result.tPrev).distance(this.getPointAt(result.tNext)) > desiredEpsilon);\n        return result.t;\n    };\n    ;\n    /**\n     * This helper function locates the 't' on a fixed step interval with the minimal distance\n     * between the curve (at 't') and the given point.\n     *\n     * Furthermore you must specify a sub curve (start 't' and end 't') you want to search on.\n     * Using tStart=0.0 and tEnd=1.0 will search on the full curve.\n     *\n     * @param {Vertex} p - The point to find the closest curve point for.\n     * @param {number} tStart - The start position (start 't' of the sub curve). Should be >= 0.0.\n     * @param {number} tEnd - The end position (end 't' of the sub curve). Should be <= 1.0.\n     * @param {number} stepCount - The number of steps to check within the interval.\n     *\n     * @return {object} - An object with t, tPrev and tNext (numbers).\n     **/\n    CubicBezierCurve.prototype.locateIntervalByDistance = function (p, tStart, tEnd, stepCount) {\n        var minIndex = -1;\n        var minDist = 0;\n        var t = 0.0;\n        var tDiff = tEnd - tStart;\n        for (var i = 0; i <= stepCount; i++) {\n            t = tStart + tDiff * (i / stepCount);\n            var vert = this.getPointAt(t);\n            var dist = vert.distance(p);\n            if (minIndex == -1 || dist < minDist) {\n                minIndex = i;\n                minDist = dist;\n            }\n        }\n        return { t: tStart + tDiff * (minIndex / stepCount),\n            tPrev: tStart + tDiff * (Math.max(0, minIndex - 1) / stepCount),\n            tNext: tStart + tDiff * (Math.min(stepCount, minIndex + 1) / stepCount)\n        };\n    };\n    ;\n    /**\n     * Get the bounds of this bezier curve.\n     *\n     * The bounds are approximated by the underlying segment buffer; the more segment there are,\n     * the more accurate will be the returned bounds.\n     *\n     * @return {Bounds} The bounds of this curve.\n     **/\n    CubicBezierCurve.prototype.getBounds = function () {\n        var min = new Vertex_1.Vertex(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n        var max = new Vertex_1.Vertex(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);\n        var v;\n        for (var i = 0; i < this.segmentCache.length; i++) {\n            v = this.segmentCache[i];\n            min.x = Math.min(min.x, v.x);\n            min.y = Math.min(min.y, v.y);\n            max.x = Math.max(max.x, v.x);\n            max.y = Math.max(max.y, v.y);\n        }\n        return new Bounds_1.Bounds(min, max);\n    };\n    ;\n    /**\n     * Get the start point of the curve.<br>\n     * <br>\n     * This function just returns this.startPoint.\n     *\n     * @method getStartPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startPoint\n     **/\n    CubicBezierCurve.prototype.getStartPoint = function () {\n        return this.startPoint;\n    };\n    ;\n    /**\n     * Get the end point of the curve.<br>\n     * <br>\n     * This function just returns this.endPoint.\n     *\n     * @method getEndPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endPoint\n     **/\n    CubicBezierCurve.prototype.getEndPoint = function () {\n        return this.endPoint;\n    };\n    ;\n    /**\n     * Get the start control point of the curve.<br>\n     * <br>\n     * This function just returns this.startControlPoint.\n     *\n     * @method getStartControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.startControlPoint\n     **/\n    CubicBezierCurve.prototype.getStartControlPoint = function () {\n        return this.startControlPoint;\n    };\n    ;\n    /**\n     * Get the end control point of the curve.<br>\n     * <br>\n     * This function just returns this.endControlPoint.\n     *\n     * @method getEndControlPoint\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex} this.endControlPoint\n     **/\n    CubicBezierCurve.prototype.getEndControlPoint = function () {\n        return this.endControlPoint;\n    };\n    ;\n    /**\n     * Get one of the four curve points specified by the passt point ID.\n     *\n     * @method getEndControlPoint\n     * @param {number} id - One of START_POINT, START_CONTROL_POINT, END_CONTROL_POINT or END_POINT.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointByID = function (id) {\n        if (id == this.START_POINT)\n            return this.startPoint;\n        if (id == this.END_POINT)\n            return this.endPoint;\n        if (id == this.START_CONTROL_POINT)\n            return this.startControlPoint;\n        if (id == this.END_CONTROL_POINT)\n            return this.endControlPoint;\n        throw new Error(\"Invalid point ID '\" + id + \"'.\");\n    };\n    ;\n    /**\n     * Get the curve point at a given position t, where t is in [0,1].<br>\n     * <br>\n     * @see Line.pointAt\n     *\n     * @method getPointAt\n     * @param {number} t - The position on the curve in [0,1] (0 means at\n     *                     start point, 1 means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPointAt = function (t) {\n        // Perform some powerful math magic\n        var x = this.startPoint.x * Math.pow(1.0 - t, 3) + this.startControlPoint.x * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.x * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.x * Math.pow(t, 3);\n        var y = this.startPoint.y * Math.pow(1.0 - t, 3) + this.startControlPoint.y * 3 * t * Math.pow(1.0 - t, 2)\n            + this.endControlPoint.y * 3 * Math.pow(t, 2) * (1.0 - t) + this.endPoint.y * Math.pow(t, 3);\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Get the curve point at a given position u, where u is in [0,arcLength].<br>\n     * <br>\n     * @see CubicBezierCurve.getPointAt\n     *\n     * @method getPoint\n     * @param {number} u - The position on the curve in [0,arcLength] (0 means at\n     *                     start point, arcLength means at end point, other values address points in bertween).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPoint = function (u) {\n        return this.getPointAt(u / this.arcLength);\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given absolute curve position t in [0,1].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized and relative to (0,0).\n     *\n     * @method getTangent\n     * @param {number} t - The position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangentAt = function (t) {\n        var a = this.getStartPoint();\n        var b = this.getStartControlPoint();\n        var c = this.getEndControlPoint();\n        var d = this.getEndPoint();\n        // This is the shortened one\n        var t2 = t * t;\n        // (1 - t)^2 = (1-t)*(1-t) = 1 - t - t + t^2 = 1 - 2*t + t^2\n        var nt2 = 1 - 2 * t + t2;\n        var tX = -3 * a.x * nt2 +\n            b.x * (3 * nt2 - 6 * (t - t2)) +\n            c.x * (6 * (t - t2) - 3 * t2) +\n            3 * d.x * t2;\n        var tY = -3 * a.y * nt2 +\n            b.y * (3 * nt2 - 6 * (t - t2)) +\n            c.y * (6 * (t - t2) - 3 * t2) +\n            3 * d.y * t2;\n        // Note: my implementation does NOT normalize tangent vectors!\n        return new Vertex_1.Vertex(tX, tY);\n    };\n    ;\n    /**\n     * Get a sub curve at the given start end end offsets (values between 0.0 and 1.0).\n     *\n     * tStart >= tEnd is allowed, you will get a reversed sub curve then.\n     *\n     * @method getSubCurveAt\n     * @param {number} tStart – The start offset of the desired sub curve (must be in [0..1]).\n     * @param {number} tEnd – The end offset if the desired cub curve (must be in [0..1]).\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve} The sub curve as a new curve.\n     **/\n    CubicBezierCurve.prototype.getSubCurveAt = function (tStart, tEnd) {\n        var startVec = new Vector_1.Vector(this.getPointAt(tStart), this.getTangentAt(tStart));\n        var endVec = new Vector_1.Vector(this.getPointAt(tEnd), this.getTangentAt(tEnd).inv());\n        // Tangents are relative. Make absolute.\n        startVec.b.add(startVec.a);\n        endVec.b.add(endVec.a);\n        // This 'splits' the curve at the given point at t.\n        startVec.scale(0.33333333 * (tEnd - tStart));\n        endVec.scale(0.33333333 * (tEnd - tStart));\n        // Draw the bezier curve\n        // pb.draw.cubicBezier( startVec.a, endVec.a, startVec.b, endVec.b, '#8800ff', 2 );\n        return new CubicBezierCurve(startVec.a, endVec.a, startVec.b, endVec.b);\n    };\n    ;\n    /**\n     * Convert a relative curve position u to the absolute curve position t.\n     *\n     * @method convertU2t\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {number}\n     **/\n    CubicBezierCurve.prototype.convertU2T = function (u) {\n        return Math.max(0.0, Math.min(1.0, (u / this.arcLength)));\n    };\n    ;\n    /**\n     * Get the curve tangent vector at a given relative position u in [0,arcLength].<br>\n     * <br>\n     * Note that the returned tangent vector (end point) is not normalized.\n     *\n     * @method getTangent\n     * @param {number} u - The position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getTangent = function (u) {\n        return this.getTangentAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given relative position u in [0,arcLength] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicular\n     * @param {number} u - The relative position on the curve in [0,arcLength].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicular = function (u) {\n        return this.getPerpendicularAt(this.convertU2T(u));\n    };\n    ;\n    /**\n     * Get the curve perpendicular at a given absolute position t in [0,1] as a vector.<br>\n     * <br>\n     * Note that the returned vector (end point) is not normalized.\n     *\n     * @method getPerpendicularAt\n     * @param {number} u - The absolute position on the curve in [0,1].\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {Vertex}\n     **/\n    CubicBezierCurve.prototype.getPerpendicularAt = function (t) {\n        var tangentVector = this.getTangentAt(t);\n        return new Vertex_1.Vertex(tangentVector.y, -tangentVector.x);\n    };\n    ;\n    /**\n     * Clone this Bézier curve (deep clone).\n     *\n     * @method clone\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.prototype.clone = function () {\n        return new CubicBezierCurve(this.getStartPoint().clone(), this.getEndPoint().clone(), this.getStartControlPoint().clone(), this.getEndControlPoint().clone());\n    };\n    ;\n    /**\n     * Check if this and the specified curve are equal.<br>\n     * <br>\n     * All four points need to be equal for this, the Vertex.equals function is used.<br>\n     * <br>\n     * Please note that this function is not type safe (comparison with any object will fail).\n     *\n     * @method clone\n     * @param {CubicBezierCurve} curve - The curve to compare with.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.prototype.equals = function (curve) {\n        // Note: in the earlier vanilla-JS version this was callable with plain objects.\n        //       Let's see if this restricted version works out.\n        if (!curve)\n            return false;\n        if (!curve.startPoint ||\n            !curve.endPoint ||\n            !curve.startControlPoint ||\n            !curve.endControlPoint)\n            return false;\n        return this.startPoint.equals(curve.startPoint)\n            && this.endPoint.equals(curve.endPoint)\n            && this.startControlPoint.equals(curve.startControlPoint)\n            && this.endControlPoint.equals(curve.endControlPoint);\n    };\n    ;\n    /**\n     * Quick check for class instance.\n     * Is there a better way?\n     *\n     * @method isInstance\n     * @param {any} obj - Check if the passed object/value is an instance of CubicBezierCurve.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {boolean}\n     **/\n    CubicBezierCurve.isInstance = function (obj) {\n        // Note: check this again\n        /* OLD VANILLA JS IMPLEMENTATION */\n        /* if( typeof obj != \"object\" )\n            return false;\n        function hasXY(v) {\n            return typeof v != \"undefined\" && typeof v.x == \"number\" && typeof v.y == \"number\";\n        }\n        return typeof obj.startPoint == \"object\" && hasXY(obj.startPoint)\n            && typeof obj.endPoint == \"object\" && hasXY(obj.endPoint)\n            && typeof obj.startControlPoint == \"object\" && hasXY(obj.startControlPoint)\n            && typeof obj.endControlPoint == \"object\" && hasXY(obj.endControlPoint);\n        */\n        return obj instanceof CubicBezierCurve;\n    };\n    ;\n    /**\n     * Create an SVG path data representation of this bézier curve.\n     *\n     * Path data string format is:<br>\n     *  <pre>'M x0 y1 C dx0 dy1 dx1 dy1 x1 x2'</pre><br>\n     * or in other words<br>\n     *   <pre>'M startoint.x startPoint.y C startControlPoint.x startControlPoint.y endControlPoint.x endControlPoint.y endPoint.x endPoint.y'</pre>\n     *\n     * @method toSVGPathData\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string}  The SVG path data string.\n     **/\n    CubicBezierCurve.prototype.toSVGPathData = function () {\n        var buffer = [];\n        buffer.push('M ');\n        buffer.push(this.startPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startPoint.y.toString());\n        buffer.push(' C ');\n        buffer.push(this.startControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.startControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endControlPoint.y.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.x.toString());\n        buffer.push(' ');\n        buffer.push(this.endPoint.y.toString());\n        return buffer.join('');\n    };\n    ;\n    /**\n     * Convert this curve to a JSON string.\n     *\n     * @method toJSON\n     * @param {boolean=} [prettyFormat=false] - If set to true the function will add line breaks.\n     * @instance\n     * @memberof CubicBezierCurve\n     * @return {string} The JSON data.\n     **/\n    CubicBezierCurve.prototype.toJSON = function (prettyFormat) {\n        var jsonString = \"{ \" + // begin object\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startPoint\\\" : [\" + this.getStartPoint().x + \",\" + this.getStartPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endPoint\\\" : [\" + this.getEndPoint().x + \",\" + this.getEndPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"startControlPoint\\\": [\" + this.getStartControlPoint().x + \",\" + this.getStartControlPoint().y + \"], \" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \"\\\"endControlPoint\\\" : [\" + this.getEndControlPoint().x + \",\" + this.getEndControlPoint().y + \"]\" +\n            (prettyFormat ? \"\\n\\t\" : \"\") +\n            \" }\"; // end object\n        return jsonString;\n    };\n    ;\n    /**\n     * Parse a Bézier curve from the given JSON string.\n     *\n     * @method fromJSON\n     * @param {string} jsonString - The JSON data to parse.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the JSON string is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromJSON = function (jsonString) {\n        var obj = JSON.parse(jsonString);\n        return CubicBezierCurve.fromObject(obj);\n    };\n    ;\n    /**\n     * Try to convert the passed object to a CubicBezierCurve.\n     *\n     * @method fromObject\n     * @param {object} obj - The object to convert.\n     * @memberof CubicBezierCurve\n     * @static\n     * @throws An exception if the passed object is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromObject = function (obj) {\n        if (typeof obj !== \"object\")\n            throw \"Can only build from object.\";\n        if (!obj.startPoint)\n            throw \"Object member \\\"startPoint\\\" missing.\";\n        if (!obj.endPoint)\n            throw \"Object member \\\"endPoint\\\" missing.\";\n        if (!obj.startControlPoint)\n            throw \"Object member \\\"startControlPoint\\\" missing.\";\n        if (!obj.endControlPoint)\n            throw \"Object member \\\"endControlPoint\\\" missing.\";\n        return new CubicBezierCurve(new Vertex_1.Vertex(obj.startPoint[0], obj.startPoint[1]), new Vertex_1.Vertex(obj.endPoint[0], obj.endPoint[1]), new Vertex_1.Vertex(obj.startControlPoint[0], obj.startControlPoint[1]), new Vertex_1.Vertex(obj.endControlPoint[0], obj.endControlPoint[1]));\n    };\n    ;\n    /**\n     * Convert a 4-element array of vertices to a cubic bézier curve.\n     *\n     * @method fromArray\n     * @param {Vertex[]} arr -  [ startVertex, endVertex, startControlVertex, endControlVertex ]\n     * @memberof CubicBezierCurve\n     * @throws An exception if the passed array is malformed.\n     * @return {CubicBezierCurve}\n     **/\n    CubicBezierCurve.fromArray = function (arr) {\n        if (!Array.isArray(arr))\n            throw \"Can only build from object.\";\n        if (arr.length != 4)\n            throw \"Can only build from array with four elements.\";\n        return new CubicBezierCurve(arr[0], arr[1], arr[2], arr[3]);\n    };\n    ;\n    /** @constant {number} */\n    CubicBezierCurve.START_POINT = 0;\n    /** @constant {number} */\n    CubicBezierCurve.START_CONTROL_POINT = 1;\n    /** @constant {number} */\n    CubicBezierCurve.END_CONTROL_POINT = 2;\n    /** @constant {number} */\n    CubicBezierCurve.END_POINT = 3;\n    return CubicBezierCurve;\n}());\nexports.CubicBezierCurve = CubicBezierCurve;\n//# sourceMappingURL=CubicBezierCurve.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-09 Added the utils: baseLog(Number,Number) and mapRasterScale(Number,Number).\n * @version  1.0.1\n *\n * @file Grid\n * @fileoverview Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n *               to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n *               rather than a drawable object.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Grid = void 0;\n/**\n * @classdesc A grid class with vertical and horizontal lines (or a raster).\n *\n * Note that the PlotBoilerplate already has a Grid instance member. The Grid is not meant\n * to be added to the canvas as a drawable as it encapsulates more an abstract concept of the canvas\n * rather than a drawable object.\n *\n * @requires Vertex\n */\nvar Grid = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Grid\n     * @param {Vertex} center - The offset of the grid (default is [0,0]).\n     * @param {Vertex} size   - The x- and y-size of the grid.\n     **/\n    function Grid(center, size) {\n        this.center = center;\n        this.size = size;\n    }\n    ;\n    /**\n     * @memberof Grid\n     **/\n    Grid.utils = {\n        /**\n         * Calculate the logarithm of the given number (num) to a given base.<br>\n         * <br>\n         * This function returns the number l with<br>\n         *  <pre>num == Math.pow(base,l)</pre>\n         *\n         * @member baseLog\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} base - The base to calculate the logarithm to.\n         * @param {number} num  - The number to calculate the logarithm for.\n         * @return {number} <pre>log(base)/log(num)</pre>\n         **/\n        baseLog: function (base, num) { return Math.log(base) / Math.log(num); },\n        /**\n         * Calculate the raster scale for a given logarithmic mapping.<br>\n         * <br>\n         * Example (with adjustFactor=2):<br>\n         * <pre>\n         * If scale is 4.33, then the mapping is 1/2 (because 2^2 <= 4.33 <= 2^3)<br>\n         * If scale is 0.33, then the mapping is 2 because (2^(1/2) >= 0.33 >= 2^(1/4)\n         * </pre>\n         *\n         * @member mapRasterScale\n         * @function\n         * @memberof Grid\n         * @inner\n         * @param {number} adjustFactor The base for the logarithmic raster scaling when zoomed.\n         * @param {number} scale        The currently used scale factor.\n         * @return {number}\n         **/\n        mapRasterScale: function (adjustFactor, scale) {\n            var gf = 1.0;\n            if (scale >= 1) {\n                gf = Math.abs(Math.floor(1 / Grid.utils.baseLog(adjustFactor, scale)));\n                gf = 1 / Math.pow(adjustFactor, gf);\n            }\n            else {\n                gf = Math.abs(Math.floor(Grid.utils.baseLog(1 / adjustFactor, 1 / (scale + 1))));\n                //gf = Math.pow( adjustFactor, gf );\n            }\n            return gf;\n        }\n    };\n    return Grid;\n}());\nexports.Grid = Grid;\n//# sourceMappingURL=Grid.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-11 (Alaaf)\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-07-28 Changed the `delete` key code from 8 to 46.\n * @modified 2020-10-04 Changed `window` to `globalThis`.\n * @modified 2020-10-04 Added extended JSDoc.\n * @version  1.0.4\n *\n * @file KeyHandler\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KeyHandler = void 0;\n/**\n * @classdesc A generic key handler.\n *\n * Example\n * =======\n * @example\n *      // Javascript\n *\tnew KeyHandler( { trackAll : true } )\n *\t    .down('enter',function() { console.log('ENTER was hit.'); } )\n *\t    .press('enter',function() { console.log('ENTER was pressed.'); } )\n *\t    .up('enter',function() { console.log('ENTER was released.'); } )\n *\n *          .down('e',function() { console.log('e was hit. shift is pressed?',keyHandler.isDown('shift')); } )\n *\n *\t    .up('windows',function() { console.log('windows was released.'); } )\n *\t;\n */\nvar KeyHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @instance\n     * @memberof KeyHandler\n     * @param {HTMLElement} options.element (optional) The HTML element to listen on; if null then 'window' will be used.\n     * @param {boolean} options.trackAll (optional) Set to true if you want to keep track of _all_ keys (keyStatus).\n    **/\n    function KeyHandler(options) {\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = {};\n        options = options || {};\n        this.element = options.element ? options.element : globalThis;\n        this.downListeners = [];\n        this.pressListeners = [];\n        this.upListeners = [];\n        this.keyStates = [];\n        // This could be made configurable in a later version. It allows to\n        // keep track of the key status no matter if there are any listeners\n        // on the key or not.\n        this.trackAllKeys = options.trackAll || false;\n        // Install the listeners\n        this.installListeners();\n    }\n    ;\n    /**\n     * A helper function to fire key events from this KeyHandler.\n     *\n     * @param {KeyboardEvent} event - The key event to fire.\n     * @param {Array<XKeyListener>} listener - The listeners to fire to.\n     */\n    KeyHandler.prototype.fireEvent = function (event, listeners) {\n        var hasListener = false;\n        for (var i in listeners) {\n            var lis = listeners[i];\n            if (lis.keyCode != event.keyCode)\n                continue;\n            lis.listener(event);\n            hasListener = true;\n        }\n        return hasListener;\n    };\n    ;\n    /**\n     * Internal function to fire a new keydown event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireDownEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireDownEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.downListeners) || handler.trackAllKeys) {\n            // Down event has listeners. Update key state.\n            handler.keyStates[e.keyCode] = 'down';\n        }\n    };\n    ;\n    /**\n     * Internal function to fire a new keypress event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name firePressEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return void\n     */\n    KeyHandler.prototype.firePressEvent = function (e, handler) {\n        handler.fireEvent(e, handler.pressListeners);\n    };\n    ;\n    /**\n     * Internal function to fire a new keyup event to all listeners.\n     * You should not call this function on your own unless you know what you do.\n     *\n     * @name fireUpEvent\n     * @memberof KeyHandler\n     * @instance\n     * @private\n     * @param {KeyboardEvent} e\n     * @param {KeyHandler} handler\n     * @return {void}\n     */\n    KeyHandler.prototype.fireUpEvent = function (e, handler) {\n        if (handler.fireEvent(e, handler.upListeners) || handler.trackAllKeys) {\n            // Up event has listeners. Clear key state.\n            delete handler.keyStates[e.keyCode];\n        }\n    };\n    ;\n    /**\n     * Resolve the key/name code.\n     */\n    KeyHandler.key2code = function (key) {\n        if (typeof key == 'number')\n            return key;\n        if (typeof key != 'string')\n            throw \"Unknown key name or key type (should be a string or integer): \" + key;\n        if (KeyHandler.KEY_CODES[key])\n            return KeyHandler.KEY_CODES[key];\n        throw \"Unknown key (cannot resolve key code): \" + key;\n    };\n    ;\n    /**\n     * Install the required listeners into the initially passed element.\n     *\n     * By default the listeners are installed into the root element specified on\n     * construction (or 'window').\n     */\n    KeyHandler.prototype.installListeners = function () {\n        var _self = this;\n        this.element.addEventListener('keydown', this._keyDownListener = function (e) { _self.fireDownEvent(e, _self); });\n        this.element.addEventListener('keypress', this._keyPressListener = function (e) { _self.firePressEvent(e, _self); });\n        this.element.addEventListener('keyup', this._keyUpListener = function (e) { _self.fireUpEvent(e, _self); });\n    };\n    ;\n    /**\n     *  Remove all installed event listeners from the underlying element.\n     */\n    KeyHandler.prototype.releaseListeners = function () {\n        this.element.removeEventListener('keydown', this._keyDownListener);\n        this.element.removeEventListener('keypress', this._keyPressListener);\n        this.element.removeEventListener('keyup', this._keyUpListener);\n    };\n    ;\n    /**\n     * Listen for key down. This function allows chaining.\n     *\n     * Example: new KeyHandler().down('enter',function() {console.log('Enter hit.')});\n     *\n     * @name down\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key -  Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} e -  The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.down = function (key, listener) {\n        this.downListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key press.\n     *\n     * Example: new KeyHandler().press('enter',function() {console.log('Enter pressed.')});\n     *\n     * @name press\n     * @memberof KeyHandler\n     * @instance\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void} listener - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.press = function (key, listener) {\n        this.pressListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Listen for key up.\n     *\n     * Example: new KeyHandler().up('enter',function() {console.log('Enter released.')});\n     *\n     * @name up\n     * @memberof KeyHandler\n     * @instance\n     * @param {string} key - Any key identifier, key code or one from the KEY_CODES list.\n     * @param {(e:KeyboardEvent)=>void)} e - The callback to be triggered.\n     * @return {KeyHandler} this\n     */\n    KeyHandler.prototype.up = function (key, listener) {\n        this.upListeners.push({ key: key, keyCode: KeyHandler.key2code(key), listener: listener });\n        return this;\n    };\n    ;\n    /**\n     * Check if a specific key is currently held pressed.\n     *\n     * @param {string|number} key - Any key identifier, key code or one from the KEY_CODES list.\n     */\n    KeyHandler.prototype.isDown = function (key) {\n        if (typeof key == 'number')\n            return this.keyStates[key] ? true : false;\n        else\n            return this.keyStates[KeyHandler.key2code(key)] ? true : false;\n    };\n    /**\n     * Source:\n     * https://keycode.info/\n     */\n    KeyHandler.KEY_CODES = {\n        'break': 3,\n        'backspace': 8,\n        // 'delete'\t : 8, // alternate: 46\n        'tab': 9,\n        'clear': 12,\n        'enter': 13,\n        'shift': 16,\n        'ctrl': 17,\n        'alt': 18,\n        'pause': 19,\n        // 'break'\t         : 19,\n        'capslock': 20,\n        'hangul': 21,\n        'hanja': 25,\n        'escape': 27,\n        'conversion': 28,\n        'non-conversion': 29,\n        'spacebar': 32,\n        'pageup': 33,\n        'pagedown': 34,\n        'end': 35,\n        'home': 36,\n        'leftarrow': 37,\n        'uparrow': 38,\n        'rightarrow': 39,\n        'downarrow': 40,\n        'select': 41,\n        'print': 42,\n        'execute': 43,\n        'printscreen': 44,\n        'insert': 45,\n        'delete': 46,\n        'help': 47,\n        '0': 48,\n        '1': 49,\n        '2': 50,\n        '3': 51,\n        '4': 52,\n        '5': 53,\n        '6': 54,\n        '7': 55,\n        '8': 56,\n        '9': 57,\n        ':': 58,\n        'semicolon (firefox)': 59,\n        'equals': 59,\n        '<': 60,\n        'equals (firefox)': 61,\n        'ß': 63,\n        '@ (firefox)': 64,\n        'a': 65,\n        'b': 66,\n        'c': 67,\n        'd': 68,\n        'e': 69,\n        'f': 70,\n        'g': 71,\n        'h': 72,\n        'i': 73,\n        'j': 74,\n        'k': 75,\n        'l': 76,\n        'm': 77,\n        'n': 78,\n        'o': 79,\n        'p': 80,\n        'q': 81,\n        'r': 82,\n        's': 83,\n        't': 84,\n        'u': 85,\n        'v': 86,\n        'w': 87,\n        'x': 88,\n        'y': 89,\n        'z': 90,\n        'windows': 91,\n        'leftcommand': 91,\n        'chromebooksearch': 91,\n        'rightwindowkey': 92,\n        'windowsmenu': 93,\n        'rightcommant': 93,\n        'sleep': 95,\n        'numpad0': 96,\n        'numpad1': 97,\n        'numpad2': 98,\n        'numpad3': 99,\n        'numpad4': 100,\n        'numpad5': 101,\n        'numpad6': 102,\n        'numpad7': 103,\n        'numpad8': 104,\n        'numpad9': 105,\n        'multiply': 106,\n        'add': 107,\n        'numpadperiod': 108,\n        'subtract': 109,\n        'decimalpoint': 110,\n        'divide': 111,\n        'f1': 112,\n        'f2': 113,\n        'f3': 114,\n        'f4': 115,\n        'f5': 116,\n        'f6': 117,\n        'f7': 118,\n        'f8': 119,\n        'f9': 120,\n        'f10': 121,\n        'f11': 122,\n        'f12': 123,\n        'f13': 124,\n        'f14': 125,\n        'f15': 126,\n        'f16': 127,\n        'f17': 128,\n        'f18': 129,\n        'f19': 130,\n        'f20': 131,\n        'f21': 132,\n        'f22': 133,\n        'f23': 134,\n        'f24': 135,\n        'numlock': 144,\n        'scrolllock': 145,\n        '^': 160,\n        '!': 161,\n        // '؛' \t : 162 // (arabic semicolon)\n        '#': 163,\n        '$': 164,\n        'ù': 165,\n        'pagebackward': 166,\n        'pageforward': 167,\n        'refresh': 168,\n        'closingparen': 169,\n        '*': 170,\n        '~+*': 171,\n        // 'home'\t         : 172,\n        'minus': 173,\n        // 'mute'           : 173,\n        // 'unmute'\t : 173,\n        'decreasevolumelevel': 174,\n        'increasevolumelevel': 175,\n        'next': 176,\n        'previous': 177,\n        'stop': 178,\n        'play/pause': 179,\n        'email': 180,\n        'mute': 181,\n        'unmute': 181,\n        //'decreasevolumelevel'\t182 // firefox\n        //'increasevolumelevel'\t183 // firefox\n        'semicolon': 186,\n        'ñ': 186,\n        'equal': 187,\n        'comma': 188,\n        'dash': 189,\n        'period': 190,\n        'forwardslash': 191,\n        'ç': 191,\n        'grave accent': 192,\n        //'ñ' 192,\n        'æ': 192,\n        'ö': 192,\n        '?': 193,\n        '/': 193,\n        '°': 193,\n        // 'numpadperiod'\t : 194, // chrome\n        'openbracket': 219,\n        'backslash': 220,\n        'closebracket': 221,\n        'å': 221,\n        'singlequote': 222,\n        'ø': 222,\n        'ä': 222,\n        '`': 223,\n        // 'left or right ⌘ key (firefox)'\t224\n        'altgr': 225,\n        // '< /git >, left back slash'\t226\n        'GNOME Compose Key': 230,\n        'XF86Forward': 233,\n        'XF86Back': 234,\n        'alphanumeric': 240,\n        'hiragana': 242,\n        'katakana': 242,\n        'half-width': 243,\n        'full-width': 243,\n        'kanji': 244,\n        'unlocktrackpad': 251,\n        'toggletouchpad': 255\n    };\n    return KeyHandler;\n}());\nexports.KeyHandler = KeyHandler;\n//# sourceMappingURL=KeyHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2016-03-12\n * @modified 2018-12-05 Refactored the code from the morley-triangle script.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-28 Fixed a bug in the Line.sub( Vertex ) function (was not working).\n * @modified 2019-09-02 Added the Line.add( Vertex ) function.\n * @modified 2019-09-02 Added the Line.denominator( Line ) function.\n * @modified 2019-09-02 Added the Line.colinear( Line ) function.\n * @modified 2019-09-02 Fixed an error in the Line.intersection( Line ) function (class Point was renamed to Vertex).\n * @modified 2019-12-15 Added the Line.moveTo(Vertex) function.\n * @modified 2020-03-16 The Line.angle(Line) parameter is now optional. The baseline (x-axis) will be used if not defined.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-12-04 The `intersection` function returns undefined if both lines are parallel.\n * @version  2.1.3\n *\n * @file Line\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Line = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A line consists of two vertices a and b.<br>\n * <br>\n * This is some refactored code from my 'Morley Triangle' test<br>\n *   https://github.com/IkarosKappler/morleys-trisector-theorem\n *\n * @requires Vertex\n */\nvar Line = /** @class */ (function (_super) {\n    __extends(Line, _super);\n    /**\n     * Creates an instance of Line.\n     *\n     * @constructor\n     * @name Line\n     * @param {Vertex} a The line's first point.\n     * @param {Vertex} b The line's second point.\n     **/\n    function Line(a, b) {\n        var _this = _super.call(this, a, b, function (a, b) { return new Line(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Line\";\n        return _this;\n    }\n    /**\n     * Get the intersection if this line and the specified line.\n     *\n     * @method intersection\n     * @param {Line} line The second line.\n     * @return {Vertex|undefined} The intersection (may lie outside the end-points) or `undefined` if both lines are parallel.\n     * @instance\n     * @memberof Line\n     **/\n    // !!! DO NOT MOVE TO VertTuple\n    Line.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // Catch NaN?\n        var x = this.a.x + (a * (this.b.x - this.a.x));\n        var y = this.a.y + (a * (this.b.y - this.a.y));\n        if (isNaN(a) || isNaN(x) || isNaN(y)) {\n            return undefined;\n        }\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(x, y);\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {options} p - A set of options, like the 'classname' to use\n     *                      for the line object.\n     * @return {string} The SVG string representing this line.\n     * @instance\n     * @memberof Line\n     **/\n    Line.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<line');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + this.b.x + '\"');\n        buffer.push(' y2=\"' + this.b.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return Line;\n}(VertTuple_1.VertTuple));\nexports.Line = Line;\n//# sourceMappingURL=Line.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-03-19\n * @modified 2018-04-28 Added the param 'wasDragged'.\n * @modified 2018-08-16 Added the param 'dragAmount'.\n * @modified 2018-08-27 Added the param 'element'.\n * @modified 2018-11-11 Changed the scope from a simple global var to a member of window/_context.\n * @modified 2018-11-19 Renamed the 'mousedown' function to 'down' and the 'mouseup' function to 'up'.\n * @modified 2018-11-28 Added the 'wheel' listener.\n * @modified 2018-12-09 Cleaned up some code.\n * @modified 2019-02-10 Cleaned up some more code.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-04-08 Fixed the click event (internally fired a 'mouseup' event) (1.0.10)\n * @modified 2020-04-08 Added the optional 'name' property. (1.0.11)\n * @modified 2020-04-08 The new version always installs internal listenrs to track drag events even\n *                      if there is no external drag listener installed (1.1.0).\n * @modified 2020-10-04 Added extended JSDoc comments.\n * @modified 2020-11-25 Added the `isTouchEvent` param.\n * @modified 2021-01-10 The mouse handler is now also working with SVGElements.\n * @version  1.2.0\n *\n * @file MouseHandler\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MouseHandler = exports.XWheelEvent = exports.XMouseEvent = void 0;\nvar XMouseEvent = /** @class */ (function (_super) {\n    __extends(XMouseEvent, _super);\n    function XMouseEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XMouseEvent;\n}(MouseEvent));\nexports.XMouseEvent = XMouseEvent;\nvar XWheelEvent = /** @class */ (function (_super) {\n    __extends(XWheelEvent, _super);\n    function XWheelEvent() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return XWheelEvent;\n}(WheelEvent));\nexports.XWheelEvent = XWheelEvent;\n/**\n * @classdesc A simple mouse handler for demos.\n * Use to avoid load massive libraries like jQuery.\n *\n * @requires XYCoords\n */\nvar MouseHandler = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Pass the DOM element you want to receive mouse events from.\n     *\n     * Usage\n     * =====\n     * @example\n     *   // Javascript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( function(e) {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( function(e) {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( function(e) {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( function(e) {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( function(e) {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( function(e) {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @example\n     *   // Typescript\n     *   new MouseHandler( document.getElementById('mycanvas') )\n     *\t    .drag( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse dragged: ' + JSON.stringify(e) );\n     *\t\tif( e.params.leftMouse ) ;\n     *\t\telse if( e.params.rightMouse ) ;\n     *\t    } )\n     *\t    .move( (e:XMouseEvent) => {\n     *\t\tconsole.log( 'Mouse moved: ' + JSON.stringify(e.params) );\n     *\t    } )\n     *          .up( (e:XMouseEvent) => {\n     *              console.log( 'Mouse up. Was dragged?', e.params.wasDragged );\n     *          } )\n     *          .down( (e:XMouseEvent) => {\n     *              console.log( 'Mouse down.' );\n     *          } )\n     *          .click( (e:XMouseEvent) => {\n     *              console.log( 'Click.' );\n     *          } )\n     *          .wheel( (e:XWheelEvent) => {\n     *              console.log( 'Wheel. delta='+e.deltaY );\n     *          } )\n     *\n     * @constructor\n     * @instance\n     * @memberof MouseHandler\n     * @param {HTMLElement} element\n     **/\n    function MouseHandler(element, name) {\n        this.mouseDownPos = undefined;\n        this.mouseDragPos = undefined;\n        // TODO: cc\n        // private mousePos       : { x:number, y:number }|undefined = undefined;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Some private vars to store the current mouse/position/button state.\n        // +-------------------------------------------------\n        this.name = name;\n        this.element = element;\n        this.mouseDownPos = null;\n        this.mouseDragPos = null;\n        // this.mousePos     = null;\n        this.mouseButton = -1;\n        this.listeners = {};\n        this.installed = {};\n        this.handlers = {};\n        // +----------------------------------------------------------------------\n        // | Define the internal event handlers.\n        // |\n        // | They will dispatch the modified event (relative mouse position,\n        // | drag offset, ...) to the callbacks.\n        // +-------------------------------------------------\n        var _self = this;\n        this.handlers['mousemove'] = function (e) {\n            if (_self.listeners.mousemove)\n                _self.listeners.mousemove(_self.mkParams(e, 'mousemove'));\n            if (_self.mouseDragPos && _self.listeners.drag)\n                _self.listeners.drag(_self.mkParams(e, 'drag'));\n            if (_self.mouseDownPos)\n                _self.mouseDragPos = _self.relPos(e);\n        };\n        this.handlers['mouseup'] = function (e) {\n            if (_self.listeners.mouseup)\n                _self.listeners.mouseup(_self.mkParams(e, 'mouseup'));\n            _self.mouseDragPos = undefined;\n            _self.mouseDownPos = undefined;\n            _self.mouseButton = -1;\n        };\n        this.handlers['mousedown'] = function (e) {\n            _self.mouseDragPos = _self.relPos(e);\n            _self.mouseDownPos = _self.relPos(e);\n            _self.mouseButton = e.button;\n            if (_self.listeners.mousedown)\n                _self.listeners.mousedown(_self.mkParams(e, 'mousedown'));\n        };\n        this.handlers['click'] = function (e) {\n            if (_self.listeners.click)\n                _self.listeners.click(_self.mkParams(e, 'click'));\n        };\n        this.handlers['wheel'] = function (e) {\n            if (_self.listeners.wheel)\n                _self.listeners.wheel(_self.mkParams(e, 'wheel'));\n        };\n        this.element.addEventListener('mousemove', this.handlers['mousemove']);\n        this.element.addEventListener('mouseup', this.handlers['mouseup']);\n        this.element.addEventListener('mousedown', this.handlers['mousedown']);\n        this.element.addEventListener('click', this.handlers['click']);\n        this.element.addEventListener('wheel', this.handlers['wheel']);\n    }\n    /**\n     * Get relative position from the given MouseEvent.\n     *\n     * @name relPos\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @return {XYCoords} The relative mouse coordinates.\n     */\n    MouseHandler.prototype.relPos = function (e) {\n        return { x: e.offsetX,\n            y: e.offsetY\n        };\n    };\n    ;\n    /**\n     * Build the extended event params.\n     *\n     * @name mkParams\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {MouseEvent} e - The mouse event to get the relative position for.\n     * @param {string} eventName - The name of the firing event.\n     * @return {XMouseEvent}\n     */\n    MouseHandler.prototype.mkParams = function (e, eventName) {\n        var rel = this.relPos(e);\n        var xEvent = e;\n        xEvent.params = {\n            element: this.element,\n            name: eventName,\n            isTouchEvent: false,\n            pos: rel,\n            button: this.mouseButton,\n            leftButton: this.mouseButton == 0,\n            middleButton: this.mouseButton == 1,\n            rightButton: this.mouseButton == 2,\n            mouseDownPos: this.mouseDownPos,\n            draggedFrom: this.mouseDragPos,\n            wasDragged: (this.mouseDownPos != null && (this.mouseDownPos.x != rel.x || this.mouseDownPos.y != rel.y)),\n            dragAmount: (this.mouseDownPos != null ? { x: rel.x - this.mouseDragPos.x, y: rel.y - this.mouseDragPos.y } : { x: 0, y: 0 })\n        };\n        return xEvent;\n    };\n    /**\n     * Install a new listener.\n     * Please note that this mouse handler can only handle one listener per event type.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to listen for.\n     * @return {void}\n     */\n    MouseHandler.prototype.listenFor = function (eventName) {\n        if (this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        this.installed[eventName] = true;\n    };\n    /**\n     * Un-install a new listener.\n     *\n     * @name listenFor\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} eventName - The name of the firing event to unlisten for.\n     * @return {void}\n     */\n    MouseHandler.prototype.unlistenFor = function (eventName) {\n        if (!this.installed[eventName])\n            return;\n        // In the new version 1.1.0 has all internal listeners installed by default.\n        delete this.installed[eventName];\n    };\n    /**\n     * Installer function to listen for a specific event: mouse-drag.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name drag\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The drag-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.drag = function (callback) {\n        if (this.listeners.drag)\n            this.throwAlreadyInstalled('drag');\n        this.listeners.drag = callback;\n        this.listenFor('mousedown');\n        this.listenFor('mousemove');\n        this.listenFor('mouseup');\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-move.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name move\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The move-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.move = function (callback) {\n        if (this.listeners.mousemove)\n            this.throwAlreadyInstalled('mousemove');\n        this.listenFor('mousemove');\n        this.listeners.mousemove = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-up.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name up\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The up-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.up = function (callback) {\n        if (this.listeners.mouseup)\n            this.throwAlreadyInstalled('mouseup');\n        this.listenFor('mouseup');\n        this.listeners.mouseup = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-down.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name down\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The down-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.down = function (callback) {\n        if (this.listeners.mousedown)\n            this.throwAlreadyInstalled('mousedown');\n        this.listenFor('mousedown');\n        this.listeners.mousedown = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-click.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name click\n     * @memberof MouseHandler\n     * @instance\n     * @param {XMouseCallback} callback - The click-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.click = function (callback) {\n        if (this.listeners.click)\n            this.throwAlreadyInstalled('click');\n        this.listenFor('click');\n        this.listeners.click = callback;\n        return this;\n    };\n    ;\n    /**\n     * Installer function to listen for a specific event: mouse-wheel.\n     * Pass your callbacks here.\n     *\n     * Note: this support chaining.\n     *\n     * @name wheel\n     * @memberof MouseHandler\n     * @instance\n     * @param {XWheelCallback} callback - The wheel-callback to listen for.\n     * @return {MouseHandler} this\n     */\n    MouseHandler.prototype.wheel = function (callback) {\n        if (this.listeners.wheel)\n            this.throwAlreadyInstalled('wheel');\n        this.listenFor('wheel');\n        this.listeners.wheel = callback;\n        return this;\n    };\n    ;\n    /**\n     * An internal function to throw events.\n     *\n     * @name throwAlreadyInstalled\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @param {string} name - The name of the event.\n     * @return {void}\n     */\n    MouseHandler.prototype.throwAlreadyInstalled = function (name) {\n        throw \"This MouseHandler already has a '\" + name + \"' callback. To keep the code simple there is only room for one.\";\n    };\n    ;\n    /**\n     * Call this when your work is done.\n     *\n     * The function will un-install all event listeners.\n     *\n     * @name destroy\n     * @memberof MouseHandler\n     * @instance\n     * @private\n     * @return {void}\n     */\n    MouseHandler.prototype.destroy = function () {\n        this.unlistenFor('mousedown');\n        this.unlistenFor('mousemove');\n        this.unlistenFor('moseup');\n        this.unlistenFor('click');\n        this.unlistenFor('wheel');\n        this.element.removeEventListener('mousemove', this.handlers['mousemove']);\n        this.element.removeEventListener('mouseup', this.handlers['mousedown']);\n        this.element.removeEventListener('mousedown', this.handlers['mousedown']);\n        this.element.removeEventListener('click', this.handlers['click']);\n        this.element.removeEventListener('wheel', this.handlers['wheel']);\n    };\n    return MouseHandler;\n}());\nexports.MouseHandler = MouseHandler;\n//# sourceMappingURL=MouseHandler.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-03-23 Added JSDoc tags.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n *\n * @file PBImage\n * @fileoverview As native Image objects have only a position and with\n *               and height thei are not suitable for UI dragging interfaces.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PBImage = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc A wrapper for image objects. Has an upper left and a lower right corner point.\n *\n * @requires Vertex\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n */\nvar PBImage = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PBImage\n     * @param {Image} image - The actual image.\n     * @param {Vertex} upperLeft - The upper left corner.\n     * @param {Vertex} lowerRight - The lower right corner.\n     **/\n    function PBImage(image, upperLeft, lowerRight) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"PBImage\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.image = image;\n        this.upperLeft = upperLeft;\n        this.lowerRight = lowerRight;\n    }\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof PBImage\n     **/\n    PBImage.prototype.toSVGString = function (options) {\n        console.warn(\"PBImage is not yet SVG serializable. Returning empty SVG string.\");\n        return \"\";\n    };\n    ;\n    return PBImage;\n}());\nexports.PBImage = PBImage;\n//# sourceMappingURL=PBImage.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-10-23\n * @modified 2018-11-19 Added multi-select and multi-drag.\n * @modified 2018-12-04 Added basic SVG export.\n * @modified 2018-12-09 Extended the constructor (canvas).\n * @modified 2018-12-18 Added the config.redrawOnResize param.\n * @modified 2018-12-18 Added the config.defaultCanvas{Width,Height} params.\n * @modified 2018-12-19 Added CSS scaling.\n * @modified 2018-12-28 Removed the unused 'drawLabel' param. Added the 'enableMouse' and 'enableKeys' params.\n * @modified 2018-12-29 Added the 'drawOrigin' param.\n * @modified 2018-12-29 Renamed the 'autoCenterOffset' param to 'autoAdjustOffset'. Added the params 'offsetAdjustXPercent' and 'offsetAdjustYPercent'.\n * @modified 2019-01-14 Added params 'drawBezierHandleLines' and 'drawBezierHandlePoints'. Added the 'redraw' praam to the add() function.\n * @modified 2019-01-16 Added params 'drawHandleLines' and 'drawHandlePoints'. Added the new params to the dat.gui interface.\n * @modified 2019-01-30 Added the 'Vector' type (extending the Line class).\n * @modified 2019-01-30 Added the 'PBImage' type (a wrapper for images).\n * @modified 2019-02-02 Added the 'canvasWidthFactor' and 'canvasHeightFactor' params.\n * @modified 2019-02-03 Removed the drawBackgroundImage() function, with had no purpose at all. Just add an image to the drawables-list.\n * @modified 2019-02-06 Vertices (instace of Vertex) can now be added. Added the 'draggable' attribute to the vertex attributes.\n * @modified 2019-02-10 Fixed a draggable-bug in PBImage handling (scaling was not possible).\n * @modified 2019-02-10 Added the 'enableTouch' option (default is true).\n * @modified 2019-02-14 Added the console for debugging (setConsole(object)).\n * @modified 2019-02-19 Added two new constants: DEFAULT_CLICK_TOLERANCE and DEFAULT_TOUCH_TOLERANCE.\n * @modified 2019-02-19 Added the second param to the locatePointNear(Vertex,Number) function.\n * @modified 2019-02-20 Removed the 'loadFile' entry from the GUI as it was experimental and never in use.\n * @modified 2019-02-23 Removed the 'rebuild' function as it had no purpose.\n * @modified 2019-02-23 Added scaling of the click-/touch-tolerance with the CSS scale.\n * @modified 2019-03-23 Added JSDoc tags. Changed the default value of config.drawOrigin to false.\n * @modified 2019-04-03 Fixed the touch-drag position detection for canvas elements that are not located at document position (0,0).\n * @modified 2019-04-03 Tweaked the fit-to-parent function to work with paddings and borders.\n * @modified 2019-04-28 Added the preClear callback param (called before the canvas was cleared on redraw and before any elements are drawn).\n * @modified 2019-09-18 Added basics for WebGL support (strictly experimental).\n * @modified 2019-10-03 Added the .beginDrawCycle call in the redraw function.\n * @modified 2019-11-06 Added fetch.num, fetch.val, fetch.bool, fetch.func functions.\n * @modified 2019-11-13 Fixed an issue with the mouse-sensitive area around vertices (were affected by zoom).\n * @modified 2019-11-13 Added the 'enableMouseWheel' param.\n * @modified 2019-11-18 Added the Triangle class as a regular drawable element.\n * @modified 2019-11-18 The add function now works with arrays, too.\n * @modified 2019-11-18 Added the _handleColor helper function to determine the render color of non-draggable vertices.\n * @modified 2019-11-19 Fixed a bug in the resizeCanvas function; retina resolution was not possible.\n * @modified 2019-12-04 Added relative positioned zooming.\n * @modified 2019-12-04 Added offsetX and offsetY params.\n * @modified 2019-12-04 Added an 'Set to fullsize retina' button to the GUI config.\n * @modified 2019-12-07 Added the drawConfig for lines, polygons, ellipse, triangles, bezier curves and image control lines.\n * @modified 2019-12-08 Fixed a css scale bug in the viewport() function.\n * @modified 2019-12-08 Added the drawconfig UI panel (line colors and line widths).\n * @modified 2020-02-06 Added handling for the end- and end-control-points of non-cirular Bézier paths (was still missing).\n * @modified 2020-02-06 Fixed a drag-amount bug in the move handling of end points of Bezier paths (control points was not properly moved when non circular).\n * @modified 2020-03-28 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-03-29 Fixed the enableSVGExport flag (read enableEport before).\n * @modified 2020-05-09 Included the Cirlcle class.\n * @modified 2020-06-22 Added the rasterScaleX and rasterScaleY config params.\n * @modified 2020-06-03 Fixed the selectedVerticesOnPolyon(Polygon) function: non-selectable vertices were selected too, before.\n * @modified 2020-07-06 Replacing Touchy.js by AlloyFinger.js\n * @modified 2020-07-27 Added the getVertexNear(XYCoords,number) function\n * @modified 2020-07-27 Extended the remove(Drawable) function: vertices are now removed, too.\n * @modified 2020-07-28 Added PlotBoilerplate.revertMousePosition(number,number) –  the inverse function of transformMousePosition(...).\n * @modified 2020-07-31 Added PlotBoilerplate.getDraggedElementCount() to check wether any elements are currently being dragged.\n * @modified 2020-08-19 Added the VertexAttributes.visible attribute to make vertices invisible.\n * @modified 2020-11-17 Added pure click handling (no dragEnd and !wasMoved jiggliny any more) to the PlotBoilerplate.\n * @modified 2020-12-11 Added the `removeAll(boolean)` function.\n * @modified 2020-12-17 Added the `CircleSector` drawable.\n * @modified 2021-01-04 Avoiding multiple redraw call on adding multiple Drawables (array).\n * @modified 2021-01-08 Added param `draw:DraLib<void>` to the methods `drawVertices`, `drawGrid` and `drawSelectPolygon`.\n * @modified 2021-01-08 Added the customizable `drawAll(...)` function.\n * @modified 2021-01-09 Added the `drawDrawable(...)` function.\n * @modified 2021-01-10 Added the `eventCatcher` element (used to track mouse events on SVGs).\n * @modified 2021-01-26 Fixed SVG resizing.\n * @modified 2021-01-26 Replaced the old SVGBuilder by the new `drawutilssvg` library.\n * @modified 2021-02-08 Fixed a lot of es2015 compatibility issues.\n * @version  1.12.3\n *\n * @file PlotBoilerplate\n * @fileoverview The main class.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PlotBoilerplate = void 0;\n// import AlloyFinger, { TouchMoveEvent, TouchPinchEvent } from \"alloyfinger-typescript/dist/types\";\n//import AlloyFinger, { TouchMoveEvent, TouchPinchEvent } from \"alloyfinger-typescript/src/ts\";\nvar alloyfinger_typescript_1 = require(\"alloyfinger-typescript\");\nvar draw_1 = require(\"./draw\");\nvar drawgl_1 = require(\"./drawgl\");\nvar drawutilssvg_1 = require(\"./utils/helpers/drawutilssvg\");\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar CircleSector_1 = require(\"./CircleSector\");\nvar Grid_1 = require(\"./Grid\");\nvar KeyHandler_1 = require(\"./KeyHandler\");\nvar Line_1 = require(\"./Line\");\nvar MouseHandler_1 = require(\"./MouseHandler\");\nvar PBImage_1 = require(\"./PBImage\");\nvar Polygon_1 = require(\"./Polygon\");\nvar Triangle_1 = require(\"./Triangle\");\nvar VEllipse_1 = require(\"./VEllipse\");\nvar Vector_1 = require(\"./Vector\");\nvar Vertex_1 = require(\"./Vertex\");\nvar VertexAttr_1 = require(\"./VertexAttr\");\n/**\n * @classdesc The main class of the PlotBoilerplate.\n *\n * @requires Vertex\n * @requires Line\n * @requires Vector\n * @requires Polygon\n * @requires PBImage\n * @requires VEllipse\n * @requires Circle\n * @requires MouseHandler\n * @requires KeyHandler\n * @requires VertexAttr\n * @requires CubicBezierCurve\n * @requires BezierPath\n * @requires Drawable\n * @requires DrawConfig\n * @requires IHooks\n * @requires PBParams\n * @requires Triangle\n * @requires drawutils\n * @requires drawutilsgl\n * @requires SVGSerializable\n * @requires XYCoords\n * @requires XYDimension\n */\nvar PlotBoilerplate = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name PlotBoilerplate\n     * @public\n     * @param {object} config={} - The configuration.\n     * @param {HTMLCanvasElement} config.canvas - Your canvas element in the DOM (required).\n     * @param {boolean=} [config.fullSize=true] - If set to true the canvas will gain full window size.\n     * @param {boolean=} [config.fitToParent=true] - If set to true the canvas will gain the size of its parent container (overrides fullSize).\n     * @param {number=}  [config.scaleX=1.0] - The initial x-zoom. Default is 1.0.\n     * @param {number=}  [config.scaleY=1.0] - The initial y-zoom. Default is 1.0.\n     * @param {number=}  [config.offsetX=1.0] - The initial x-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {number=}  [config.offsetY=1.0] - The initial y-offset. Default is 0.0. Note that autoAdjustOffset=true overrides these values.\n     * @param {boolean=} [config.rasterGrid=true] - If set to true the background grid will be drawn rastered.\n     * @param {boolean=} [config.rasterScaleX=1.0] - Define the default horizontal raster scale (default=1.0).\n     * @param {boolean=} [config.rasterScaleY=1.0] - Define the default vertical raster scale (default=1.0).\n     * @param {number=}  [config.rasterAdjustFactor=1.0] - The exponential limit for wrapping down the grid. (2.0 means: halve the grid each 2.0*n zoom step).\n     * @param {boolean=} [config.drawOrigin=false] - Draw a crosshair at (0,0).\n     * @param {boolean=} [config.autoAdjustOffset=true] -  When set to true then the origin of the XY plane will\n     *                         be re-adjusted automatically (see the params\n     *                         offsetAdjust{X,Y}Percent for more).\n     * @param {number=}  [config.offsetAdjustXPercent=50] - The x-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.offsetAdjustYPercent=50] - The y-fallback position for the origin after\n     *                         resizing the canvas.\n     * @param {number=}  [config.defaultCanvasWidth=1024] - The canvas size fallback (width) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.defaultCanvasHeight=768] - The canvas size fallback (height) if no automatic resizing\n     *                         is switched on.\n     * @param {number=}  [config.canvasWidthFactor=1.0] - Scaling factor (width) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.canvasHeightFactor=1.0] - Scaling factor (height) upon the canvas size.\n     *                         In combination with cssScale{X,Y} this can be used to obtain\n     *                         sub pixel resolutions for retina displays.\n     * @param {number=}  [config.cssScaleX=1.0] - Visually resize the canvas (horizontally) using CSS transforms (scale).\n     * @param {number=}  [config.cssScaleY=1.0] - Visually resize the canvas (vertically) using CSS transforms (scale).\n     * @param {boolan=}  [config.cssUniformScale=true] - CSS scale x and y obtaining aspect ratio.\n     * @param {boolean=} [config.autoDetectRetina=true] - When set to true (default) the canvas will try to use the display's pixel ratio.\n     * @param {string=}  [config.backgroundColor=#ffffff] - The backround color.\n     * @param {boolean=} [config.redrawOnResize=true] - Switch auto-redrawing on resize on/off (some applications\n     *                         might want to prevent automatic redrawing to avoid data loss from the draw buffer).\n     * @param {boolean=} [config.drawBezierHandleLines=true] - Indicates if Bézier curve handles should be drawn (used for\n     *                         editors, no required in pure visualizations).\n     * @param {boolean=} [config.drawBezierHandlePoints=true] - Indicates if Bézier curve handle points should be drawn.\n     * @param {function=} [config.preClear=null] - A callback function that will be triggered just before the\n     *                         draw function clears the canvas (before anything else was drawn).\n     * @param {function=} [config.preDraw=null] - A callback function that will be triggered just before the draw\n     *                         function starts.\n     * @param {function=} [config.postDraw=null] - A callback function that will be triggered right after the drawing\n     *                         process finished.\n     * @param {boolean=} [config.enableMouse=true] - Indicates if the application should handle mouse events for you.\n     * @param {boolean=} [config.enableTouch=true] - Indicates if the application should handle touch events for you.\n     * @param {boolean=} [config.enableKeys=true] - Indicates if the application should handle key events for you.\n     * @param {boolean=} [config.enableMouseWheel=true] - Indicates if the application should handle mouse wheel events for you.\n     * @param {boolean=} [config.enableGL=false] - Indicates if the application should use the experimental WebGL features (not recommended).\n     * @param {boolean=} [config.enableSVGExport=true] - Indicates if the SVG export should be enabled (default is true).\n     *                                                   Note that changes from the postDraw hook might not be visible in the export.\n     */\n    function PlotBoilerplate(config) {\n        // This should be in some static block ...\n        VertexAttr_1.VertexAttr.model = { bezierAutoAdjust: false,\n            renderTime: 0,\n            selectable: true,\n            isSelected: false,\n            draggable: true,\n            visible: true\n        };\n        if (typeof config.canvas == 'undefined')\n            throw \"No canvas specified.\";\n        /**\n         * A global config that's attached to the dat.gui control interface.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        var f = PlotBoilerplate.utils.fetch;\n        this.config = {\n            canvas: config.canvas,\n            fullSize: f.val(config, 'fullSize', true),\n            fitToParent: f.bool(config, 'fitToParent', true),\n            scaleX: f.num(config, 'scaleX', 1.0),\n            scaleY: f.num(config, 'scaleY', 1.0),\n            offsetX: f.num(config, 'offsetX', 0.0),\n            offsetY: f.num(config, 'offsetY', 0.0),\n            rasterGrid: f.bool(config, 'rasterGrid', true),\n            rasterScaleX: f.num(config, 'rasterScaleX', 1.0),\n            rasterScaleY: f.num(config, 'rasterScaleY', 1.0),\n            rasterAdjustFactor: f.num(config, 'rasterAdjustdFactror', 2.0),\n            drawOrigin: f.bool(config, 'drawOrigin', false),\n            autoAdjustOffset: f.val(config, 'autoAdjustOffset', true),\n            offsetAdjustXPercent: f.num(config, 'offsetAdjustXPercent', 50),\n            offsetAdjustYPercent: f.num(config, 'offsetAdjustYPercent', 50),\n            backgroundColor: config.backgroundColor || '#ffffff',\n            redrawOnResize: f.bool(config, 'redrawOnResize', true),\n            defaultCanvasWidth: f.num(config, 'defaultCanvasWidth', PlotBoilerplate.DEFAULT_CANVAS_WIDTH),\n            defaultCanvasHeight: f.num(config, 'defaultCanvasHeight', PlotBoilerplate.DEFAULT_CANVAS_HEIGHT),\n            canvasWidthFactor: f.num(config, 'canvasWidthFactor', 1.0),\n            canvasHeightFactor: f.num(config, 'canvasHeightFactor', 1.0),\n            cssScaleX: f.num(config, 'cssScaleX', 1.0),\n            cssScaleY: f.num(config, 'cssScaleY', 1.0),\n            cssUniformScale: f.bool(config, 'cssUniformScale', true),\n            saveFile: function () { _self.hooks.saveFile(_self); },\n            setToRetina: function () { _self._setToRetina(); },\n            autoDetectRetina: f.bool(config, 'autoDetectRetina', true),\n            enableSVGExport: f.bool(config, 'enableSVGExport', true),\n            // Listeners/observers\n            preClear: f.func(config, 'preClear', null),\n            preDraw: f.func(config, 'preDraw', null),\n            postDraw: f.func(config, 'postDraw', null),\n            // Interaction\n            enableMouse: f.bool(config, 'enableMouse', true),\n            enableTouch: f.bool(config, 'enableTouch', true),\n            enableKeys: f.bool(config, 'enableKeys', true),\n            enableMouseWheel: f.bool(config, 'enableMouseWheel', true),\n            // Experimental (and unfinished)\n            enableGL: f.bool(config, 'enableGL', false)\n        }; // END confog\n        /**\n         * Configuration for drawing things.\n         *\n         * @member {Object}\n         * @memberof PlotBoilerplate\n         * @instance\n         */\n        this.drawConfig = {\n            drawVertices: true,\n            drawBezierHandleLines: f.bool(config, 'drawBezierHandleLines', true),\n            drawBezierHandlePoints: f.bool(config, 'drawBezierHandlePoints', true),\n            drawHandleLines: f.bool(config, 'drawHandleLines', true),\n            drawHandlePoints: f.bool(config, 'drawHandlePoints', true),\n            drawGrid: f.bool(config, 'drawGrid', true),\n            bezier: {\n                color: '#00a822',\n                lineWidth: 2,\n                handleLine: {\n                    color: 'rgba(180,180,180,0.5)',\n                    lineWidth: 1\n                }\n            },\n            polygon: {\n                color: '#0022a8',\n                lineWidth: 1\n            },\n            triangle: {\n                color: '#6600ff',\n                lineWidth: 1\n            },\n            ellipse: {\n                color: '#2222a8',\n                lineWidth: 1\n            },\n            circle: {\n                color: '#22a8a8',\n                lineWidth: 2\n            },\n            circleSector: {\n                color: '#2280a8',\n                lineWidth: 1\n            },\n            vertex: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            },\n            selectedVertex: {\n                color: '#c08000',\n                lineWidth: 2\n            },\n            line: {\n                color: '#a844a8',\n                lineWidth: 1\n            },\n            vector: {\n                color: '#ff44a8',\n                lineWidth: 1\n            },\n            image: {\n                color: '#a8a8a8',\n                lineWidth: 1\n            }\n        }; // END drawConfig\n        // +---------------------------------------------------------------------------------\n        // | Object members.\n        // +-------------------------------\n        this.grid = new Grid_1.Grid(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(50, 50));\n        this.canvasSize = { width: PlotBoilerplate.DEFAULT_CANVAS_WIDTH, height: PlotBoilerplate.DEFAULT_CANVAS_HEIGHT };\n        var canvasElement = typeof config.canvas == 'string'\n            ? document.querySelector(config.canvas)\n            : config.canvas;\n        // Which renderer to use: Canvas2D, WebGL (experimental) or SVG?\n        if (canvasElement.tagName.toLowerCase() === 'canvas') {\n            this.canvas = canvasElement;\n            this.eventCatcher = this.canvas;\n            if (this.config.enableGL && typeof drawgl_1.drawutilsgl === \"undefined\") {\n                console.warn(\"Cannot use webgl. Package was compiled without experimental gl support. Please use plotboilerplate-glsupport.min.js instead.\");\n                console.warn(\"Disabling GL and falling back to Canvas2D.\");\n                this.config.enableGL = false;\n            }\n            if (this.config.enableGL) {\n                var ctx = this.canvas.getContext('webgl'); // webgl-experimental?\n                this.draw = new drawgl_1.drawutilsgl(ctx, false);\n                // PROBLEM: same instance of fill and draw when using WebGL.\n                //          Shader program cannot be duplicated on the same context.\n                this.fill = this.draw.copyInstance(true);\n                console.warn('Initialized with experimental mode enableGL=true. Note that this is not yet fully implemented.');\n            }\n            else {\n                var ctx = this.canvas.getContext('2d');\n                this.draw = new draw_1.drawutils(ctx, false);\n                this.fill = new draw_1.drawutils(ctx, true);\n            }\n        }\n        else if (canvasElement.tagName.toLowerCase() === 'svg') {\n            if (typeof drawutilssvg_1.drawutilssvg === \"undefined\")\n                throw \"The svg draw library is not yet integrated part of PlotBoilerplate. Please include ./src/js/utils/helpers/drawutils.svg into your document.\";\n            this.canvas = canvasElement;\n            this.draw = new drawutilssvg_1.drawutilssvg(this.canvas, new Vertex_1.Vertex(), // offset\n            new Vertex_1.Vertex(), // scale\n            this.canvasSize, false, // fillShapes=false\n            this.drawConfig, false // isSecondary=false\n            );\n            this.fill = this.draw.copyInstance(true); // fillShapes=true\n            if (this.canvas.parentElement) {\n                this.eventCatcher = document.createElement('div');\n                this.eventCatcher.style.position = 'absolute';\n                this.eventCatcher.style.left = '0';\n                this.eventCatcher.style.top = '0';\n                this.eventCatcher.style.cursor = 'pointer';\n                this.canvas.parentElement.style.position = 'relative';\n                this.canvas.parentElement.appendChild(this.eventCatcher);\n            }\n            else {\n                this.eventCatcher = document.body;\n            }\n        }\n        else {\n            throw 'Element is neither a canvas nor an svg element.';\n        }\n        this.draw.scale.set(this.config.scaleX, this.config.scaleY);\n        this.fill.scale.set(this.config.scaleX, this.config.scaleY);\n        this.vertices = [];\n        this.selectPolygon = null;\n        this.draggedElements = [];\n        this.drawables = [];\n        this.console = console;\n        this.hooks = {\n            // This is changable from the outside\n            saveFile: PlotBoilerplate._saveFile\n        };\n        var _self = this;\n        globalThis.addEventListener('resize', function () { return _self.resizeCanvas(); });\n        this.resizeCanvas();\n        if (config.autoDetectRetina) {\n            this._setToRetina();\n        }\n        this.installInputListeners();\n        // Apply the configured CSS scale.\n        this.updateCSSscale();\n        // Init\t\n        this.redraw();\n        // Gain focus\n        this.canvas.focus();\n    }\n    ; // END constructor\n    /**\n     * This function opens a save-as file dialog and – once an output file is\n     * selected – stores the current canvas contents as an SVG image.\n     *\n     * It is the default hook for saving files and can be overwritten.\n     *\n     * @method _saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate._saveFile = function (pb) {\n        if (typeof drawutilssvg_1.drawutilssvg === \"undefined\") {\n            console.error(\"Cannot convert image to SVG. The svg renderer 'drawutilssvg' is missing. Did you load it?\");\n            return;\n        }\n        // Create fake SVG node\n        var svgNode = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n        // var svgNode = document.getElementById('preview-svg');\n        // Draw everything to fake node.\n        var tosvgDraw = new drawutilssvg_1.drawutilssvg(svgNode, pb.draw.offset, pb.draw.scale, pb.canvasSize, false, // fillShapes=false\n        pb.drawConfig);\n        var tosvgFill = tosvgDraw.copyInstance(true); // fillShapes=true\n        tosvgDraw.beginDrawCycle(0);\n        tosvgFill.beginDrawCycle(0);\n        tosvgDraw.clear(pb.config.backgroundColor);\n        pb.drawAll(0, tosvgDraw, tosvgFill);\n        // Full support in all browsers \\o/\n        //    https://caniuse.com/xml-serializer\n        var serializer = new XMLSerializer();\n        var svgCode = serializer.serializeToString(svgNode);\n        var blob = new Blob([svgCode], { type: \"image/svg;charset=utf-8\" });\n        // See documentation for FileSaver.js for usage.\n        //    https://github.com/eligrey/FileSaver.js\n        if (typeof globalThis[\"saveAs\"] != \"function\")\n            throw \"Cannot save file; did you load the ./utils/savefile helper function and the eligrey/SaveFile library?\";\n        var _saveAs = globalThis[\"saveAs\"];\n        _saveAs(blob, \"plotboilerplate.svg\");\n    };\n    ;\n    /**\n     * This function sets the canvas resolution to factor 2.0 (or the preferred pixel ratio of your device) for retina displays.\n     * Please not that in non-GL mode this might result in very slow rendering as the canvas buffer size may increase.\n     *\n     * @method _setToRetina\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype._setToRetina = function () {\n        this.config.autoDetectRetina = true;\n        var pixelRatio = globalThis.devicePixelRatio || 1;\n        this.config.cssScaleX = this.config.cssScaleY = 1.0 / pixelRatio; // 0.5;\n        this.config.canvasWidthFactor = this.config.canvasHeightFactor = pixelRatio; // 2.0;\n        this.resizeCanvas();\n        this.updateCSSscale();\n    };\n    ;\n    /**\n     * Set the current zoom and draw offset to fit the given bounds.\n     *\n     * This method currently restores the aspect zoom ratio.\n     *\n     **/\n    PlotBoilerplate.prototype.fitToView = function (bounds) {\n        var canvasCenter = new Vertex_1.Vertex(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        var canvasRatio = this.canvasSize.width / this.canvasSize.height;\n        var ratio = bounds.width / bounds.height;\n        // Find the new draw offset\n        var center = new Vertex_1.Vertex(bounds.max.x - bounds.width / 2.0, bounds.max.y - bounds.height / 2.0)\n            .inv()\n            .addXY(this.canvasSize.width / 2.0, this.canvasSize.height / 2.0);\n        this.setOffset(center);\n        if (canvasRatio < ratio) {\n            var newUniformZoom = this.canvasSize.width / bounds.width;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        else {\n            var newUniformZoom = this.canvasSize.height / bounds.height;\n            this.setZoom(newUniformZoom, newUniformZoom, canvasCenter);\n        }\n        this.redraw();\n    };\n    ;\n    /**\n     * Set the console for this instance.\n     *\n     * @method setConsole\n     * @param {Console} con - The new console object (default is globalThis.console).\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.setConsole = function (con) {\n        this.console = con;\n    };\n    ;\n    /**\n     * Update the CSS scale for the canvas depending onf the cssScale{X,Y} settings.<br>\n     * <br>\n     * This function is usually only used inernally.\n     *\n     * @method updateCSSscale\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     * @private\n     **/\n    PlotBoilerplate.prototype.updateCSSscale = function () {\n        if (this.config.cssUniformScale) {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleX);\n        }\n        else {\n            PlotBoilerplate.utils.setCSSscale(this.canvas, this.config.cssScaleX, this.config.cssScaleY);\n        }\n    };\n    ;\n    /**\n     * Add a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a Triangle\n     *  * a BezierPath\n     *  * a BPImage\n     * </pre>\n     *\n     * @param {Drawable|Drawable[]} drawable - The drawable (of one of the allowed class instance) to add.\n     * @param {boolean} [redraw=true] - If true the function will trigger redraw after the drawable(s) was/were added.\n     * @method add\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.add = function (drawable, redraw) {\n        if (Array.isArray(drawable)) {\n            var arr = drawable;\n            // for( var i in arr )\n            for (var i = 0; i < arr.length; i++) {\n                this.add(arr[i], false);\n            }\n        }\n        else if (drawable instanceof Vertex_1.Vertex) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable);\n        }\n        else if (drawable instanceof Line_1.Line) {\n            // Add some lines\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof Vector_1.Vector) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n        }\n        else if (drawable instanceof VEllipse_1.VEllipse) {\n            this.vertices.push(drawable.center);\n            this.vertices.push(drawable.axis);\n            this.drawables.push(drawable);\n            drawable.center.listeners.addDragListener(function (e) {\n                drawable.axis.add(e.params.dragAmount);\n            });\n        }\n        else if (drawable instanceof Circle_1.Circle) {\n            this.vertices.push(drawable.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof CircleSector_1.CircleSector) {\n            this.vertices.push(drawable.circle.center);\n            this.drawables.push(drawable);\n        }\n        else if (drawable instanceof Polygon_1.Polygon) {\n            this.drawables.push(drawable);\n            // for( var i in drawable.vertices )\n            for (var i = 0; i < drawable.vertices.length; i++)\n                this.vertices.push(drawable.vertices[i]);\n        }\n        else if (drawable instanceof Triangle_1.Triangle) {\n            this.drawables.push(drawable);\n            this.vertices.push(drawable.a);\n            this.vertices.push(drawable.b);\n            this.vertices.push(drawable.c);\n        }\n        else if (drawable instanceof BezierPath_1.BezierPath) {\n            this.drawables.push(drawable);\n            var bezierPath = drawable;\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                if (!drawable.adjustCircular && i == 0)\n                    this.vertices.push(bezierPath.bezierCurves[i].startPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].startControlPoint);\n                this.vertices.push(bezierPath.bezierCurves[i].endControlPoint);\n                bezierPath.bezierCurves[i].startControlPoint.attr.selectable = false;\n                bezierPath.bezierCurves[i].endControlPoint.attr.selectable = false;\n            }\n            PlotBoilerplate.utils.enableBezierPathAutoAdjust(drawable);\n        }\n        else if (drawable instanceof PBImage_1.PBImage) {\n            this.vertices.push(drawable.upperLeft);\n            this.vertices.push(drawable.lowerRight);\n            this.drawables.push(drawable);\n            // Todo: think about a IDragEvent interface\n            drawable.upperLeft.listeners.addDragListener(function (e) {\n                drawable.lowerRight.add(e.params.dragAmount);\n            });\n            drawable.lowerRight.attr.selectable = false;\n        }\n        else {\n            throw \"Cannot add drawable of unrecognized type: \" + (typeof drawable) + \".\";\n        }\n        // This is a workaround for backwards compatibility when the 'redraw' param was not yet present.\n        if (redraw || typeof redraw == 'undefined')\n            this.redraw();\n    };\n    ;\n    /**\n     * Remove a drawable object.<br>\n     * <br>\n     * This must be either:<br>\n     * <pre>\n     *  * a Vertex\n     *  * a Line\n     *  * a Vector\n     *  * a VEllipse\n     *  * a Circle\n     *  * a Polygon\n     *  * a BezierPath\n     *  * a BPImage\n     *  * a Triangle\n     * </pre>\n     *\n     * @param {Object} drawable - The drawable (of one of the allowed class instance) to remove.\n     * @param {boolean} [redraw=false]\n     * @method remove\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.remove = function (drawable, redraw, removeWithVertices) {\n        if (drawable instanceof Vertex_1.Vertex)\n            this.removeVertex(drawable, false);\n        for (var i = 0; i < this.drawables.length; i++) {\n            if (this.drawables[i] === drawable) {\n                this.drawables.splice(i, 1);\n                if (removeWithVertices) {\n                    // Check if some listeners need to be removed\n                    if (drawable instanceof Line_1.Line) {\n                        // Add some lines\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof Vector_1.Vector) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                    }\n                    else if (drawable instanceof VEllipse_1.VEllipse) {\n                        this.removeVertex(drawable.center, false);\n                        this.removeVertex(drawable.axis, false);\n                    }\n                    else if (drawable instanceof Circle_1.Circle) {\n                        this.removeVertex(drawable.center, false);\n                    }\n                    else if (drawable instanceof CircleSector_1.CircleSector) {\n                        this.removeVertex(drawable.circle.center, false);\n                    }\n                    else if (drawable instanceof Polygon_1.Polygon) {\n                        // for( var i in drawable.vertices )\n                        for (var i = 0; i < drawable.vertices.length; i++)\n                            this.removeVertex(drawable.vertices[i], false);\n                    }\n                    else if (drawable instanceof Triangle_1.Triangle) {\n                        this.removeVertex(drawable.a, false);\n                        this.removeVertex(drawable.b, false);\n                        this.removeVertex(drawable.c, false);\n                    }\n                    else if (drawable instanceof BezierPath_1.BezierPath) {\n                        for (var i = 0; i < drawable.bezierCurves.length; i++) {\n                            this.removeVertex(drawable.bezierCurves[i].startPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].startControlPoint, false);\n                            this.removeVertex(drawable.bezierCurves[i].endControlPoint, false);\n                            if (i + 1 == drawable.bezierCurves.length) {\n                                this.removeVertex(drawable.bezierCurves[i].endPoint, false);\n                            }\n                        }\n                    }\n                    else if (drawable instanceof PBImage_1.PBImage) {\n                        this.removeVertex(drawable.upperLeft, false);\n                        this.removeVertex(drawable.lowerRight, false);\n                    }\n                } // END removeWithVertices\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove a vertex from the vertex list.<br>\n     *\n     * @param {Vertex} vert - The vertex to remove.\n     * @param {boolean} [redraw=false]\n     * @method removeVertex\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.removeVertex = function (vert, redraw) {\n        for (var i = 0; i < this.vertices.length; i++) {\n            if (this.vertices[i] === vert) {\n                this.vertices.splice(i, 1);\n                if (redraw)\n                    this.redraw();\n                return;\n            }\n        }\n    };\n    ;\n    /**\n     * Remove all elements.\n     *\n     * If you want to keep the vertices, pass `true`.\n     *\n     * @method removeAll\n     * @param {boolean=false} keepVertices\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     */\n    PlotBoilerplate.prototype.removeAll = function (keepVertices) {\n        this.drawables = [];\n        if (!Boolean(keepVertices)) {\n            this.vertices = [];\n        }\n        this.redraw();\n    };\n    ;\n    /**\n     * Find the vertex near the given position.\n     *\n     * The position is the absolute vertex position, not the x-y-coordinates on the canvas.\n     *\n     * @param {XYCoords} position - The position of the vertex to search for.\n     * @param {number} pixelTolerance - A radius around the position to include into the search.\n     *                                  Note that the tolerance will be scaled up/down when zoomed.\n     * @return The vertex near the given position or undefined if none was found there.\n     **/\n    PlotBoilerplate.prototype.getVertexNear = function (pixelPosition, pixelTolerance) {\n        var p = this.locatePointNear(this.transformMousePosition(pixelPosition.x, pixelPosition.y), pixelTolerance / Math.min(this.config.cssScaleX, this.config.cssScaleY));\n        if (p && p.typeName == \"vertex\")\n            return this.vertices[p.vindex];\n        return undefined;\n    };\n    ;\n    /**\n     * Draw the grid with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawGrid\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawGrid = function (draw) {\n        var gScale = {\n            x: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.x) * this.config.rasterScaleX / this.config.cssScaleX,\n            y: Grid_1.Grid.utils.mapRasterScale(this.config.rasterAdjustFactor, this.draw.scale.y) * this.config.rasterScaleY / this.config.cssScaleY\n        };\n        var gSize = { width: this.grid.size.x * gScale.x, height: this.grid.size.y * gScale.y };\n        var cs = { width: this.canvasSize.width / 2, height: this.canvasSize.height / 2 };\n        var offset = this.draw.offset.clone().inv();\n        offset.x = (Math.round(offset.x + cs.width) / Math.round(gSize.width)) * (gSize.width) / this.draw.scale.x + (((this.draw.offset.x - cs.width) / this.draw.scale.x) % gSize.width);\n        offset.y = (Math.round(offset.y + cs.height) / Math.round(gSize.height)) * (gSize.height) / this.draw.scale.y + (((this.draw.offset.y - cs.height) / this.draw.scale.x) % gSize.height);\n        if (this.drawConfig.drawGrid) {\n            if (this.config.rasterGrid) { // TODO: move config member to drawConfig\n                draw.setCurrentId('raster');\n                draw.raster(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.125)');\n            }\n            else {\n                draw.setCurrentId('grid');\n                draw.grid(offset, (this.canvasSize.width) / this.draw.scale.x, (this.canvasSize.height) / this.draw.scale.y, gSize.width, gSize.height, 'rgba(0,128,255,0.095)');\n            }\n        }\n    };\n    ;\n    /**\n     * Draw the origin with the current config settings.<br>\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawOrigin\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawOrigin = function (draw) {\n        // Add a crosshair to mark the origin\n        draw.setCurrentId('origin');\n        draw.crosshair({ x: 0, y: 0 }, 10, '#000000');\n    };\n    ;\n    /**\n     * This is just a tiny helper function to determine the render color of vertices.\n     **/\n    PlotBoilerplate.prototype._handleColor = function (h, color) {\n        return h.attr.isSelected ? this.drawConfig.selectedVertex.color : (h.attr.draggable ? color : 'rgba(128,128,128,0.5)');\n    };\n    /**\n     * Draw all drawables.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawables\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawables = function (renderTime, draw, fill) {\n        for (var i in this.drawables) {\n            var d = this.drawables[i];\n            this.draw.setCurrentId(d.uid);\n            this.fill.setCurrentId(d.uid);\n            this.draw.setCurrentClassName(d.className);\n            this.draw.setCurrentClassName(d.className);\n            this.drawDrawable(d, renderTime, draw, fill);\n        }\n    };\n    ;\n    /**\n     * Draw the given drawable.\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawDrawable\n     * @param {Drawable} d - The drawable to draw.\n     * @param {number} renderTime - The current render time. It will be used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @param {DrawLib} draw - The drawing library to use to draw lines.\n     * @param {DrawLib} fill - The drawing library to use to fill areas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawDrawable = function (d, renderTime, draw, fill) {\n        if (d instanceof BezierPath_1.BezierPath) {\n            for (var c in d.bezierCurves) {\n                draw.cubicBezier(d.bezierCurves[c].startPoint, d.bezierCurves[c].endPoint, d.bezierCurves[c].startControlPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.color, this.drawConfig.bezier.lineWidth);\n                if (this.drawConfig.drawBezierHandlePoints && this.drawConfig.drawHandlePoints) {\n                    if (!d.bezierCurves[c].startPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].startPoint.attr.visible) {\n                            draw.setCurrentId(d.uid + \"_h0\");\n                            draw.setCurrentClassName(d.className + \"-start-handle\");\n                            draw.diamondHandle(d.bezierCurves[c].startPoint, 7, this._handleColor(d.bezierCurves[c].startPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    }\n                    if (!d.bezierCurves[c].endPoint.attr.bezierAutoAdjust) {\n                        if (d.bezierCurves[c].endPoint.attr.visible) {\n                            draw.setCurrentId(d.uid + \"_h1\");\n                            draw.setCurrentClassName(d.className + \"-end-handle\");\n                            draw.diamondHandle(d.bezierCurves[c].endPoint, 7, this._handleColor(d.bezierCurves[c].endPoint, this.drawConfig.vertex.color));\n                        }\n                        d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    }\n                    if (d.bezierCurves[c].startControlPoint.attr.visible) {\n                        draw.setCurrentId(d.uid + \"_h2\");\n                        draw.setCurrentClassName(d.className + \"-start-control-handle\");\n                        draw.circleHandle(d.bezierCurves[c].startControlPoint, 3, this._handleColor(d.bezierCurves[c].startControlPoint, '#008888'));\n                    }\n                    if (d.bezierCurves[c].endControlPoint.attr.visible) {\n                        draw.setCurrentId(d.uid + \"_h3\");\n                        draw.setCurrentClassName(d.className + \"-end-control-handle\");\n                        draw.circleHandle(d.bezierCurves[c].endControlPoint, 3, this._handleColor(d.bezierCurves[c].endControlPoint, '#008888'));\n                    }\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                else {\n                    d.bezierCurves[c].startPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].startControlPoint.attr.renderTime = renderTime;\n                    d.bezierCurves[c].endControlPoint.attr.renderTime = renderTime;\n                }\n                if (this.drawConfig.drawBezierHandleLines && this.drawConfig.drawHandleLines) {\n                    draw.setCurrentId(d.uid + \"_l0\");\n                    draw.setCurrentClassName(d.className + \"-start-line\");\n                    draw.line(d.bezierCurves[c].startPoint, d.bezierCurves[c].startControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                    draw.setCurrentId(d.uid + \"_l1\");\n                    draw.setCurrentClassName(d.className + \"-end-line\");\n                    draw.line(d.bezierCurves[c].endPoint, d.bezierCurves[c].endControlPoint, this.drawConfig.bezier.handleLine.color, this.drawConfig.bezier.handleLine.lineWidth);\n                }\n            }\n        }\n        else if (d instanceof Polygon_1.Polygon) {\n            draw.polygon(d, this.drawConfig.polygon.color, this.drawConfig.polygon.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                for (var i in d.vertices) {\n                    d.vertices[i].attr.renderTime = renderTime;\n                }\n            }\n        }\n        else if (d instanceof Triangle_1.Triangle) {\n            draw.polyline([d.a, d.b, d.c], false, this.drawConfig.triangle.color, this.drawConfig.triangle.lineWidth);\n            if (!this.drawConfig.drawHandlePoints)\n                d.a.attr.renderTime = d.b.attr.renderTime = d.c.attr.renderTime = renderTime;\n        }\n        else if (d instanceof VEllipse_1.VEllipse) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(d.uid + \"_e0\");\n                draw.setCurrentClassName(d.className + \"-v-line\");\n                draw.line(d.center.clone().add(0, d.axis.y - d.center.y), d.axis, '#c8c8c8');\n                draw.setCurrentId(d.uid + \"_e1\");\n                draw.setCurrentClassName(d.className + \"-h-line\");\n                draw.line(d.center.clone().add(d.axis.x - d.center.x, 0), d.axis, '#c8c8c8');\n            }\n            draw.setCurrentId(d.uid);\n            draw.setCurrentClassName(\"\" + d.className);\n            draw.ellipse(d.center, Math.abs(d.axis.x - d.center.x), Math.abs(d.axis.y - d.center.y), this.drawConfig.ellipse.color, this.drawConfig.ellipse.lineWidth);\n            if (!this.drawConfig.drawHandlePoints) {\n                d.center.attr.renderTime = renderTime;\n                d.axis.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Circle_1.Circle) {\n            draw.circle(d.center, d.radius, this.drawConfig.circle.color, this.drawConfig.circle.lineWidth);\n        }\n        else if (d instanceof CircleSector_1.CircleSector) {\n            draw.circleArc(d.circle.center, d.circle.radius, d.startAngle, d.endAngle, this.drawConfig.circleSector.color, this.drawConfig.circleSector.lineWidth);\n        }\n        else if (d instanceof Vertex_1.Vertex) {\n            if (this.drawConfig.drawVertices &&\n                (!d.attr.selectable || !d.attr.draggable) && d.attr.visible) {\n                // Draw as special point (grey)\t\t\n                draw.circleHandle(d, 7, this.drawConfig.vertex.color);\n                d.attr.renderTime = renderTime;\n            }\n        }\n        else if (d instanceof Line_1.Line) {\n            draw.line(d.a, d.b, this.drawConfig.line.color, this.drawConfig.line.lineWidth);\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof Vector_1.Vector) {\n            draw.arrow(d.a, d.b, this.drawConfig.vector.color);\n            if (this.drawConfig.drawHandlePoints && d.b.attr.selectable && d.b.attr.visible) {\n                draw.setCurrentId(d.uid + \"_h0\");\n                draw.setCurrentClassName(d.className + \"-handle\");\n                draw.circleHandle(d.b, 3, '#a8a8a8');\n            }\n            else {\n                d.b.attr.renderTime = renderTime;\n            }\n            if (!this.drawConfig.drawHandlePoints || !d.a.attr.selectable)\n                d.a.attr.renderTime = renderTime;\n            if (!this.drawConfig.drawHandlePoints || !d.b.attr.selectable)\n                d.b.attr.renderTime = renderTime;\n        }\n        else if (d instanceof PBImage_1.PBImage) {\n            if (this.drawConfig.drawHandleLines) {\n                draw.setCurrentId(d.uid + \"_l0\");\n                draw.setCurrentClassName(d.className + \"-line\");\n                draw.line(d.upperLeft, d.lowerRight, this.drawConfig.image.color, this.drawConfig.image.lineWidth);\n            }\n            fill.setCurrentId(d.uid);\n            fill.image(d.image, d.upperLeft, d.lowerRight.clone().sub(d.upperLeft));\n            if (this.drawConfig.drawHandlePoints) {\n                draw.setCurrentId(d.uid + \"_h0\");\n                draw.setCurrentClassName(d.className + \"-lower-right\");\n                draw.circleHandle(d.lowerRight, 3, this.drawConfig.image.color);\n                d.lowerRight.attr.renderTime = renderTime;\n            }\n        }\n        else {\n            console.error('Cannot draw object. Unknown class.');\n        }\n    };\n    ;\n    /**\n     * Draw the select-polygon (if there is one).\n     *\n     * This function is usually only used internally.\n     *\n     * @method drawSelectPolygon\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawSelectPolygon = function (draw) {\n        // Draw select polygon?\n        if (this.selectPolygon != null && this.selectPolygon.vertices.length > 0) {\n            draw.setCurrentId(this.selectPolygon.uid);\n            draw.polygon(this.selectPolygon, '#888888');\n            draw.crosshair(this.selectPolygon.vertices[0], 3, '#008888');\n        }\n    };\n    ;\n    /**\n     * Draw all vertices that were not yet drawn with the given render time.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method drawVertices\n     * @private\n     * @param {number} renderTime - The current render time. It is used to distinct\n     *                              already draw vertices from non-draw-yet vertices.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawVertices = function (renderTime, draw) {\n        // Draw all vertices as small squares if they were not already drawn by other objects\n        for (var i in this.vertices) {\n            if (this.drawConfig.drawVertices\n                && this.vertices[i].attr.renderTime != renderTime\n                && this.vertices[i].attr.visible) {\n                draw.setCurrentId(this.vertices[i].uid);\n                draw.squareHandle(this.vertices[i], 5, this._handleColor(this.vertices[i], 'rgb(0,128,192)'));\n            }\n        }\n    };\n    ;\n    /**\n     * Trigger redrawing of all objects.<br>\n     * <br>\n     * Usually this function is automatically called when objects change.\n     *\n     * @method redraw\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.redraw = function () {\n        var renderTime = new Date().getTime();\n        if (this.config.preClear)\n            this.config.preClear();\n        this.clear();\n        if (this.config.preDraw)\n            this.config.preDraw();\n        this.drawAll(renderTime, this.draw, this.fill);\n        if (this.config.postDraw)\n            this.config.postDraw();\n    };\n    ;\n    /**\n     * Draw all: drawables, grid, select-polygon and vertices.\n     *\n     * @method drawAll\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.drawAll = function (renderTime, draw, fill) {\n        // Tell the drawing library that a new drawing cycle begins (required for the GL lib).\n        draw.beginDrawCycle(renderTime);\n        fill.beginDrawCycle(renderTime);\n        this.drawGrid(draw);\n        if (this.config.drawOrigin)\n            this.drawOrigin(draw);\n        this.drawDrawables(renderTime, draw, fill);\n        this.drawVertices(renderTime, draw);\n        this.drawSelectPolygon(draw);\n    };\n    ; // END redraw\n    /**\n     * This function clears the canvas with the configured background color.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clear\n     * @private\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.clear = function () {\n        // Note that elements might have an alpha channel. Clear the scene first.\n        this.draw.clear(this.config.backgroundColor);\n    };\n    ;\n    /**\n     * Clear the selection.<br>\n     * <br>\n     * This function is usually only used internally.\n     *\n     * @method clearSelection\n     * @private\n     * @param {boolean=} [redraw=false] - Indicates if the redraw function should be triggered.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {PlotBoilerplate} this\n     **/\n    PlotBoilerplate.prototype.clearSelection = function (redraw) {\n        for (var i in this.vertices)\n            this.vertices[i].attr.isSelected = false;\n        if (redraw)\n            this.redraw();\n        return this;\n    };\n    ;\n    /**\n     * Get the current view port.\n     *\n     * @method viewport\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {Bounds} The current viewport.\n     **/\n    PlotBoilerplate.prototype.viewport = function () {\n        return new Bounds_1.Bounds(this.transformMousePosition(0, 0), this.transformMousePosition(this.canvasSize.width * this.config.cssScaleX, this.canvasSize.height * this.config.cssScaleY));\n    };\n    ;\n    /**\n     * Trigger the saveFile.hook.\n     *\n     * @method saveFile\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.saveFile = function () {\n        this.hooks.saveFile(this);\n    };\n    ;\n    /**\n     * Internal helper function used to get 'float' properties from elements.\n     * Used to determine border withs and paddings that were defined using CSS.\n     */\n    PlotBoilerplate.prototype.getFProp = function (elem, propName) {\n        return parseFloat(globalThis.getComputedStyle(elem, null).getPropertyValue(propName));\n    };\n    /**\n     * Get the available inner space of the given container.\n     *\n     * Size minus padding minus border.\n     **/\n    PlotBoilerplate.prototype.getAvailableContainerSpace = function () {\n        var _self = this;\n        var container = _self.canvas.parentNode; // Element | Document | DocumentFragment;\n        // var canvas : HTMLCanvasElement = _self.canvas;\n        _self.canvas.style.display = 'none';\n        /* var\n        padding : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding') ) || 0,\n        border : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-width') ) || 0,\n        pl : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-left') ) || padding,\n        pr : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-right') ) || padding,\n        pt : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-top') ) || padding,\n        pb : number = parseFloat( globalThis.getComputedStyle(container, null).getPropertyValue('padding-bottom') ) || padding,\n        bl : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-left-width') ) || border,\n        br : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-right-width') ) || border,\n        bt : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-top-width') ) || border,\n        bb : number = parseFloat( globalThis.getComputedStyle(_self.canvas, null).getPropertyValue('border-bottom-width') ) || border;\n        */\n        var padding = this.getFProp(container, 'padding') || 0, border = this.getFProp(_self.canvas, 'border-width') || 0, pl = this.getFProp(container, 'padding-left') || padding, pr = this.getFProp(container, 'padding-right') || padding, pt = this.getFProp(container, 'padding-top') || padding, pb = this.getFProp(container, 'padding-bottom') || padding, bl = this.getFProp(_self.canvas, 'border-left-width') || border, br = this.getFProp(_self.canvas, 'border-right-width') || border, bt = this.getFProp(_self.canvas, 'border-top-width') || border, bb = this.getFProp(_self.canvas, 'border-bottom-width') || border;\n        var w = container.clientWidth;\n        var h = container.clientHeight;\n        _self.canvas.style.display = 'block';\n        return { width: (w - pl - pr - bl - br), height: (h - pt - pb - bt - bb) };\n    };\n    ;\n    /**\n     * This function resizes the canvas to the required settings (toggles fullscreen).<br>\n     * <br>\n     * This function is usually only used internally but feel free to call it if resizing required.\n     *\n     * @method resizeCanvas\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.resizeCanvas = function () {\n        var _this = this;\n        var _self = this;\n        var _setSize = function (w, h) {\n            w *= _self.config.canvasWidthFactor;\n            h *= _self.config.canvasHeightFactor;\n            _self.canvasSize.width = w;\n            _self.canvasSize.height = h;\n            // TODO: use CanvasWrapper.setSize here?\n            if (_self.canvas instanceof HTMLCanvasElement) {\n                _self.canvas.width = w;\n                _self.canvas.height = h;\n            }\n            else if (_self.canvas instanceof SVGElement) {\n                _this.canvas.setAttribute('viewBox', \"0 0 \" + w + \" \" + h);\n                _this.canvas.setAttribute('width', \"\" + w);\n                _this.canvas.setAttribute('height', \"\" + h);\n                _this.draw.setSize(_self.canvasSize); // No need to set size to this.fill (instance copy)\n                // console.log(\n                _this.eventCatcher.style.width = w + \"px\";\n                _this.eventCatcher.style.height = h + \"px\";\n            }\n            else {\n                console.error('Error: cannot resize canvas element because it seems neither be a HTMLCanvasElement nor an SVGElement.');\n            }\n            if (_self.config.autoAdjustOffset) {\n                _self.draw.offset.x = _self.fill.offset.x = _self.config.offsetX = w * (_self.config.offsetAdjustXPercent / 100);\n                _self.draw.offset.y = _self.fill.offset.y = _self.config.offsetY = h * (_self.config.offsetAdjustYPercent / 100);\n            }\n        };\n        if (_self.config.fullSize && !_self.config.fitToParent) {\n            // Set editor size\n            var width = globalThis.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n            var height = globalThis.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n            _self.canvas.style.position = 'absolute';\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasWidthFactor * height) + 'px';\n            _self.canvas.style.top = '0px';\n            _self.canvas.style.left = '0px';\n            _setSize(width, height);\n        }\n        else if (_self.config.fitToParent) {\n            // Set editor size\n            _self.canvas.style.position = 'absolute';\n            var space = this.getAvailableContainerSpace();\n            _self.canvas.style.width = (_self.config.canvasWidthFactor * space.width) + 'px';\n            _self.canvas.style.height = (_self.config.canvasHeightFactor * space.height) + 'px';\n            _self.canvas.style.top = null;\n            _self.canvas.style.left = null;\n            _setSize(space.width, space.height);\n        }\n        else {\n            _self.canvas.style.width = null;\n            _self.canvas.style.height = null;\n            _setSize(_self.config.defaultCanvasWidth, _self.config.defaultCanvasHeight);\n        }\n        if (_self.config.redrawOnResize)\n            _self.redraw();\n    };\n    ;\n    /**\n     *  Add all vertices inside the polygon to the current selection.<br>\n     *\n     * @method selectVerticesInPolygon\n     * @param {Polygon} polygon - The polygonal selection area.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.selectVerticesInPolygon = function (polygon) {\n        for (var i in this.vertices) {\n            if (this.vertices[i].attr.selectable && polygon.containsVert(this.vertices[i]))\n                this.vertices[i].attr.isSelected = true;\n        }\n    };\n    ;\n    /**\n     * (Helper) Locates the point (index) at the passed position. Using an internal tolerance of 7 pixels.\n     *\n     * The result is an object { type : 'bpath', pindex, cindex, pid }\n     *\n     * Returns false if no point is near the passed position.\n     *\n     * @method locatePointNear\n     * @param {Vertex} point - The polygonal selection area.\n     * @param {number=} [tolerance=7] - The tolerance to use identtifying vertices.\n     * @private\n     * @return {IDraggable} Or false if none found.\n     **/\n    PlotBoilerplate.prototype.locatePointNear = function (point, tolerance) {\n        var _self = this;\n        if (typeof tolerance == 'undefined')\n            tolerance = 7;\n        // Apply the zoom (the tolerant area should not shrink or grow when zooming)\n        tolerance /= _self.draw.scale.x;\n        // Search in vertices\n        // for( var vindex in _self.vertices ) {\n        for (var vindex = 0; vindex < _self.vertices.length; vindex++) {\n            var vert = _self.vertices[vindex];\n            if ((vert.attr.draggable || vert.attr.selectable) && vert.distance(point) < tolerance) {\n                // { type : 'vertex', vindex : vindex };\n                return new PlotBoilerplate.Draggable(vert, PlotBoilerplate.Draggable.VERTEX).setVIndex(vindex);\n            }\n        }\n        return null;\n    };\n    /**\n     * Handle left-click event.<br>\n     *\n     * @method handleClick\n     * @param {number} x - The click X position on the canvas.\n     * @param {number} y - The click Y position on the canvas.\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.handleClick = function (e) {\n        var _self = this;\n        // const x:number = e.params.pos.x;\n        //const y:number = e.params.pos.y;\n        var p = this.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (p) {\n            _self.vertices[p.vindex].listeners.fireClickEvent(e);\n            if (this.keyHandler && this.keyHandler.isDown('shift')) {\n                if (p.typeName == 'bpath') {\n                    var vert = _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid);\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                else if (p.typeName == 'vertex') {\n                    var vert = _self.vertices[p.vindex];\n                    if (vert.attr.selectable)\n                        vert.attr.isSelected = !vert.attr.isSelected;\n                }\n                _self.redraw();\n            }\n            else if (this.keyHandler.isDown('y') /* && p.type=='bpath' && (p.pid==BezierPath.START_POINT || p.pid==BezierPath.END_POINT) */) {\n                _self.vertices[p.vindex].attr.bezierAutoAdjust = !_self.vertices[p.vindex].attr.bezierAutoAdjust;\n                _self.redraw();\n            }\n        }\n        else if (_self.selectPolygon != null) {\n            var vert = _self.transformMousePosition(e.params.pos.x, e.params.pos.y);\n            _self.selectPolygon.vertices.push(new Vertex_1.Vertex(vert.x, vert.y));\n            _self.redraw();\n        }\n    };\n    /**\n     * Transforms the given x-y-(mouse-)point to coordinates respecting the view offset\n     * and the zoom settings.\n     *\n     * @method transformMousePosition\n     * @param {number} x - The x position relative to the canvas.\n     * @param {number} y - The y position relative to the canvas.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} A simple object <pre>{ x : Number, y : Number }</pre> with the transformed coordinates.\n     **/\n    PlotBoilerplate.prototype.transformMousePosition = function (x, y) {\n        /* return { x : (x/this.config.cssScaleX-this.config.offsetX)/(this.config.scaleX),\n           y : (y/this.config.cssScaleY-this.config.offsetY)/(this.config.scaleY) }; */\n        // console.log('offset', this.config.offsetX, this.config.offsetY, this.draw.offset );\n        return { x: (x / this.config.cssScaleX - this.config.offsetX) / (this.config.scaleX),\n            y: (y / this.config.cssScaleY - this.config.offsetY) / (this.config.scaleY) };\n    };\n    ;\n    /**\n     * Revert a transformed mouse position back to canvas coordinates.\n     *\n     * This is the inverse function of `transformMousePosition`.\n     *\n     * @method revertMousePosition\n     * @param {number} x - The x component of the position to revert.\n     * @param {number} y - The y component of the position to revert.\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {XYCoords} The canvas coordinates for the given position.\n     **/\n    PlotBoilerplate.prototype.revertMousePosition = function (x, y) {\n        return { x: x / this.config.cssScaleX + this.config.offsetX,\n            y: y / this.config.cssScaleY + this.config.offsetY };\n    };\n    ;\n    /**\n     * Determine if any elements are currently being dragged (on mouse move or touch move).\n     *\n     * @method getDraggedElementCount\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {number} The number of elements that are currently being dragged.\n     **/\n    PlotBoilerplate.prototype.getDraggedElementCount = function () {\n        return this.draggedElements.length;\n    };\n    ;\n    /**\n     * (Helper) The mouse-down handler.\n     *\n     * It selects vertices for dragging.\n     *\n     * @method mouseDownHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDownHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse or touch events\n        var p = _self.locatePointNear(_self.transformMousePosition(e.params.pos.x, e.params.pos.y), PlotBoilerplate.DEFAULT_CLICK_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n        if (!p)\n            return;\n        // Drag all selected elements?\n        if (p.typeName == 'vertex' && _self.vertices[p.vindex].attr.isSelected) {\n            // Multi drag\n            // for( var i in _self.vertices ) {\n            for (var i = 0; i < _self.vertices.length; i++) {\n                if (_self.vertices[i].attr.isSelected) {\n                    _self.draggedElements.push(new PlotBoilerplate.Draggable(_self.vertices[i], PlotBoilerplate.Draggable.VERTEX).setVIndex(i));\n                    _self.vertices[i].listeners.fireDragStartEvent(e);\n                }\n            }\n        }\n        else {\n            // Single drag\n            if (!_self.vertices[p.vindex].attr.draggable)\n                return;\n            _self.draggedElements.push(p);\n            if (p.typeName == 'bpath')\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragStartEvent(e);\n            else if (p.typeName == 'vertex')\n                _self.vertices[p.vindex].listeners.fireDragStartEvent(e);\n        }\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-drag handler.\n     *\n     * It moves selected elements around or performs the panning if the ctrl-key if\n     * hold down.\n     *\n     * @method mouseDragHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseDragHandler = function (e) {\n        var _self = this;\n        var oldDragAmount = { x: e.params.dragAmount.x, y: e.params.dragAmount.y };\n        e.params.dragAmount.x /= _self.config.cssScaleX;\n        e.params.dragAmount.y /= _self.config.cssScaleY;\n        // Important note to: this.keyHandler.isDown('ctrl')\n        //    We should not use this for any input.\n        //    Reason: most browsers use [Ctrl]+[t] to create new browser tabs.\n        //            If so, the key-up event for [Ctrl] will be fired in the _new tab_,\n        //            not this one. So this tab will never receive any [Ctrl-down] events\n        //            until next keypress; the implication is, that [Ctrl] would still\n        //            considered to be pressed which is not true.\n        if (this.keyHandler.isDown('alt') || this.keyHandler.isDown('spacebar')) {\n            _self.setOffset(_self.draw.offset.clone().add(e.params.dragAmount));\n            _self.redraw();\n        }\n        else {\n            // Convert drag amount by scaling\n            // Warning: this possibly invalidates the dragEvent for other listeners!\n            //          Rethink the solution when other features are added.\n            e.params.dragAmount.x /= _self.draw.scale.x;\n            e.params.dragAmount.y /= _self.draw.scale.y;\n            for (var i in _self.draggedElements) {\n                var p = _self.draggedElements[i];\n                if (p.typeName == 'bpath') {\n                    _self.paths[p.pindex].moveCurvePoint(p.cindex, p.pid, new Vertex_1.Vertex(e.params.dragAmount.x, e.params.dragAmount.y));\n                    _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEvent(e);\n                }\n                else if (p.typeName == 'vertex') {\n                    if (!_self.vertices[p.vindex].attr.draggable)\n                        continue;\n                    _self.vertices[p.vindex].add(e.params.dragAmount);\n                    _self.vertices[p.vindex].listeners.fireDragEvent(e);\n                }\n            }\n        }\n        // Restore old event values!\n        e.params.dragAmount.x = oldDragAmount.x;\n        e.params.dragAmount.y = oldDragAmount.y;\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-up handler.\n     *\n     * It clears the dragging-selection.\n     *\n     * @method mouseUpHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseUpHandler = function (e) {\n        var _self = this;\n        if (e.which != 1)\n            return; // Only react on left mouse;\n        if (!e.params.wasDragged) {\n            _self.handleClick(e); // e.params.pos.x, e.params.pos.y );\n        }\n        for (var i in _self.draggedElements) {\n            var p = _self.draggedElements[i];\n            if (p.typeName == 'bpath') {\n                _self.paths[p.pindex].bezierCurves[p.cindex].getPointByID(p.pid).listeners.fireDragEndEvent(e);\n            }\n            else if (p.typeName == 'vertex') {\n                _self.vertices[p.vindex].listeners.fireDragEndEvent(e);\n            }\n        }\n        _self.draggedElements = [];\n        _self.redraw();\n    };\n    ;\n    /**\n     * The mouse-wheel handler.\n     *\n     * It performs the zooming.\n     *\n     * @method mouseWheelHandler.\n     * @param {XMouseEvent} e - The event to handle\n     * @private\n     * @return {void}\n     **/\n    PlotBoilerplate.prototype.mouseWheelHandler = function (e) {\n        var zoomStep = 1.25; // Make configurable?\n        // CHANGED replaced _self by this\n        var _self = this;\n        var we = e;\n        if (we.deltaY < 0) {\n            _self.setZoom(_self.config.scaleX * zoomStep, _self.config.scaleY * zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        else if (we.deltaY > 0) {\n            _self.setZoom(_self.config.scaleX / zoomStep, _self.config.scaleY / zoomStep, new Vertex_1.Vertex(e.params.pos.x, e.params.pos.y));\n        }\n        e.preventDefault();\n        _self.redraw();\n    };\n    ;\n    /**\n     * Set the new draw offset.\n     *\n     * Note: the function will not trigger any redraws.\n     *\n     * @param {Vertex} newOffset - The new draw offset to use.\n     **/\n    PlotBoilerplate.prototype.setOffset = function (newOffset) {\n        this.draw.offset.set(newOffset);\n        this.fill.offset.set(newOffset);\n        this.config.offsetX = newOffset.x;\n        this.config.offsetY = newOffset.y;\n    };\n    ;\n    /**\n    * Set a new zoom value (and re-adjust the draw offset).\n    *\n    * Note: the function will not trigger any redraws.\n    *\n    * @param {number} zoomFactorX - The new horizontal zoom value.\n    * @param {number} zoomFactorY - The new vertical zoom value.\n    * @param {Vertex} interactionPos - The position of mouse/touch interaction.\n    **/\n    PlotBoilerplate.prototype.setZoom = function (zoomFactorX, zoomFactorY, interactionPos) {\n        var oldPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        this.draw.scale.x = this.fill.scale.x = this.config.scaleX = Math.max(zoomFactorX, 0.01);\n        this.draw.scale.y = this.fill.scale.y = this.config.scaleY = Math.max(zoomFactorY, 0.01);\n        var newPos = this.transformMousePosition(interactionPos.x, interactionPos.y);\n        var newOffsetX = this.draw.offset.x + (newPos.x - oldPos.x) * this.draw.scale.x;\n        var newOffsetY = this.draw.offset.y + (newPos.y - oldPos.y) * this.draw.scale.y;\n        this.setOffset({ x: newOffsetX, y: newOffsetY });\n    };\n    PlotBoilerplate.prototype.installInputListeners = function () {\n        var _self = this;\n        if (this.config.enableMouse) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .down(function (e) { _self.mouseDownHandler(e); })\n                .drag(function (e) { _self.mouseDragHandler(e); })\n                .up(function (e) { _self.mouseUpHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse interaction disabled.');\n        }\n        if (this.config.enableMouseWheel) {\n            // Install a mouse handler on the canvas.\n            new MouseHandler_1.MouseHandler(this.eventCatcher ? this.eventCatcher : this.canvas)\n                .wheel(function (e) { _self.mouseWheelHandler(e); });\n        }\n        else {\n            _self.console.log('Mouse wheel interaction disabled.');\n        }\n        if (this.config.enableTouch) {\n            // Install a touch handler on the canvas.\n            var relPos_1 = function (pos) {\n                var bounds = _self.canvas.getBoundingClientRect();\n                return { x: pos.x - bounds.left,\n                    y: pos.y - bounds.top\n                };\n            };\n            if (globalThis[\"AlloyFinger\"] && typeof globalThis[\"AlloyFinger\"] == \"function\") {\n                try {\n                    // Do not include AlloyFinger itself to the library\n                    // (17kb, but we want to keep this lib as tiny as possible).\n                    // Solution: only import type defintions from AlloyFinger.\n                    var touchMovePos = null;\n                    var touchDownPos = null;\n                    var draggedElement = null;\n                    var multiTouchStartScale = null;\n                    var clearTouch_1 = function () {\n                        touchMovePos = null;\n                        touchDownPos = null;\n                        draggedElement = null;\n                        multiTouchStartScale = null;\n                        _self.draggedElements = [];\n                    };\n                    new alloyfinger_typescript_1.default(this.eventCatcher ? this.eventCatcher : this.canvas, {\n                        touchStart: function (evt) {\n                            if (evt.touches.length == 1) {\n                                touchMovePos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                touchDownPos = new Vertex_1.Vertex(relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY }));\n                                draggedElement = _self.locatePointNear(_self.transformMousePosition(touchMovePos.x, touchMovePos.y), PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE / Math.min(_self.config.cssScaleX, _self.config.cssScaleY));\n                                if (draggedElement && draggedElement.typeName == 'vertex') {\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { params: { isTouchEvent: true, dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                    _self.draggedElements = [draggedElement];\n                                    draggingVertex.listeners.fireDragStartEvent(fakeEvent);\n                                }\n                            }\n                        },\n                        touchMove: function (evt) {\n                            if (evt.touches.length == 1 && draggedElement) {\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                var rel = relPos_1({ x: evt.touches[0].clientX, y: evt.touches[0].clientY });\n                                var trans = _self.transformMousePosition(rel.x, rel.y);\n                                var diff = new Vertex_1.Vertex(_self.transformMousePosition(touchMovePos.x, touchMovePos.y)).difference(trans);\n                                if (draggedElement.typeName == 'vertex') {\n                                    if (!_self.vertices[draggedElement.vindex].attr.draggable)\n                                        return;\n                                    _self.vertices[draggedElement.vindex].add(diff);\n                                    var draggingVertex = _self.vertices[draggedElement.vindex];\n                                    var fakeEvent = { isTouchEvent: true, params: { dragAmount: diff.clone(), wasDragged: true, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone().add(diff), vertex: draggingVertex } };\n                                    draggingVertex.listeners.fireDragEvent(fakeEvent);\n                                    _self.redraw();\n                                }\n                                touchMovePos = new Vertex_1.Vertex(rel);\n                            }\n                            else if (evt.touches.length == 2) {\n                                // If at least two fingers touch and move, then change the draw offset (panning).\n                                evt.preventDefault();\n                                evt.stopPropagation();\n                                _self.setOffset(_self.draw.offset.clone().addXY(evt.deltaX, evt.deltaY)); // Apply zoom?\n                                _self.redraw();\n                            }\n                        },\n                        touchEnd: function (evt) {\n                            // Note: e.touches.length is 0 here\n                            if (draggedElement && draggedElement.typeName == 'vertex') {\n                                var draggingVertex = _self.vertices[draggedElement.vindex];\n                                var fakeEvent = { isTouchEvent: true, params: { dragAmount: { x: 0, y: 0 }, wasDragged: false, mouseDownPos: touchDownPos.clone(), mouseDragPos: touchDownPos.clone(), vertex: draggingVertex } };\n                                // Check if vertex was moved\n                                if (touchMovePos && touchDownPos && touchDownPos.distance(touchMovePos) < 0.001) {\n                                    // if( e.touches.length == 1 && diff.x == 0 && diff.y == 0 ) {\n                                    draggingVertex.listeners.fireClickEvent(fakeEvent);\n                                }\n                                else {\n                                    draggingVertex.listeners.fireDragEndEvent(fakeEvent);\n                                }\n                            }\n                            clearTouch_1();\n                        },\n                        touchCancel: function (evt) {\n                            clearTouch_1();\n                        },\n                        multipointStart: function (evt) {\n                            multiTouchStartScale = _self.draw.scale.clone();\n                        },\n                        multipointEnd: function (evt) {\n                            multiTouchStartScale = null;\n                        },\n                        pinch: function (evt) {\n                            // For pinching there must be at least two touch items\n                            var fingerA = new Vertex_1.Vertex(evt.touches.item(0).clientX, evt.touches.item(0).clientY);\n                            var fingerB = new Vertex_1.Vertex(evt.touches.item(1).clientX, evt.touches.item(1).clientY);\n                            var center = new Line_1.Line(fingerA, fingerB).vertAt(0.5);\n                            _self.setZoom(multiTouchStartScale.x * evt.zoom, multiTouchStartScale.y * evt.zoom, center);\n                            _self.redraw();\n                        }\n                    });\n                }\n                catch (e) {\n                    console.error(\"Failed to initialize AlloyFinger!\");\n                    console.error(e);\n                }\n                ;\n            }\n            else if (globalThis[\"Touchy\"] && typeof globalThis[\"Touchy\"] == \"function\") {\n                console.error('[Deprecation] Found Touchy which is not supported any more. Please use AlloyFinger instead.');\n                // Convert absolute touch positions to relative DOM element position (relative to canvas)\n            }\n            else {\n                console.warn(\"Cannot initialize the touch handler. AlloyFinger is missig. Did you include it?\");\n            }\n        }\n        else {\n            _self.console.log('Touch interaction disabled.');\n        }\n        if (this.config.enableKeys) {\n            // Install key handler\n            this.keyHandler = new KeyHandler_1.KeyHandler({ trackAll: true })\n                .down('escape', function () {\n                _self.clearSelection(true);\n            })\n                .down('shift', function () {\n                _self.selectPolygon = new Polygon_1.Polygon();\n                _self.redraw();\n            })\n                .up('shift', function () {\n                // Find and select vertices in the drawn area\n                if (_self.selectPolygon == null)\n                    return;\n                _self.selectVerticesInPolygon(_self.selectPolygon);\n                _self.selectPolygon = null;\n                _self.redraw();\n            });\n        } // END IF enableKeys?\n        else {\n            _self.console.log('Keyboard interaction disabled.');\n        }\n    };\n    /**\n     * Creates a control GUI (a dat.gui instance) for this\n     * plot boilerplate instance.\n     *\n     * @method createGUI\n     * @instance\n     * @memberof PlotBoilerplate\n     * @return {dat.gui.GUI}\n     **/\n    PlotBoilerplate.prototype.createGUI = function () {\n        // This function moved to the helper utils.\n        // We do not want to include the whole dat.GUI package.\n        if (globalThis[\"utils\"] && typeof globalThis[\"utils\"].createGUI == \"function\")\n            return globalThis[\"utils\"].createGUI(this);\n        else\n            throw \"Cannot create dat.GUI instance; did you load the ./utils/creategui helper function an the dat.GUI library?\";\n    };\n    ;\n    var _a;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_WIDTH = 1024;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CANVAS_HEIGHT = 768;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_CLICK_TOLERANCE = 8;\n    /** @constant {number} */\n    PlotBoilerplate.DEFAULT_TOUCH_TOLERANCE = 32;\n    /**\n     * A wrapper class for draggable items (mostly vertices).\n     * @private\n     **/\n    PlotBoilerplate.Draggable = (_a = /** @class */ (function () {\n            function class_1(item, typeName) {\n                this.item = item;\n                this.typeName = typeName;\n            }\n            ;\n            class_1.prototype.isVertex = function () { return this.typeName == PlotBoilerplate.Draggable.VERTEX; };\n            ;\n            class_1.prototype.setVIndex = function (vindex) { this.vindex = vindex; return this; };\n            ;\n            return class_1;\n        }()),\n        _a.VERTEX = 'vertex',\n        _a);\n    /**\n     * A set of helper functions.\n     **/\n    PlotBoilerplate.utils = {\n        /**\n         * Merge the elements in the 'extension' object into the 'base' object based on\n         * the keys of 'base'.\n         *\n         * @param {Object} base\n         * @param {Object} extension\n         * @return {Object} base extended by the new attributes.\n         **/\n        safeMergeByKeys: function (base, extension) {\n            for (var k in extension) {\n                if (!extension.hasOwnProperty(k))\n                    continue;\n                if (base.hasOwnProperty(k)) {\n                    var typ = typeof base[k];\n                    try {\n                        if (typ == 'boolean')\n                            base[k] = !!JSON.parse(extension[k]);\n                        else if (typ == 'number')\n                            base[k] = JSON.parse(extension[k]) * 1;\n                        else if (typ == 'function' && typeof extension[k] == 'function')\n                            base[k] = extension[k];\n                        else\n                            base[k] = extension[k];\n                    }\n                    catch (e) {\n                        console.error('error in key ', k, extension[k], e);\n                    }\n                }\n                else {\n                    base[k] = extension[k];\n                }\n            }\n            return base;\n        },\n        /**\n         * A helper function to scale elements (usually the canvas) using CSS.\n         *\n         * transform-origin is at (0,0).\n         *\n         * @param {HTMLElement} element - The DOM element to scale.\n         * @param {number} scaleX The - X scale factor.\n         * @param {number} scaleY The - Y scale factor.\n         * @return {void}\n         **/\n        setCSSscale: function (element, scaleX, scaleY) {\n            element.style['transform-origin'] = '0 0';\n            if (scaleX == 1.0 && scaleY == 1.0)\n                element.style.transform = null;\n            else\n                element.style.transform = 'scale(' + scaleX + ',' + scaleY + ')';\n        },\n        // A helper for fetching data from objects.\n        fetch: {\n            /**\n             * A helper function to the the object property value specified by the given key.\n             *\n             * @param {any} object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {any}    fallback - A default value if the key does not exist.\n             **/\n            val: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'undefined')\n                    return fallback;\n                return obj[key];\n            },\n            /**\n             * A helper function to the the object property numeric value specified by the given key.\n             *\n             * @param {any}    object   - The object to get the property's value from. Must not be null.\n             * @param {string} key      - The key of the object property (the name).\n             * @param {number} fallback - A default value if the key does not exist.\n             * @return {number}\n             **/\n            num: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] === 'number')\n                    return obj[key];\n                else {\n                    try {\n                        return JSON.parse(obj[key]) * 1;\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property boolean value specified by the given key.\n             *\n             * @param {any}     object   - The object to get the property's value from. Must not be null.\n             * @param {string}  key      - The key of the object property (the name).\n             * @param {boolean} fallback - A default value if the key does not exist.\n             * @return {boolean}\n             **/\n            bool: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] == 'boolean')\n                    return obj[key];\n                else {\n                    try {\n                        return !!JSON.parse(obj[key]);\n                    }\n                    catch (e) {\n                        return fallback;\n                    }\n                }\n            },\n            /**\n             * A helper function to the the object property function-value specified by the given key.\n             *\n             * @param {any}      object   - The object to get the property's value from. Must not be null.\n             * @param {string}   key      - The key of the object property (the name).\n             * @param {function} fallback - A default value if the key does not exist.\n             * @return {function}\n             **/\n            func: function (obj, key, fallback) {\n                if (!obj.hasOwnProperty(key))\n                    return fallback;\n                if (typeof obj[key] !== 'function')\n                    return fallback;\n                return obj[key];\n            }\n        },\n        /**\n         * Installs vertex listeners to the path's vertices so that controlpoints\n         * move with their path points when dragged.\n         *\n         * Bézier path points with attr.bezierAutoAdjust==true will have their\n         * two control points audo-updated if moved, too (keep path connections smooth).\n         *\n         * @param {BezierPath} bezierPath - The path to use auto-adjustment for.\n         **/\n        enableBezierPathAutoAdjust: function (bezierPath) {\n            for (var i = 0; i < bezierPath.bezierCurves.length; i++) {\n                // This should be wrapped into the BezierPath implementation.\n                bezierPath.bezierCurves[i].startPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartPoint(e.params.vertex);\n                    bezierPath.bezierCurves[cindex].startPoint.addXY(-e.params.dragAmount.x, -e.params.dragAmount.y);\n                    bezierPath.moveCurvePoint(cindex * 1, bezierPath.START_POINT, e.params.dragAmount);\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].startControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByStartControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex].startPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustPredecessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                bezierPath.bezierCurves[i].endControlPoint.listeners.addDragListener(function (e) {\n                    var cindex = bezierPath.locateCurveByEndControlPoint(e.params.vertex);\n                    if (!bezierPath.bezierCurves[cindex % bezierPath.bezierCurves.length].endPoint.attr.bezierAutoAdjust)\n                        return;\n                    bezierPath.adjustSuccessorControlPoint(cindex * 1, true, // obtain handle length?\n                    false // update arc lengths\n                    );\n                    bezierPath.updateArcLengths();\n                });\n                if (i + 1 == bezierPath.bezierCurves.length) { // && !bezierPath.adjustCircular ) { \n                    // Move last control point with the end point (if not circular)\n                    bezierPath.bezierCurves[bezierPath.bezierCurves.length - 1].endPoint.listeners.addDragListener(function (e) {\n                        if (!bezierPath.adjustCircular) {\n                            var cindex = bezierPath.locateCurveByEndPoint(e.params.vertex);\n                            bezierPath.moveCurvePoint(cindex * 1, bezierPath.END_CONTROL_POINT, new Vertex_1.Vertex({ x: e.params.dragAmount.x, y: e.params.dragAmount.y }));\n                        }\n                        bezierPath.updateArcLengths();\n                    });\n                }\n            } // END for\n        }\n    }; // END utils\n    return PlotBoilerplate;\n}()); // END class PlotBoilerplate\nexports.PlotBoilerplate = PlotBoilerplate;\n//# sourceMappingURL=PlotBoilerplate.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-14\n * @modified 2018-11-17 Added the containsVert function.\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-10-25 Added the scale function.\n * @modified 2019-11-06 JSDoc update.\n * @modified 2019-11-07 Added toCubicBezierPath(number) function.\n * @modified 2019-11-22 Added the rotate(number,Vertex) function.\n * @modified 2020-03-24 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-10-30 Added the `addVertex` function.\n * @modified 2020-10-31 Added the `getVertexAt` function.\n * @modified 2020-11-06 Added the `move` function.\n * @modified 2020-11-10 Added the `getBounds` function.\n * @modified 2020-11-11 Generalized `move(Vertex)` to `move(XYCoords)`.\n * @modified 2021-01-20 Added UID.\n * @modified 2021-01-29 Added the `signedArea` function (was global function in the demos before).\n * @modified 2021-01-29 Added the `isClockwise` function.\n * @modified 2021-01-29 Added the `area` function.\n * @modified 2021-01-29 Changed the param type for `containsVert` from Vertex to XYCoords.\n * @version 1.7.0\n *\n * @file Polygon\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Polygon = void 0;\nvar BezierPath_1 = require(\"./BezierPath\");\nvar Bounds_1 = require(\"./Bounds\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A polygon class. Any polygon consists of an array of vertices; polygons can be open or closed.\n *\n * @requires BezierPath\n * @requires Bounds\n * @requires SVGSerializabe\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n * @requires XYCoords\n */\nvar Polygon = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Polygon\n     * @param {Vertex[]} vertices - An array of 2d vertices that shape the polygon.\n     * @param {boolean} isOpen - Indicates if the polygon should be rendered as an open or closed shape.\n     **/\n    function Polygon(vertices, isOpen) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Polygon\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof vertices == 'undefined')\n            vertices = [];\n        this.vertices = vertices;\n        this.isOpen = isOpen;\n    }\n    ;\n    /**\n     * Add a vertex to the end of the `vertices` array.\n     *\n     * @method addVert\n     * @param {Vertex} vert - The vertex to add.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.addVertex = function (vert) {\n        this.vertices.push(vert);\n    };\n    ;\n    /**\n     * Get the polygon vertex at the given position (index).\n     *\n     * The index may exceed the total vertex count, and will be wrapped around then (modulo).\n     *\n     * For k >= 0:\n     *  - getVertexAt( vertices.length )     == getVertexAt( 0 )\n     *  - getVertexAt( vertices.length + k ) == getVertexAt( k )\n     *  - getVertexAt( -k )                  == getVertexAt( vertices.length -k )\n     *\n     * @metho getVertexAt\n     * @param {number} index - The index of the desired vertex.\n     * @instance\n     * @memberof Polygon\n     * @return {Vertex} At the given index.\n     **/\n    Polygon.prototype.getVertexAt = function (index) {\n        if (index < 0)\n            return this.vertices[this.vertices.length - (Math.abs(index) % this.vertices.length)];\n        else\n            return this.vertices[index % this.vertices.length];\n    };\n    ;\n    /**\n     * Move the polygon's vertices by the given amount.\n     *\n     * @method move\n     * @param {XYCoords} amount - The amount to move.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this for chaining\n     **/\n    Polygon.prototype.move = function (vert) {\n        for (var i in this.vertices) {\n            this.vertices[i].add(vert);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if the given vertex is inside this polygon.<br>\n     * <br>\n     * Ray-casting algorithm found at<br>\n     *    https://stackoverflow.com/questions/22521982/check-if-point-inside-a-polygon\n     *\n     * @method containsVert\n     * @param {XYCoords} vert - The vertex to check. The new x-component.\n     * @return {boolean} True if the passed vertex is inside this polygon. The polygon is considered closed.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.containsVert = function (vert) {\n        // ray-casting algorithm based on\n        //    http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n        var inside = false;\n        for (var i = 0, j = this.vertices.length - 1; i < this.vertices.length; j = i++) {\n            var xi = this.vertices[i].x, yi = this.vertices[i].y;\n            var xj = this.vertices[j].x, yj = this.vertices[j].y;\n            var intersect = ((yi > vert.y) != (yj > vert.y))\n                && (vert.x < (xj - xi) * (vert.y - yi) / (yj - yi) + xi);\n            if (intersect)\n                inside = !inside;\n        }\n        return inside;\n    };\n    ;\n    /**\n     * Calculate the area of the given polygon (unsigned).\n     *\n     * Note that this does not work for self-intersecting polygons.\n     *\n     * @method area\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.area = function () {\n        return Polygon.utils.area(this.vertices);\n    };\n    ;\n    /**\n     * Calulate the signed polyon area by interpreting the polygon as a matrix\n     * and calculating its determinant.\n     *\n     * @method signedArea\n     * @instance\n     * @memberof Polygon\n     * @return {number}\n     */\n    Polygon.prototype.signedArea = function () {\n        return Polygon.utils.signedArea(this.vertices);\n    };\n    ;\n    /**\n     * Get the winding order of this polgon: clockwise or counterclockwise.\n     *\n     * @method isClockwise\n     * @instance\n     * @memberof Polygon\n     * @return {boolean}\n     */\n    Polygon.prototype.isClockwise = function () {\n        return Polygon.utils.signedArea(this.vertices) < 0;\n    };\n    ;\n    /**\n     * Scale the polygon relative to the given center.\n     *\n     * @method scale\n     * @param {number} factor - The scale factor.\n     * @param {Vertex} center - The center of scaling.\n     * @return {Polygon} this, for chaining.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.scale = function (factor, center) {\n        for (var i in this.vertices) {\n            if (typeof this.vertices[i].scale == 'function')\n                this.vertices[i].scale(factor, center);\n            else\n                console.log('There seems to be a null vertex!', this.vertices[i]);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Rotate the polygon around the given center.\n     *\n     * @method rotate\n     * @param {number} angle  - The rotation angle.\n     * @param {Vertex} center - The center of rotation.\n     * @instance\n     * @memberof Polygon\n     * @return {Polygon} this, for chaining.\n     **/\n    Polygon.prototype.rotate = function (angle, center) {\n        for (var i in this.vertices) {\n            this.vertices[i].rotate(angle, center);\n        }\n        return this;\n    };\n    ;\n    /**\n     * Get the bounding box (bounds) of this polygon.\n     *\n     * @method getBounds\n     * @instance\n     * @memberof Polygon\n     * @return {Bounds} The rectangular bounds of this polygon.\n     **/\n    Polygon.prototype.getBounds = function () {\n        return Bounds_1.Bounds.computeFromVertices(this.vertices);\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of quadratic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are pairs of control-point-and-end-point:\n     * <pre>startPoint, controlPoint0, pathPoint1, controlPoint1, pathPoint2, controlPoint2, ..., endPoint</pre>\n     *\n     * @method toQuadraticBezierData\n     * @return {Vertex[]}  An array of 2d vertices that shape the quadratic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierData = function () {\n        if (this.vertices.length < 3)\n            return [];\n        var qbezier = [];\n        var cc0 = this.vertices[0];\n        var cc1 = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n        qbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length : this.vertices.length + 1;\n        for (var t = 1; t < limit; t++) {\n            cc0 = this.vertices[t % this.vertices.length];\n            cc1 = this.vertices[(t + 1) % this.vertices.length];\n            var edgeCenter = new Vertex_1.Vertex(cc0.x + (cc1.x - cc0.x) / 2, cc0.y + (cc1.y - cc0.y) / 2);\n            qbezier.push(cc0);\n            qbezier.push(edgeCenter);\n            cc0 = cc1;\n        }\n        return qbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a quadratic bezier curve, represented as an SVG data string.\n     *\n     * @method toQuadraticBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toQuadraticBezierSVGString = function () {\n        var qdata = this.toQuadraticBezierData();\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 2) {\n            buffer.push('Q ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a sequence of cubic Bézier curves.<br>\n     * <br>\n     * The first vertex in the returned array is the start point.<br>\n     * The following sequence are triplets of (first-control-point, secnond-control-point, end-point):<br>\n     * <pre>startPoint, controlPoint0_0, controlPoint1_1, pathPoint1, controlPoint1_0, controlPoint1_1, ..., endPoint</pre>\n     *\n     * @method toCubicBezierData\n     * @param {number=} threshold - An optional threshold (default=1.0) how strong the curve segments\n     *                              should over-/under-drive. Should be between 0.0 and 1.0 for best\n     *                              results but other values are allowed.\n     * @return {Vertex[]}  An array of 2d vertices that shape the cubic Bézier curve.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierData = function (threshold) {\n        if (typeof threshold == 'undefined')\n            threshold = 1.0;\n        if (this.vertices.length < 3)\n            return [];\n        var cbezier = [];\n        var a = this.vertices[0];\n        var b = this.vertices[1];\n        var edgeCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n        cbezier.push(edgeCenter);\n        var limit = this.isOpen ? this.vertices.length - 1 : this.vertices.length;\n        for (var t = 0; t < limit; t++) {\n            var a = this.vertices[t % this.vertices.length];\n            var b = this.vertices[(t + 1) % this.vertices.length];\n            var c = this.vertices[(t + 2) % this.vertices.length];\n            var aCenter = new Vertex_1.Vertex(a.x + (b.x - a.x) / 2, a.y + (b.y - a.y) / 2);\n            var bCenter = new Vertex_1.Vertex(b.x + (c.x - b.x) / 2, b.y + (c.y - b.y) / 2);\n            var a2 = new Vertex_1.Vertex(aCenter.x + (b.x - aCenter.x) * threshold, aCenter.y + (b.y - aCenter.y) * threshold);\n            var b0 = new Vertex_1.Vertex(bCenter.x + (b.x - bCenter.x) * threshold, bCenter.y + (b.y - bCenter.y) * threshold);\n            cbezier.push(a2);\n            cbezier.push(b0);\n            cbezier.push(bCenter);\n        }\n        return cbezier;\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier curve, represented as an SVG data string.\n     *\n     * @method toCubicBezierSVGString\n     * @return {string} The 'd' part for an SVG 'path' element.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierSVGString = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        if (qdata.length == 0)\n            return \"\";\n        var buffer = ['M ' + qdata[0].x + ' ' + qdata[0].y];\n        for (var i = 1; i < qdata.length; i += 3) {\n            buffer.push('C ' + qdata[i].x + ' ' + qdata[i].y + ', ' + qdata[i + 1].x + ' ' + qdata[i + 1].y + ', ' + qdata[i + 2].x + ' ' + qdata[i + 2].y);\n        }\n        return buffer.join(' ');\n    };\n    ;\n    /**\n     * Convert this polygon to a cubic bezier path instance.\n     *\n     * @method toCubicBezierPath\n     * @param {number} threshold - The threshold, usually from 0.0 to 1.0.\n     * @return {BezierPath}      - A bezier path instance.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toCubicBezierPath = function (threshold) {\n        var qdata = this.toCubicBezierData(threshold);\n        // Conver the linear path vertices to a two-dimensional path array\n        var pathdata = [];\n        for (var i = 0; i + 3 < qdata.length; i += 3) {\n            pathdata.push([qdata[i], qdata[i + 3], qdata[i + 1], qdata[i + 2]]);\n        }\n        return BezierPath_1.BezierPath.fromArray(pathdata);\n    };\n    ;\n    /**\n     * Create an SVG representation of this polygon.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Polygon\n     **/\n    Polygon.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        if (this.vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(this.vertices[0].x.toString());\n            buffer.push(' ');\n            buffer.push(this.vertices[0].y.toString());\n            for (var i = 1; i < this.vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(this.vertices[i].x.toString());\n                buffer.push(' ');\n                buffer.push(this.vertices[i].y.toString());\n            }\n            if (!this.isOpen) {\n                buffer.push(' Z');\n            }\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    Polygon.utils = {\n        /**\n         * Calculate the area of the given polygon (unsigned).\n         *\n         * Note that this does not work for self-intersecting polygons.\n         *\n         * @name area\n         * @return {number}\n         */\n        area: function (vertices) {\n            // Found at:\n            //    https://stackoverflow.com/questions/16285134/calculating-polygon-area\n            var total = 0.0;\n            for (var i = 0, l = vertices.length; i < l; i++) {\n                var addX = vertices[i].x;\n                var addY = vertices[(i + 1) % l].y;\n                var subX = vertices[(i + 1) % l].x;\n                var subY = vertices[i].y;\n                total += (addX * addY * 0.5);\n                total -= (subX * subY * 0.5);\n            }\n            return Math.abs(total);\n        },\n        /**\n         * Calulate the signed polyon area by interpreting the polygon as a matrix\n         * and calculating its determinant.\n         *\n         * @name signedArea\n         * @return {number}\n         */\n        signedArea: function (vertices) {\n            var sum = 0;\n            var n = vertices.length;\n            for (var i = 0; i < n; i++) {\n                var j = (i + 1) % n;\n                sum += (vertices[j].x - vertices[i].x) * (vertices[i].y + vertices[j].y);\n            }\n            return sum;\n        }\n    };\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n//# sourceMappingURL=Polygon.js.map","\"use strict\";\n/**\n * @author    Ikaros Kappler\n * @date_init 2012-10-17 (Wrote a first version of this in that year).\n * @date      2018-04-03 (Refactored the code into a new class).\n * @modified  2018-04-28 Added some documentation.\n * @modified  2019-09-11 Added the scaleToCentroid(Number) function (used by the walking triangle demo).\n * @modified  2019-09-12 Added beautiful JSDoc compliable comments.\n * @modified  2019-11-07 Added to toSVG(options) function to make Triangles renderable as SVG.\n * @modified  2019-12-09 Fixed the determinant() function. The calculation was just wrong.\n * @modified  2020-03-16 (Corona times) Added the 'fromArray' function.\n * @modified  2020-03-17 Added the Triangle.toPolygon() function.\n * @modified  2020-03-17 Added proper JSDoc comments.\n * @modified  2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified  2020-05-09 Added the new Circle class (ported to Typescript from the demos).\n * @modified  2020-05-12 Added getIncircularTriangle() function.\n * @modified  2020-05-12 Added getIncircle() function.\n * @modified  2020-05-12 Fixed the signature of getCircumcirle(). Was still a generic object.\n * @modified  2020-06-18 Added the `getIncenter` function.\n * @modified  2020-12-28 Added the `getArea` function.\n * @modified  2021-01-20 Added UID.\n * @modified  2021-01-22 Always updating circumcircle when retieving it.\n * @version   2.5.1\n *\n * @file Triangle\n * @fileoverview A simple triangle class: three vertices.\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Triangle = void 0;\nvar Bounds_1 = require(\"./Bounds\");\nvar Circle_1 = require(\"./Circle\");\nvar Line_1 = require(\"./Line\");\nvar Polygon_1 = require(\"./Polygon\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar Vertex_1 = require(\"./Vertex\");\nvar geomutils_1 = require(\"./geomutils\");\n/**\n * @classdesc A triangle class for triangulations.\n *\n * The class was written for a Delaunay trinagulation demo so it might\n * contain some strange and unexpected functions.\n *\n * @requires Bounds\n * @requires Circle\n * @requires Line\n * @requires Vertex\n * @requires Polygon\n * @requires SVGSerializale\n * @requires UID\n * @requires UIDGenerator\n * @requires geomutils\n *\n */\nvar Triangle = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Triangle\n     * @param {Vertex} a - The first vertex of the triangle.\n     * @param {Vertex} b - The second vertex of the triangle.\n     * @param {Vertex} c - The third vertex of the triangle.\n     **/\n    function Triangle(a, b, c) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Triangle\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.calcCircumcircle();\n    }\n    /**\n     * Create a new triangle from the given array of vertices.\n     *\n     * The array must have at least three vertices, otherwise an error will be raised.\n     * This function will not create copies of the vertices.\n     *\n     * @method fromArray\n     * @static\n     * @param {Array<Vertex>} arr - The required array with at least three vertices.\n     * @memberof Vertex\n     * @return {Triangle}\n     **/\n    Triangle.fromArray = function (arr) {\n        if (arr.length < 3)\n            throw \"Cannot create triangle from array with less than three vertices (\" + arr.length + \")\";\n        return new Triangle(arr[0], arr[1], arr[2]);\n    };\n    ;\n    /**\n     * Get the area of this triangle. The returned area is never negative.\n     *\n     * If you are interested in the signed area, please consider using the\n     * `Triangle.utils.signedArea` helper function. This method just returns\n     * the absolute value of the signed area.\n     *\n     * @method getArea\n     * @instance\n     * @memberof Triangle\n     * @return {number} The non-negative area of this triangle.\n     */\n    Triangle.prototype.getArea = function () {\n        return Math.abs(Triangle.utils.signedArea(this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y));\n    };\n    ;\n    /**\n     * Get the centroid of this triangle.\n     *\n     * The centroid is the average midpoint for each side.\n     *\n     * @method getCentroid\n     * @return {Vertex} The centroid\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.getCentroid = function () {\n        return new Vertex_1.Vertex((this.a.x + this.b.x + this.c.x) / 3, (this.a.y + this.b.y + this.c.y) / 3);\n    };\n    ;\n    /**\n     * Scale the triangle towards its centroid.\n     *\n     * @method scaleToCentroid\n     * @param {number} - The scale factor to use. That can be any scalar.\n     * @return {Triangle} this (for chaining)\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.scaleToCentroid = function (factor) {\n        var centroid = this.getCentroid();\n        this.a.scale(factor, centroid);\n        this.b.scale(factor, centroid);\n        this.c.scale(factor, centroid);\n        return this;\n    };\n    ;\n    /**\n     * Get the circumcircle of this triangle.\n     *\n     * The circumcircle is that unique circle on which all three\n     * vertices of this triangle are located on.\n     *\n     * Please note that for performance reasons any changes to vertices will not reflect in changes\n     * of the circumcircle (center or radius). Please call the calcCirumcircle() function\n     * after triangle vertex changes.\n     *\n     * @method getCircumcircle\n     * @return {Object} - { center:Vertex, radius:float }\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getCircumcircle = function () {\n        // if( !this.center || !this.radius ) \n        this.calcCircumcircle();\n        return new Circle_1.Circle(this.center.clone(), this.radius);\n    };\n    ;\n    /**\n     * Check if this triangle and the passed triangle share an\n     * adjacent edge.\n     *\n     * For edge-checking Vertex.equals is used which uses an\n     * an epsilon for comparison.\n     *\n     * @method isAdjacent\n     * @param {Triangle} tri - The second triangle to check adjacency with.\n     * @return {boolean} - True if this and the passed triangle have at least one common edge.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.isAdjacent = function (tri) {\n        var a = this.a.equals(tri.a) || this.a.equals(tri.b) || this.a.equals(tri.c);\n        var b = this.b.equals(tri.a) || this.b.equals(tri.b) || this.b.equals(tri.c);\n        var c = this.c.equals(tri.a) || this.c.equals(tri.b) || this.c.equals(tri.c);\n        return (a && b) || (a && c) || (b && c);\n    };\n    ;\n    /**\n     * Get that vertex of this triangle (a,b,c) that is not vert1 nor vert2 of\n     * the passed two.\n     *\n     * @method getThirdVertex\n     * @param {Vertex} vert1 - The first vertex.\n     * @param {Vertex} vert2 - The second vertex.\n     * @return {Vertex} - The third vertex of this triangle that makes up the whole triangle with vert1 and vert2.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.getThirdVertex = function (vert1, vert2) {\n        if (this.a.equals(vert1) && this.b.equals(vert2) || this.a.equals(vert2) && this.b.equals(vert1))\n            return this.c;\n        if (this.b.equals(vert1) && this.c.equals(vert2) || this.b.equals(vert2) && this.c.equals(vert1))\n            return this.a;\n        //if( this.c.equals(vert1) && this.a.equals(vert2) || this.c.equals(vert2) && this.a.equals(vert1) )\n        return this.b;\n    };\n    ;\n    /**\n     * Re-compute the circumcircle of this triangle (if the vertices\n     * have changed).\n     *\n     * The circumcenter and radius are stored in this.center and\n     * this.radius. There is a third result: radius_squared (for internal computations).\n     *\n     * @method calcCircumcircle\n     * @return void\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.calcCircumcircle = function () {\n        // From\n        //    http://www.exaflop.org/docs/cgafaq/cga1.html\n        var A = this.b.x - this.a.x;\n        var B = this.b.y - this.a.y;\n        var C = this.c.x - this.a.x;\n        var D = this.c.y - this.a.y;\n        var E = A * (this.a.x + this.b.x) + B * (this.a.y + this.b.y);\n        var F = C * (this.a.x + this.c.x) + D * (this.a.y + this.c.y);\n        var G = 2.0 * (A * (this.c.y - this.b.y) - B * (this.c.x - this.b.x));\n        var dx, dy;\n        if (Math.abs(G) < Triangle.EPSILON) {\n            // Collinear - find extremes and use the midpoint\n            var bounds = this.bounds();\n            this.center = new Vertex_1.Vertex((bounds.min.x + bounds.max.x) / 2, (bounds.min.y + bounds.max.y) / 2);\n            dx = this.center.x - bounds.min.x;\n            dy = this.center.y - bounds.min.y;\n        }\n        else {\n            var cx = (D * E - B * F) / G;\n            var cy = (A * F - C * E) / G;\n            this.center = new Vertex_1.Vertex(cx, cy);\n            dx = this.center.x - this.a.x;\n            dy = this.center.y - this.a.y;\n        }\n        this.radius_squared = dx * dx + dy * dy;\n        this.radius = Math.sqrt(this.radius_squared);\n    };\n    ; // END calcCircumcircle\n    /**\n     * Check if the passed vertex is inside this triangle's\n     * circumcircle.\n     *\n     * @method inCircumcircle\n     * @param {Vertex} v - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.inCircumcircle = function (v) {\n        var dx = this.center.x - v.x;\n        var dy = this.center.y - v.y;\n        var dist_squared = dx * dx + dy * dy;\n        return (dist_squared <= this.radius_squared);\n    };\n    ;\n    /**\n     * Get the rectangular bounds for this triangle.\n     *\n     * @method bounds\n     * @return {Bounds} - The min/max bounds of this triangle.\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.bounds = function () {\n        return new Bounds_1.Bounds(new Vertex_1.Vertex(Triangle.utils.min3(this.a.x, this.b.x, this.c.x), Triangle.utils.min3(this.a.y, this.b.y, this.c.y)), new Vertex_1.Vertex(Triangle.utils.max3(this.a.x, this.b.x, this.c.x), Triangle.utils.max3(this.a.y, this.b.y, this.c.y)));\n    };\n    ;\n    /**\n     * Convert this triangle to a polygon instance.\n     *\n     * Plase note that this conversion does not perform a deep clone.\n     *\n     * @method toPolygon\n     * @return {Polygon} A new polygon representing this triangle.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toPolygon = function () {\n        return new Polygon_1.Polygon([this.a, this.b, this.c]);\n    };\n    ;\n    /**\n     * Get the determinant of this triangle.\n     *\n     * @method determinant\n     * @return {number} - The determinant (float).\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.determinant = function () {\n        // (b.y - a.y)*(c.x - b.x) - (c.y - b.y)*(b.x - a.x);\n        return (this.b.y - this.a.y) * (this.c.x - this.b.x) - (this.c.y - this.b.y) * (this.b.x - this.a.x);\n    };\n    ;\n    /**\n     * Checks if the passed vertex (p) is inside this triangle.\n     *\n     * Note: matrix determinants rock.\n     *\n     * @method containsPoint\n     * @param {Vertex} p - The vertex to check.\n     * @return {boolean}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.containsPoint = function (p) {\n        return Triangle.utils.pointIsInTriangle(p.x, p.y, this.a.x, this.a.y, this.b.x, this.b.y, this.c.x, this.c.y);\n    };\n    ;\n    /**\n     * Get that inner triangle which defines the maximal incircle.\n     *\n     * @return {Triangle} The triangle of those points in this triangle that define the incircle.\n     */\n    Triangle.prototype.getIncircularTriangle = function () {\n        var lineA = new Line_1.Line(this.a, this.b);\n        var lineB = new Line_1.Line(this.b, this.c);\n        var lineC = new Line_1.Line(this.c, this.a);\n        var bisector1 = geomutils_1.geomutils.nsectAngle(this.b, this.a, this.c, 2)[0]; // bisector of first angle (in b)\n        var bisector2 = geomutils_1.geomutils.nsectAngle(this.c, this.b, this.a, 2)[0]; // bisector of second angle (in c)\n        var intersection = bisector1.intersection(bisector2);\n        // Find the closest points on one of the polygon lines (all have same distance by construction)\n        var circleIntersA = lineA.getClosestPoint(intersection);\n        var circleIntersB = lineB.getClosestPoint(intersection);\n        var circleIntersC = lineC.getClosestPoint(intersection);\n        return new Triangle(circleIntersA, circleIntersB, circleIntersC);\n    };\n    ;\n    /**\n     * Get the incircle of this triangle. That is the circle that touches each side\n     * of this triangle in exactly one point.\n     *\n     * Note this just calls getIncircularTriangle().getCircumcircle()\n     *\n     * @return {Circle} The incircle of this triangle.\n     */\n    Triangle.prototype.getIncircle = function () {\n        return this.getIncircularTriangle().getCircumcircle();\n    };\n    ;\n    /**\n     * Get the incenter of this triangle (which is the center of the circumcircle).\n     *\n     * Note: due to performance reasonst the incenter is buffered inside the triangle because\n     *       computing it is relatively expensive. If a, b or c have changed you should call the\n     *       calcCircumcircle() function first, otherwise you might get wrong results.\n     * @return Vertex The incenter of this triangle.\n     **/\n    Triangle.prototype.getIncenter = function () {\n        if (!this.center || !this.radius)\n            this.calcCircumcircle();\n        return this.center.clone();\n    };\n    ;\n    /**\n     * Converts this triangle into a human-readable string.\n     *\n     * @method toString\n     * @return {string}\n     * @instance\n     * @memberof Triangle\n     */\n    Triangle.prototype.toString = function () {\n        return '{ a : ' + this.a.toString() + ', b : ' + this.b.toString() + ', c : ' + this.c.toString() + '}';\n    };\n    ;\n    /**\n     * Create an SVG representation of this triangle.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} The SVG string.\n     * @instance\n     * @memberof Triangle\n     **/\n    Triangle.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<path');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' d=\"');\n        var vertices = [this.a, this.b, this.c];\n        if (vertices.length > 0) {\n            buffer.push('M ');\n            buffer.push(vertices[0].x);\n            buffer.push(' ');\n            buffer.push(vertices[0].y);\n            for (var i = 1; i < vertices.length; i++) {\n                buffer.push(' L ');\n                buffer.push(vertices[i].x);\n                buffer.push(' ');\n                buffer.push(vertices[i].y);\n            }\n            //if( !this.isOpen ) {\n            buffer.push(' Z');\n            //}\n        }\n        buffer.push('\" />');\n        return buffer.join('');\n    };\n    ;\n    /**\n     * An epsilon for comparison.\n     * This should be the same epsilon as in Vertex.\n     *\n     * @private\n     **/\n    Triangle.EPSILON = 1.0e-6;\n    Triangle.utils = {\n        // Used in the bounds() function.\n        max3: function (a, b, c) {\n            return (a >= b && a >= c) ? a : (b >= a && b >= c) ? b : c;\n        },\n        min3: function (a, b, c) {\n            return (a <= b && a <= c) ? a : (b <= a && b <= c) ? b : c;\n        },\n        signedArea: function (p0x, p0y, p1x, p1y, p2x, p2y) {\n            return 0.5 * (-p1y * p2x + p0y * (-p1x + p2x) + p0x * (p1y - p2y) + p1x * p2y);\n        },\n        /**\n         * Used by the containsPoint() function.\n         *\n         * @private\n         **/\n        pointIsInTriangle: function (px, py, p0x, p0y, p1x, p1y, p2x, p2y) {\n            //\n            // Point-in-Triangle test found at\n            //   http://stackoverflow.com/questions/2049582/how-to-determine-a-point-in-a-2d-triangle\n            // var area : number = 1/2*(-p1y*p2x + p0y*(-p1x + p2x) + p0x*(p1y - p2y) + p1x*p2y);\n            var area = Triangle.utils.signedArea(p0x, p0y, p1x, p1y, p2x, p2y);\n            var s = 1 / (2 * area) * (p0y * p2x - p0x * p2y + (p2y - p0y) * px + (p0x - p2x) * py);\n            var t = 1 / (2 * area) * (p0x * p1y - p0y * p1x + (p0y - p1y) * px + (p1x - p0x) * py);\n            return s > 0 && t > 0 && (1 - s - t) > 0;\n        }\n    };\n    return Triangle;\n}());\nexports.Triangle = Triangle;\n//# sourceMappingURL=Triangle.js.map","\"use strict\";\n/**\n * @classdesc A static UIDGenerator.\n *\n * @author  Ikaros Kappler\n * @date    2021-01-20\n * @version 1.0.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.UIDGenerator = void 0;\nvar UIDGenerator = /** @class */ (function () {\n    function UIDGenerator() {\n    }\n    UIDGenerator.next = function () { return \"\" + UIDGenerator.current++; };\n    ;\n    UIDGenerator.current = 0;\n    return UIDGenerator;\n}());\nexports.UIDGenerator = UIDGenerator;\n;\n//# sourceMappingURL=UIDGenerator.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-11-28\n * @modified 2018-12-04 Added the toSVGString function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2021-01-20 Added UID.\n * @version  1.1.0\n *\n * @file VEllipse\n * @fileoverview Ellipses with a center and an x- and a y-axis (stored as a vertex).\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VEllipse = void 0;\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc An ellipse class based on two vertices [centerX,centerY] and [radiusX,radiusY].\n *\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires Vertex\n */\nvar VEllipse = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @param {Vertex} center The ellipses center.\n     * @param {Vertex} axis The x- and y-axis.\n     * @name VEllipse\n     **/\n    function VEllipse(center, axis) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"VEllipse\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.center = center;\n        this.axis = axis;\n    }\n    ;\n    /**\n     * Create an SVG representation of this ellipse.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @param {object} options { className?:string }\n     * @return string The SVG string\n     */\n    VEllipse.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<ellipse');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.center.x + '\"');\n        buffer.push(' cy=\"' + this.center.y + '\"');\n        buffer.push(' rx=\"' + this.axis.x + '\"');\n        buffer.push(' ry=\"' + this.axis.y + '\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    return VEllipse;\n}());\nexports.VEllipse = VEllipse;\n//# sourceMappingURL=VEllipse.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-01-30\n * @modified 2019-02-23 Added the toSVGString function, overriding Line.toSVGString.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-19 Added the clone function (overriding Line.clone()).\n * @modified 2019-09-02 Added the Vector.perp() function.\n * @modified 2019-09-02 Added the Vector.inverse() function.\n * @modified 2019-12-04 Added the Vector.inv() function.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2021-01-20 Added UID.\n * @version  1.3.0\n *\n * @file Vector\n * @public\n **/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vector = void 0;\nvar VertTuple_1 = require(\"./VertTuple\");\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A vector (Vertex,Vertex) is a line with a visible direction.<br>\n *            <br>\n *            Vectors are drawn with an arrow at their end point.<br>\n *            <b>The Vector class extends the Line class.</b>\n *\n * @requires VertTuple\n * @requires Vertex\n **/\nvar Vector = /** @class */ (function (_super) {\n    __extends(Vector, _super);\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name Vector\n     * @extends Line\n     * @param {Vertex} vertA - The start vertex of the vector.\n     * @param {Vertex} vertB - The end vertex of the vector.\n     **/\n    function Vector(vertA, vertB) {\n        var _this = _super.call(this, vertA, vertB, function (a, b) { return new Vector(a, b); }) || this;\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        _this.className = \"Vector\";\n        return _this;\n    }\n    ;\n    /**\n     * Get the perpendicular of this vector which is located at a.\n     *\n     * @param {Number} t The position on the vector.\n     * @return {Vector} A new vector being the perpendicular of this vector sitting on a.\n     **/\n    Vector.prototype.perp = function () {\n        var v = this.clone();\n        v.sub(this.a);\n        v = new Vector(new Vertex_1.Vertex(), new Vertex_1.Vertex(-v.b.y, v.b.x));\n        v.a.add(this.a);\n        v.b.add(this.a);\n        return v;\n    };\n    ;\n    /**\n     * The inverse of a vector is a vector witht the same magnitude but oppose direction.\n     *\n     * Please not that the origin of this vector changes here: a->b becomes b->a.\n     *\n     * @return {Vector}\n     **/\n    Vector.prototype.inverse = function () {\n        var tmp = this.a;\n        this.a = this.b;\n        this.b = tmp;\n        return this;\n    };\n    ;\n    /**\n     * This function computes the inverse of the vector, which means 'a' stays untouched.\n     *\n     * @return {Vector} this for chaining.\n     **/\n    Vector.prototype.inv = function () {\n        this.b.x = this.a.x - (this.b.x - this.a.x);\n        this.b.y = this.a.y - (this.b.y - this.a.y);\n        return this;\n    };\n    ;\n    /**\n     * Get the intersection if this vector and the specified vector.\n     *\n     * @method intersection\n     * @param {Vector} line The second vector.\n     * @return {Vertex} The intersection (may lie outside the end-points).\n     * @instance\n     * @memberof Line\n     **/\n    Vector.prototype.intersection = function (line) {\n        var denominator = this.denominator(line);\n        if (denominator == 0)\n            return null;\n        var a = this.a.y - line.a.y;\n        var b = this.a.x - line.a.x;\n        var numerator1 = ((line.b.x - line.a.x) * a) - ((line.b.y - line.a.y) * b);\n        var numerator2 = ((this.b.x - this.a.x) * a) - ((this.b.y - this.a.y) * b);\n        a = numerator1 / denominator; // NaN if parallel lines\n        b = numerator2 / denominator;\n        // TODO:\n        // FOR A VECTOR THE LINE-INTERSECTION MUST BE ON BOTH VECTORS\n        // if we cast these lines infinitely in both directions, they intersect here:\n        return new Vertex_1.Vertex(this.a.x + (a * (this.b.x - this.a.x)), this.a.y + (a * (this.b.y - this.a.y)));\n    };\n    ;\n    /**\n     * Create an SVG representation of this line.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @override\n     * @param {object=} options - A set of options, like 'className'.\n     * @return {string} The SVG string representation.\n     * @instance\n     * @memberof Vector\n     **/\n    Vector.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        var vertices = Vector.utils.buildArrowHead(this.a, this.b, 8, 1.0, 1.0);\n        buffer.push('<g');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push('>');\n        buffer.push('   <line');\n        buffer.push(' x1=\"' + this.a.x + '\"');\n        buffer.push(' y1=\"' + this.a.y + '\"');\n        buffer.push(' x2=\"' + vertices[0].x + '\"');\n        buffer.push(' y2=\"' + vertices[0].y + '\"');\n        buffer.push(' />');\n        // Add arrow head\n        buffer.push('   <polygon points=\"');\n        for (var i = 0; i < vertices.length; i++) {\n            if (i > 0)\n                buffer.push(' ');\n            buffer.push('' + vertices[i].x + ',' + vertices[i].y);\n        }\n        buffer.push('\"/>');\n        buffer.push('</g>');\n        return buffer.join('');\n    };\n    ;\n    Vector.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex_1.Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vector;\n}(VertTuple_1.VertTuple));\nexports.Vector = Vector;\n//# sourceMappingURL=Vector.js.map","\"use strict\";\n/**\n * @author Ikaros Kappler\n * @date   2020-03-24\n * @modified 2020-05-04 Fixed a serious bug in the pointDistance function.\n * @modified 2020-05-12 The angle(line) param was still not optional. Changed that.\n * @modified 2020-11-11 Generalized the `add` and `sub` param from `Vertex` to `XYCoords`.\n * @modified 2020-12-04 Changed`vtutils.dist2` params from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Changed `getClosestT` param from `Vertex` to `XYCoords` (generalized).\n * @modified 2020-12-04 Added the `hasPoint(XYCoords)` function.\n * @modified 2021-01-20 Added UID.\n * @version 1.1.0\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertTuple = void 0;\nvar Vertex_1 = require(\"./Vertex\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\n/**\n * @classdesc An abstract base classes for vertex tuple constructs, like Lines or Vectors.\n * @abstract\n * @requires UID\n * @requires Vertex\n * @requires XYCoords\n */\nvar VertTuple = /** @class */ (function () {\n    /**\n     * Creates an instance.\n     *\n     * @constructor\n     * @name VertTuple\n     * @param {Vertex} a The tuple's first point.\n     * @param {Vertex} b The tuple's second point.\n     **/\n    function VertTuple(a, b, factory) {\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        this.a = a;\n        this.b = b;\n        this.factory = factory;\n    }\n    /**\n     * Get the length of this line.\n     *\n     * @method length\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.length = function () {\n        return Math.sqrt(Math.pow(this.b.x - this.a.x, 2) + Math.pow(this.b.y - this.a.y, 2));\n    };\n    ;\n    /**\n     * Set the length of this vector to the given amount. This only works if this\n     * vector is not a null vector.\n     *\n     * @method setLength\n     * @param {number} length - The desired length.\n     * @memberof VertTuple\n     * @return {T} this (for chaining)\n     **/\n    VertTuple.prototype.setLength = function (length) {\n        return this.scale(length / this.length());\n    };\n    ;\n    /**\n     * Substract the given vertex from this line's end points.\n     *\n     * @method sub\n     * @param {XYCoords} amount The amount (x,y) to substract.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.sub = function (amount) {\n        this.a.sub(amount);\n        this.b.sub(amount);\n        return this;\n    };\n    ;\n    /**\n     * Add the given vertex to this line's end points.\n     *\n     * @method add\n     * @param {XYCoords} amount The amount (x,y) to add.\n     * @return {Line} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.add = function (amount) {\n        this.a.add(amount);\n        this.b.add(amount);\n        return this;\n    };\n    ;\n    /**\n     * Normalize this line (set to length 1).\n     *\n     * @method normalize\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.normalize = function () {\n        this.b.set(this.a.x + (this.b.x - this.a.x) / this.length(), this.a.y + (this.b.y - this.a.y) / this.length());\n        return this;\n    };\n    ;\n    /**\n     * Scale this line by the given factor.\n     *\n     * @method scale\n     * @param {number} factor The factor for scaling (1.0 means no scale).\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.scale = function (factor) {\n        this.b.set(this.a.x + (this.b.x - this.a.x) * factor, this.a.y + (this.b.y - this.a.y) * factor);\n        return this;\n    };\n    ;\n    /**\n     * Move this line to a new location.\n     *\n     * @method moveTo\n     * @param {Vertex} newA - The new desired location of 'a'. Vertex 'b' will be moved, too.\n     * @return {VertTuple} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.moveTo = function (newA) {\n        var diff = this.a.difference(newA);\n        this.a.add(diff);\n        this.b.add(diff);\n        return this;\n    };\n    ;\n    /**\n     * Get the angle between this and the passed line (in radians).\n     *\n     * @method angle\n     * @param {VertTuple} line - (optional) The line to calculate the angle to. If null the baseline (x-axis) will be used.\n     * @return {number} this\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.angle = function (line) {\n        if (line == null || typeof line == 'undefined') {\n            line = this.factory(new Vertex_1.Vertex(0, 0), new Vertex_1.Vertex(100, 0));\n        }\n        // Compute the angle from x axis and the return the difference :)\n        var v0 = this.b.clone().sub(this.a);\n        var v1 = line.b.clone().sub(line.a);\n        // Thank you, Javascript, for this second atan function. No additional math is needed here!\n        // The result might be negative, but isn't it usually nicer to determine angles in positive values only?\n        return Math.atan2(v1.x, v1.y) - Math.atan2(v0.x, v0.y);\n    };\n    ;\n    /**\n     * Get line point at position t in [0 ... 1]:<br>\n     * <pre>[P(0)]=[A]--------------------[P(t)]------[B]=[P(1)]</pre><br>\n     * <br>\n     * The counterpart of this function is Line.getClosestT(Vertex).\n     *\n     * @method vertAt\n     * @param {number} t The position scalar.\n     * @return {Vertex} The vertex a position t.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.vertAt = function (t) {\n        return new Vertex_1.Vertex(this.a.x + (this.b.x - this.a.x) * t, this.a.y + (this.b.y - this.a.y) * t);\n    };\n    ;\n    /**\n     * Get the denominator of this and the given line.\n     *\n     * If the denominator is zero (or close to zero) both line are co-linear.\n     *\n     * @method denominator\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return {Number}\n     **/\n    VertTuple.prototype.denominator = function (line) {\n        // http://jsfiddle.net/justin_c_rounds/Gd2S2/\n        return ((line.b.y - line.a.y) * (this.b.x - this.a.x)) - ((line.b.x - line.a.x) * (this.b.y - this.a.y));\n    };\n    ;\n    /**\n     * Checks if this and the given line are co-linear.\n     *\n     * The constant Vertex.EPSILON is used for tolerance.\n     *\n     * @method colinear\n     * @param {VertTuple} line\n     * @instance\n     * @memberof VertTuple\n     * @return true if both lines are co-linear.\n     */\n    VertTuple.prototype.colinear = function (line) {\n        return Math.abs(this.denominator(line)) < Vertex_1.Vertex.EPSILON;\n    };\n    ;\n    /**\n     * Get the closest position T from this line to the specified point.\n     *\n     * The counterpart for this function is Line.vertAt(Number).\n     *\n     * @name getClosetT\n     * @method getClosestT\n     * @param {XYCoords} p The point (vertex) to measure the distance to.\n     * @return {number} The line position t of minimal distance to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestT = function (p) {\n        var l2 = VertTuple.vtutils.dist2(this.a, this.b);\n        if (l2 === 0)\n            return 0;\n        var t = ((p.x - this.a.x) * (this.b.x - this.a.x) + (p.y - this.a.y) * (this.b.y - this.a.y)) / l2;\n        // Do not wrap to [0,1] here.\n        // Other results are of interest, too.\n        // t = Math.max(0, Math.min(1, t));\n        return t;\n    };\n    ;\n    /**\n     * Check if the given point is located on this line. Optionally also check if\n     * that point is located between point `a` and `b`.\n     *\n     * @method hasPoint\n     * @param {Vertex} point The point to check.\n     * @param {boolean=} insideBoundsOnly If set to to true (default=false) the point must be between start and end point of the line.\n     * @return {boolean} True if the given point is on this line.\n     * @instance\n     * @memberof VertTuple\n     */\n    VertTuple.prototype.hasPoint = function (point, insideBoundsOnly) {\n        var t = this.getClosestT(point);\n        // Compare to pointDistance?\n        if (typeof insideBoundsOnly !== \"undefined\" && insideBoundsOnly) {\n            var distance = Math.sqrt(VertTuple.vtutils.dist2(point, this.vertAt(t)));\n            return distance < Vertex_1.Vertex.EPSILON && t >= 0 && t <= 1;\n        }\n        else {\n            return t >= 0 && t <= 1;\n        }\n    };\n    /**\n     * Get the closest point on this line to the specified point.\n     *\n     * @method getClosestPoint\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {Vertex} The point on the line that is closest to p.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.getClosestPoint = function (p) {\n        var t = this.getClosestT(p);\n        return this.vertAt(t);\n    };\n    ;\n    /**\n     * The the minimal distance between this line and the specified point.\n     *\n     * @method pointDistance\n     * @param {Vertex} p The point (vertex) to measre the distance to.\n     * @return {number} The absolute minimal distance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.pointDistance = function (p) {\n        // Taken From:\n        // https://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment\n        return Math.sqrt(VertTuple.vtutils.dist2(p, this.vertAt(this.getClosestT(p))));\n    };\n    ;\n    /**\n     * Create a deep clone of this instance.\n     *\n     * @method cloneLine\n     * @return {T} A type safe clone if this instance.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.clone = function () {\n        return this.factory(this.a.clone(), this.b.clone());\n    };\n    ;\n    /**\n     * Create a string representation of this line.\n     *\n     * @method totring\n     * @return {string} The string representing this line.\n     * @instance\n     * @memberof VertTuple\n     **/\n    VertTuple.prototype.toString = function () {\n        return \"{ a : \" + this.a.toString() + \", b : \" + this.b.toString() + \" }\";\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertTuple.vtutils = {\n        dist2: function (v, w) {\n            return (v.x - w.x) * (v.x - w.x) + (v.y - w.y) * (v.y - w.y);\n        }\n    };\n    return VertTuple;\n}());\nexports.VertTuple = VertTuple;\n//# sourceMappingURL=VertTuple.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2012-10-17\n * @modified 2018-04-03 Refactored the code of october 2012 into a new class.\n * @modified 2018-04-28 Added some documentation.\n * @modified 2018-08-16 Added the set() function.\n * @modified 2018-08-26 Added VertexAttr.\n * @modified 2018-10-31 Extended the constructor by object{x,y}.\n * @modified 2018-11-19 Extended the set(number,number) function to set(Vertex).\n * @modified 2018-11-28 Added 'this' to the VertexAttr constructor.\n * @modified 2018-12-05 Added the sub(...) function. Changed the signature of the add() function! add(Vertex) and add(number,number) are now possible.\n * @modified 2018-12-21 (It's winter solstice) Added the inv()-function.\n * @modified 2019-01-30 Added the setX(Number) and setY(Number) functions.\n * @modified 2019-02-19 Added the difference(Vertex) function.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2019-04-24 Added the randomVertex(ViewPort) function.\n * @modified 2019-11-07 Added toSVGString(object) function.\n * @modified 2019-11-18 Added the rotate(number,Vertex) function.\n * @modified 2019-11-21 Fixed a bug in the rotate(...) function (elements were moved).\n * @modified 2020-03-06 Added functions invX() and invY().\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-05-26 Added functions addX(number) and addY(number).\n * @modifeid 2020-10-30 Change the warnings in `sub(...)` and `add(...)` into real errors.\n * @version  2.4.1\n *\n * @file Vertex\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Vertex = void 0;\nvar VertexAttr_1 = require(\"./VertexAttr\");\nvar UIDGenerator_1 = require(\"./UIDGenerator\");\nvar VertexListeners_1 = require(\"./VertexListeners\");\n/**\n * @classdesc A vertex is a pair of two numbers.<br>\n * <br>\n * It is used to identify a 2-dimensional point on the x-y-plane.\n *\n * @requires IVertexAttr\n * @requires SVGSerializable\n * @requires UID\n * @requires UIDGenerator\n * @requires VertexAttr\n * @requires VertexListeners\n * @requires XYCoords\n *\n */\nvar Vertex = /** @class */ (function () {\n    /**\n     * The constructor for the vertex class.\n     *\n     * @constructor\n     * @name Vertex\n     * @param {number} x - The x-coordinate of the new vertex.\n     * @param {number} y - The y-coordinate of the new vertex.\n     **/\n    function Vertex(x, y) {\n        /**\n         * Required to generate proper CSS classes and other class related IDs.\n         **/\n        this.className = \"Vertex\";\n        this.uid = UIDGenerator_1.UIDGenerator.next();\n        if (typeof x == 'undefined') {\n            this.x = 0;\n            this.y = 0;\n        }\n        else if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        this.attr = new VertexAttr_1.VertexAttr();\n        this.listeners = new VertexListeners_1.VertexListeners(this);\n    }\n    ;\n    /**\n     * Set the x- and y- component of this vertex.\n     *\n     * @method set\n     * @param {number} x - The new x-component.\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.set = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x = tuple.x;\n                this.y = tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x = x;\n                else if (typeof x == 'undefined')\n                    this.x = 0;\n                else\n                    this.x = NaN;\n                if (typeof y == 'number')\n                    this.y = y;\n                else if (typeof y == 'undefined')\n                    this.y = 0;\n                else\n                    this.y = NaN;\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component of this vertex.\n     *\n     * @method setX\n     * @param {number} x - The new x-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setX = function (x) {\n        this.x = x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component of this vertex.\n     *\n     * @method setY\n     * @param {number} y - The new y-component.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.setY = function (y) {\n        this.y = y;\n        return this;\n    };\n    ;\n    /**\n     * Set the x-component if this vertex to the inverse of its value.\n     *\n     * @method invX\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invX = function () {\n        this.x = -this.x;\n        return this;\n    };\n    ;\n    /**\n     * Set the y-component if this vertex to the inverse of its value.\n     *\n     * @method invY\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.invY = function () {\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amount to x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with add( {number}, {number} ) and\n     * add( {Vertex} ), as well.\n     *\n     * @method add\n     * @param {(number|Vertex)} x - The amount to add to x (or a vertex itself).\n     * @param {number=} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.add = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x += x;\n            this.y += y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x += tuple.x;\n                this.y += tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x += x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == 'number')\n                    this.y += y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x- and y- components of this vertex.\n     *\n     * @method addXY\n     * @param {number} x - The amount to add to x.\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addXY = function (amountX, amountY) {\n        this.x += amountX;\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the x-component of this vertex.\n     *\n     * @method addX\n     * @param {number} x - The amount to add to x.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addX = function (amountX) {\n        this.x += amountX;\n        return this;\n    };\n    ;\n    /**\n     * Add the passed amounts to the y-component of this vertex.\n     *\n     * @method addY\n     * @param {number} y - The amount to add to y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.addY = function (amountY) {\n        this.y += amountY;\n        return this;\n    };\n    ;\n    /**\n     * Substract the passed amount from x- and y- component of this vertex.<br>\n     * <br>\n     * This function works with sub( {number}, {number} ) and\n     * sub( {Vertex} ), as well.\n     *\n     * @method sub\n     * @param {(number|Vertex)} x - The amount to substract from x (or a vertex itself).\n     * @param {number=} y - The amount to substract from y.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.sub = function (x, y) {\n        if (typeof x == 'number' && typeof y == 'number') {\n            this.x -= x;\n            this.y -= y;\n        }\n        else {\n            var tuple = x;\n            if (typeof tuple.x == \"number\" && typeof tuple.y == \"number\") {\n                this.x -= tuple.x;\n                this.y -= tuple.y;\n            }\n            else {\n                if (typeof x == 'number')\n                    this.x -= x;\n                else\n                    throw \"Cannot add \" + typeof x + \" to numeric x component!\";\n                if (typeof y == 'number')\n                    this.y -= y;\n                else\n                    throw \"Cannot add \" + typeof y + \" to numeric y component!\";\n            }\n        }\n        return this;\n    };\n    ;\n    /**\n     * Check if this vertex equals the passed one.\n     * <br>\n     * This function uses an internal epsilon as tolerance.\n     *\n     * @method equals\n     * @param {Vertex} vertex - The vertex to compare this with.\n     * @return {boolean}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.equals = function (vertex) {\n        var eqX = (Math.abs(this.x - vertex.x) < Vertex.EPSILON);\n        var eqY = (Math.abs(this.y - vertex.y) < Vertex.EPSILON);\n        var result = eqX && eqY;\n        return result;\n    };\n    ;\n    /**\n     * Create a copy of this vertex.\n     *\n     * @method clone\n     * @return {Vertex} A new vertex, an exact copy of this.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.clone = function () {\n        return new Vertex(this.x, this.y);\n    };\n    ;\n    /**\n     * Get the distance to the passed point (in euclidean metric)\n     *\n     * @method distance\n     * @param {XYCoords} vert - The vertex to measure the distance to.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.distance = function (vert) {\n        return Math.sqrt(Math.pow(vert.x - this.x, 2) + Math.pow(vert.y - this.y, 2));\n    };\n    ;\n    /**\n     * Get the angle of this point (relative to (0,0) or to the given other origin point).\n     *\n     * @method angle\n     * @param {XYCoords} origin - The vertex to measure the angle from.\n     * @return {number}\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.angle = function (origin) {\n        var a = (typeof origin === \"undefined\" ? Math.PI / 2 - Math.atan2(this.x, this.y) : Math.PI / 2 - Math.atan2(origin.x - this.x, origin.y - this.y));\n        // Map to positive value\n        return a < 0 ? Math.PI * 2 + a : a;\n    };\n    ;\n    /**\n     * Get the difference to the passed point.<br>\n     * <br>\n     * The difference is (vert.x-this.x, vert.y-this.y).\n     *\n     * @method difference\n     * @param {Vertex} vert - The vertex to measure the x-y-difference to.\n     * @return {Vertex} A new vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.difference = function (vert) {\n        return new Vertex(vert.x - this.x, vert.y - this.y);\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'scales' this vertex\n     * towards/from a given center.\n     *\n     * @method scale\n     * @param {number} factor - The factor to 'scale' this vertex; 1.0 means no change.\n     * @param {Vertex=} center - The origin of scaling; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.scale = function (factor, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.x = center.x + (this.x - center.x) * factor;\n        this.y = center.y + (this.y - center.y) * factor;\n        return this;\n    };\n    ;\n    /**\n     * This is a vector-like behavior and 'rotates' this vertex\n     * around given center.\n     *\n     * @method rotate\n     * @param {number} angle - The angle to 'rotate' this vertex; 0.0 means no change.\n     * @param {Vertex=} center - The center of rotation; default is (0,0).\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.rotate = function (angle, center) {\n        if (!center || typeof center === \"undefined\")\n            center = new Vertex(0, 0);\n        this.sub(center);\n        angle += Math.atan2(this.y, this.x);\n        var len = this.distance(Vertex.ZERO); // {x:0,y:0});\n        this.x = len * Math.cos(angle);\n        this.y = len * Math.sin(angle);\n        this.add(center);\n        return this;\n    };\n    ;\n    /**\n     * Multiply both components of this vertex with the given scalar.<br>\n     * <br>\n     * Note: as in<br>\n     *    https://threejs.org/docs/#api/math/Vector2.multiplyScalar\n     *\n     * @method multiplyScalar\n     * @param {number} scalar - The scale factor; 1.0 means no change.\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.multiplyScalar = function (scalar) {\n        this.x *= scalar;\n        this.y *= scalar;\n        return this;\n    };\n    ;\n    /**\n     * Round the two components x and y of this vertex.\n     *\n     * @method round\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.round = function () {\n        this.x = Math.round(this.x);\n        this.y = Math.round(this.y);\n        return this;\n    };\n    ;\n    /**\n     * Change this vertex (x,y) to its inverse (-x,-y).\n     *\n     * @method inv\n     * @return {Vertex} this\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.inv = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this;\n    };\n    ;\n    /**\n     * Get a string representation of this vertex.\n     *\n     * @method toString\n     * @return {string} The string representation of this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toString = function () {\n        return '(' + this.x + ',' + this.y + ')';\n    };\n    ;\n    /**\n     * Convert this vertex to SVG code.\n     *\n     * @deprecated DEPRECATION Please use the drawutilssvg library and an XMLSerializer instead.\n     * @method toSVGString\n     * @param {object=} options - An optional set of options, like 'className'.\n     * @return {string} A string representing the SVG code for this vertex.\n     * @instance\n     * @memberof Vertex\n     **/\n    Vertex.prototype.toSVGString = function (options) {\n        options = options || {};\n        var buffer = [];\n        buffer.push('<circle');\n        if (options.className)\n            buffer.push(' class=\"' + options.className + '\"');\n        buffer.push(' cx=\"' + this.x + '\"');\n        buffer.push(' cy=\"' + this.y + '\"');\n        buffer.push(' r=\"2\"');\n        buffer.push(' />');\n        return buffer.join('');\n    };\n    ;\n    // END Vertex\n    /**\n     * Create a new random vertex inside the given viewport.\n     *\n     * @param {ViewPort} viewPort - A {min:Vertex, max:Vertex} viewport specifying the bounds.\n     * @return A new vertex with a random position.\n     **/\n    Vertex.randomVertex = function (viewPort) {\n        return new Vertex(viewPort.min.x + Math.random() * (viewPort.max.x - viewPort.min.x), viewPort.min.y + Math.random() * (viewPort.max.y - viewPort.min.y));\n    };\n    ;\n    Vertex.ZERO = new Vertex(0, 0);\n    /**\n     * An epsilon for comparison\n     *\n     * @private\n     * @readonly\n     **/\n    Vertex.EPSILON = 1.0e-6;\n    Vertex.utils = {\n        /**\n         * Generate a four-point arrow head, starting at the vector end minus the\n         * arrow head length.\n         *\n         * The first vertex in the returned array is guaranteed to be the located\n         * at the vector line end minus the arrow head length.\n         *\n         *\n         * Due to performance all params are required.\n         *\n         * The params scaleX and scaleY are required for the case that the scaling is not uniform (x and y\n         * scaling different). Arrow heads should not look distored on non-uniform scaling.\n         *\n         * If unsure use 1.0 for scaleX and scaleY (=no distortion).\n         * For headlen use 8, it's a good arrow head size.\n         *\n         * Example:\n         *    buildArrowHead( new Vertex(0,0), new Vertex(50,100), 8, 1.0, 1.0 )\n         *\n         * @param {Vertex} zA - The start vertex of the vector to calculate the arrow head for.\n         * @param {Vertex} zB - The end vertex of the vector.\n         * @param {number} headlen - The length of the arrow head (along the vector direction. A good value is 12).\n         * @param {number} scaleX  - The horizontal scaling during draw.\n         * @param {number} scaleY  - the vertical scaling during draw.\n         **/\n        // @DEPRECATED: use Vector.utils.buildArrowHead instead!!!\n        buildArrowHead: function (zA, zB, headlen, scaleX, scaleY) {\n            // console.warn('This function is deprecated! Use Vector.utils.buildArrowHead instead!');\n            var angle = Math.atan2((zB.y - zA.y) * scaleY, (zB.x - zA.x) * scaleX);\n            var vertices = [];\n            vertices.push(new Vertex(zB.x * scaleX - (headlen) * Math.cos(angle), zB.y * scaleY - (headlen) * Math.sin(angle)));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle - Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle - Math.PI / 8)));\n            vertices.push(new Vertex(zB.x * scaleX, zB.y * scaleY));\n            vertices.push(new Vertex(zB.x * scaleX - (headlen * 1.35) * Math.cos(angle + Math.PI / 8), zB.y * scaleY - (headlen * 1.35) * Math.sin(angle + Math.PI / 8)));\n            return vertices;\n        }\n    };\n    return Vertex;\n}());\nexports.Vertex = Vertex;\n//# sourceMappingURL=Vertex.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-26\n * @modified 2018-11-17 Added the 'isSelected' attribute.\n * @modified 2018-11-27 Added the global model for instantiating with custom attributes.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-29 Added the 'selectable' attribute.\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @version  1.1.1\n *\n * @file VertexAttr\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexAttr = void 0;\n/**\n * @classdesc The VertexAttr is a helper class to wrap together additional attributes\n * to vertices that do not belong to the 'standard canonical' vertex implementation.<br>\n * <br>\n * This is some sort of 'userData' object, but the constructor uses a global model\n * to obtain a (configurable) default attribute set to all instances.<br>\n */\nvar VertexAttr = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * Attributes will be initialized as defined in the model object\n     * which serves as a singleton.\n     *\n     * @constructor\n     * @name VertexAttr\n     **/\n    function VertexAttr() {\n        this.draggable = true;\n        this.selectable = true;\n        this.isSelected = false;\n        this.visible = true;\n        for (var key in VertexAttr.model)\n            this[key] = VertexAttr.model[key];\n    }\n    ;\n    /**\n     * This is the global attribute model. Set these object on the initialization\n     * of your app to gain all VertexAttr instances have these attributes.\n     *\n     * @type {object}\n     **/\n    VertexAttr.model = {\n        draggable: true,\n        selectable: true,\n        isSelected: false,\n        visible: true\n    };\n    return VertexAttr;\n}());\nexports.VertexAttr = VertexAttr;\n//# sourceMappingURL=VertexAttr.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-08-27\n * @modified 2018-11-28 Added the vertex-param to the constructor and extended the event. Vertex events now have a 'params' attribute object.\n * @modified 2019-03-20 Added JSDoc tags.\n * @modified 2020-02-22 Added 'return this' to the add* functions (for chanining).\n * @modified 2020-03-23 Ported to Typescript from JS.\n * @modified 2020-11-17 Added the `click` handler.\n * @version  1.1.0\n *\n * @file VertexListeners\n * @public\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VertexListeners = void 0;\n/**\n * @classdesc An event listeners wrapper. This is just a set of three listener\n *              queues (drag, dragStart, dragEnd) and their respective firing\n *              functions.\n *\n */\nvar VertexListeners = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name VertexListeners\n     * @param {Vertex} vertex - The vertex to use these listeners on (just a backward reference).\n     **/\n    function VertexListeners(vertex) {\n        this.click = [];\n        this.drag = [];\n        this.dragStart = [];\n        this.dragEnd = [];\n        this.vertex = vertex;\n    }\n    ;\n    /**\n     * Add a click listener.\n     *\n     * @method addClickListener\n     * @param {VertexListeners~dragListener} listener - The click listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addClickListener = function (listener) {\n        VertexListeners._addListener(this.click, listener);\n        return this;\n    };\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeClickListener = function (listener) {\n        this.click = VertexListeners._removeListener(this.click, listener);\n        return this;\n    };\n    ;\n    /**\n     * The click listener is a function with a single drag event param.\n     * @callback VertexListeners~clickListener\n     * @param {Event} e - The (extended) click event.\n     */\n    /**\n     * Add a drag listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragListener = function (listener) {\n        VertexListeners._addListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag listener is a function with a single drag event param.\n     * @callback VertexListeners~dragListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a drag listener.\n     *\n     * @method removeDragListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragListener = function (listener) {\n        this.drag = VertexListeners._removeListener(this.drag, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragStart listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragStartListener} listener - The drag-start listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragStartListener = function (listener) {\n        VertexListeners._addListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-start listener is a function with a single drag event param.\n     * @callback VertexListeners~dragStartListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n     * Remove a dragStart listener.\n     *\n     * @method addDragStartListener\n     * @param {VertexListeners~dragListener} listener - The drag listener to remove (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.removeDragStartListener = function (listener) {\n        this.dragStart = VertexListeners._removeListener(this.dragStart, listener);\n        return this;\n    };\n    ;\n    /**\n     * Add a dragEnd listener.\n     *\n     * @method addDragListener\n     * @param {VertexListeners~dragEndListener} listener - The drag-end listener to add (a callback).\n     * @return {VertexListeners} this (for chaining)\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.addDragEndListener = function (listener) {\n        // this.dragEnd.push( listener );\n        VertexListeners._addListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * The drag-end listener is a function with a single drag event param.\n     * @callback VertexListeners~dragEndListener\n     * @param {Event} e - The (extended) drag event.\n     */\n    /**\n    * Remove a drag listener.\n    *\n    * @method removeDragEndListener\n    * @param {VertexListeners~clickListener} listener - The drag listener to remove (a callback).\n    * @return {VertexListeners} this (for chaining)\n    * @instance\n    * @memberof VertexListeners\n    **/\n    VertexListeners.prototype.removeDragEndListener = function (listener) {\n        // this.drag.push( listener );\n        this.dragEnd = VertexListeners._removeListener(this.dragEnd, listener);\n        return this;\n    };\n    ;\n    /**\n     * Fire a click event with the given event instance to all\n     * installed click listeners.\n     *\n     * @method fireClickEvent\n     * @param {VertEvent|XMouseEvent} e - The click event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireClickEvent = function (e) {\n        VertexListeners._fireEvent(this, this.click, e);\n    };\n    ;\n    /**\n     * Fire a drag event with the given event instance to all\n     * installed drag listeners.\n     *\n     * @method fireDragEvent\n     * @param {VertEvent|XMouseEvent} e - The drag event itself to be fired to all installed drag listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEvent = function (e) {\n        VertexListeners._fireEvent(this, this.drag, e);\n    };\n    ;\n    /**\n     * Fire a dragStart event with the given event instance to all\n     * installed drag-start listeners.\n     *\n     * @method fireDragStartEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-start event itself to be fired to all installed dragStart listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragStartEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragStart, e);\n    };\n    ;\n    /**\n     * Fire a dragEnd event with the given event instance to all\n     * installed drag-end listeners.\n     *\n     * @method fireDragEndEvent\n     * @param {VertEvent|XMouseEvent} e - The drag-end event itself to be fired to all installed dragEnd listeners.\n     * @return {void}\n     * @instance\n     * @memberof VertexListeners\n     **/\n    VertexListeners.prototype.fireDragEndEvent = function (e) {\n        VertexListeners._fireEvent(this, this.dragEnd, e);\n    };\n    ;\n    /**\n     * @private\n     **/\n    VertexListeners._fireEvent = function (_self, listeners, e) {\n        var ve = e;\n        if (typeof ve.params == 'undefined')\n            ve.params = { vertex: _self.vertex };\n        else\n            ve.params.vertex = _self.vertex;\n        for (var i in listeners) {\n            listeners[i](ve);\n        }\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._addListener = function (listeners, newListener) {\n        for (var i in listeners) {\n            if (listeners[i] == newListener)\n                return false;\n        }\n        listeners.push(newListener);\n        return true;\n    };\n    ;\n    /**\n     * @private\n     */\n    VertexListeners._removeListener = function (listeners, oldListener) {\n        for (var i = 0; i < listeners.length; i++) {\n            if (listeners[i] == oldListener)\n                return listeners.splice(i, 1);\n        }\n        return listeners;\n    };\n    ;\n    return VertexListeners;\n}());\nexports.VertexListeners = VertexListeners;\n//# sourceMappingURL=VertexListeners.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2018-04-22\n * @modified 2018-08-16 Added the curve() function to draw cubic bézier curves.\n * @modified 2018-10-23 Recognizing the offset param in the circle() function.\n * @modified 2018-11-27 Added the diamondHandle() function.\n * @modified 2018-11-28 Added the grid() function and the ellipse() function.\n * @modified 2018-11-30 Renamed the text() function to label() as it is not scaling.\n * @modified 2018-12-06 Added a test function for drawing arc in SVG style.\n * @modified 2018-12-09 Added the dot(Vertex,color) function (copied from Feigenbaum-plot-script).\n * @modified 2019-01-30 Added the arrow(Vertex,Vertex,color) function for drawing arrow heads.\n * @modified 2019-01-30 Added the image(Image,Vertex,Vertex) function for drawing images.\n * @modified 2019-04-27 Fixed a severe drawing bug in the arrow(...) function. Scaling arrows did not work properly.\n * @modified 2019-04-28 Added Math.round to the dot() drawing parameters to really draw a singlt dot.\n * @modified 2019-06-07 Fixed an issue in the cubicBezier() function. Paths were always closed.\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2019-10-25 Polygons are no longer drawn with dashed lines (solid lines instead).\n * @modified 2019-11-18 Added the polyline function.\n * @modified 2019-11-22 Added a second workaround for th drawImage bug in Safari.\n * @modified 2019-12-07 Added the 'lineWidth' param to the line(...) function.\n * @modified 2019-12-07 Added the 'lineWidth' param to the cubicBezier(...) function.\n * @modified 2019-12-11 Added the 'color' param to the label(...) function.\n * @modified 2019-12-18 Added the quadraticBezier(...) function (for the sake of approximating Lissajous curves).\n * @modified 2019-12-20 Added the 'lineWidth' param to the polyline(...) function.\n * @modified 2020-01-09 Added the 'lineWidth' param to the ellipse(...) function.\n * @modified 2020-03-25 Ported this class from vanilla-JS to Typescript.\n * @modified 2020-05-05 Added the 'lineWidth' param to the circle(...) function.\n * @modified 2020-05-12 Drawing any handles (square, circle, diamond) with lineWidth 1 now; this was not reset before.\n * @modified 2020-06-22 Added a context.clearRect() call to the clear() function; clearing with alpha channel did not work as expected.\n * @modified 2020-09-07 Added the circleArc(...) function to draw sections of circles.\n * @modified 2020-10-06 Removed the .closePath() instruction from the circleArc function.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2020-10-28 Added the path(Path2D) function.\n * @modified 2020-12-28 Added the `singleSegment` mode (test).\n * @modified 2021-01-05 Added the image-loaded/broken check.\n * @modified 2021-01-24 Added the `setCurrentId` function from the `DrawLib` interface.\n * @version  1.8.3\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutils = void 0;\nvar CubicBezierCurve_1 = require(\"./CubicBezierCurve\");\nvar Vertex_1 = require(\"./Vertex\");\n// Todo: rename this class to Drawutils?\n/**\n * @classdesc A wrapper class for basic drawing operations.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutils = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {anvasRenderingContext2D} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutils(context, fillShapes) {\n        this.ctx = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n    }\n    ;\n    /**\n     * Called before each draw cycle.\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.beginDrawCycle = function (renderTime) {\n        // NOOP\n    };\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     **/\n    drawutils.prototype.setCurrentId = function (uid) {\n        // NOOP\n    };\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    drawutils.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.line = function (zA, zB, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + zB.x * this.scale.x, this.offset.y + zB.y * this.scale.y);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = lineWidth || 1;\n        this.ctx.stroke();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.arrow = function (zA, zB, color, lineWidth) {\n        var headlen = 8; // length of head in pixels\n        // var vertices = PlotBoilerplate.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        // var vertices : Array<Vertex> = Vertex.utils.buildArrowHead( zA, zB, headlen, this.scale.x, this.scale.y );\n        this.ctx.save();\n        this.ctx.beginPath();\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        this.ctx.moveTo(this.offset.x + zA.x * this.scale.x, this.offset.y + zA.y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x, this.offset.y + vertices[i].y);\n        }\n        this.ctx.lineTo(this.offset.x + vertices[0].x, this.offset.y + vertices[0].y);\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutils.prototype.image = function (image, position, size) {\n        if (!image.complete || !image.naturalWidth) {\n            // Avoid drawing un-unloaded or broken images\n            return;\n        }\n        this.ctx.save();\n        // Note that there is a Safari bug with the 3 or 5 params variant.\n        // Only the 9-param varaint works.\n        this.ctx.drawImage(image, 0, 0, image.naturalWidth - 1, // There is this horrible Safari bug (fixed in newer versions)\n        image.naturalHeight - 1, // To avoid errors substract 1 here.\n        this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y, size.x * this.scale.x, size.y * this.scale.y);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a rectangle.\n     *\n     * @param {Vertex} position - The upper left corner of the rectangle.\n     * @param {number} width - The width of the rectangle.\n     * @param {number} height - The height of the rectangle.\n     * @param {string} color - The color to use.\n     * @param {number=1} lineWidth - (optional) The line with to use (default is 1).\n     **/\n    drawutils.prototype.rect = function (position, width, height, color, lineWidth) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + position.x * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + position.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + (position.x + width) * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        this.ctx.lineTo(this.offset.x + position.x * this.scale.x, this.offset.y + (position.y + height) * this.scale.y);\n        // this.ctx.lineTo( this.offset.x+position.x*this.scale.x, this.offset.y+position.y*this.scale.y );\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    // TODO: convert this to a STATIC function.\n    drawutils.prototype._fillOrDraw = function (color) {\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fill();\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.stroke();\n        }\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n            return;\n        }\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        //this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (quadratic) bézier curve.\n     *\n     * @method quadraticBezier\n     * @param {Vertex} startPoint   - The start point of the cubic Bézier curve\n     * @param {Vertex} controlPoint - The control point the cubic Bézier curve.\n     * @param {Vertex} endPoint     - The end control point the cubic Bézier curve.\n     * @param {string} color        - The CSS color to draw the curve with.\n     * @param {number|string} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.quadraticBezier = function (startPoint, controlPoint, endPoint, color, lineWidth) {\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + startPoint.x * this.scale.x, this.offset.y + startPoint.y * this.scale.y);\n        this.ctx.quadraticCurveTo(this.offset.x + controlPoint.x * this.scale.x, this.offset.y + controlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        this.ctx.lineWidth = lineWidth || 2;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        if (!path || path.length == 0)\n            return;\n        // Draw curve\n        this.ctx.save();\n        this.ctx.beginPath();\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        this.ctx.moveTo(this.offset.x + path[0].x * this.scale.x, this.offset.y + path[0].y * this.scale.y);\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            this.ctx.bezierCurveTo(this.offset.x + startControlPoint.x * this.scale.x, this.offset.y + startControlPoint.y * this.scale.y, this.offset.x + endControlPoint.x * this.scale.x, this.offset.y + endControlPoint.y * this.scale.y, this.offset.x + endPoint.x * this.scale.x, this.offset.y + endPoint.y * this.scale.y);\n        }\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handle = function (startPoint, endPoint) {\n        // Draw handles\n        // (No need to save and restore here)\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.handleLine = function (startPoint, endPoint) {\n        // Draw handle lines\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.dot = function (p, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(Math.round(this.offset.x + this.scale.x * p.x), Math.round(this.offset.y + this.scale.y * p.y));\n        this.ctx.lineTo(Math.round(this.offset.x + this.scale.x * p.x + 1), Math.round(this.offset.y + this.scale.y * p.y + 1));\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.point = function (p, color) {\n        var radius = 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + p.x * this.scale.x, this.offset.y + p.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number} lineWidth - The line width (optional, default=1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circle = function (center, radius, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string=#000000} color - The CSS color to draw the circle with.\n     * @param {number=1} lineWidth - The line width to use\n     // * @param {boolean=false} options.asSegment - If `true` then no beginPath and no draw will be applied (as part of larger path).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth, options) {\n        if (!options || !options.asSegment) {\n            this.ctx.beginPath();\n        }\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius * this.scale.x, radius * this.scale.y, 0.0, startAngle, endAngle, false);\n        if (!options || !options.asSegment) {\n            // this.ctx.closePath();\n            this.ctx.lineWidth = lineWidth || 1;\n            this._fillOrDraw(color || '#000000');\n        }\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number} lineWidth=1 - An optional line width param (default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.ellipse(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radiusX * this.scale.x, radiusY * this.scale.y, 0.0, 0.0, Math.PI * 2);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number} lineWidth - The line with to use (optional, default is 1).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.square = function (center, size, color, lineWidth) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + (center.x - size / 2.0) * this.scale.x, this.offset.y + (center.y - size / 2.0) * this.scale.y, size * this.scale.x, size * this.scale.y);\n        this.ctx.closePath();\n        this.ctx.lineWidth = lineWidth || 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.beginPath();\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMin) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + yMax) * this.scale.y);\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX; // -Math.ceil((height*0.5)/sizeY)*sizeY;\n        var xMax = width / 2; // height/2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            this.ctx.moveTo(this.offset.x + (center.x + xMin) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n            this.ctx.lineTo(this.offset.x + (center.x + xMax) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x - 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x + 4, this.offset.y + (center.y + y) * this.scale.y);\n                this.ctx.moveTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y - 4);\n                this.ctx.lineTo(this.offset.x + (center.x + x) * this.scale.x, this.offset.y + (center.y + y) * this.scale.y + 4);\n            }\n        }\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 1.0;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.diamondHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - size / 2.0);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + size / 2.0, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + size / 2.0);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.squareHandle = function (center, size, color) {\n        this.ctx.beginPath();\n        this.ctx.rect(this.offset.x + center.x * this.scale.x - size / 2.0, this.offset.y + center.y * this.scale.y - size / 2.0, size, size);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent feature of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        this.ctx.beginPath();\n        this.ctx.arc(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y, radius, 0, 2 * Math.PI, false);\n        this.ctx.closePath();\n        this.ctx.lineWidth = 1;\n        this._fillOrDraw(color);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.crosshair = function (center, radius, color) {\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x - radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x + radius, this.offset.y + center.y * this.scale.y);\n        this.ctx.moveTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y - radius);\n        this.ctx.lineTo(this.offset.x + center.x * this.scale.x, this.offset.y + center.y * this.scale.y + radius);\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.5;\n        this.ctx.stroke();\n        this.ctx.closePath();\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon}  polygon - The polygon to draw.\n     * @param {string}   color - The CSS color to draw the polygon with.\n     * @param {string}   lineWidth - The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polygon = function (polygon, color, lineWidth) {\n        this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices   - The polygon vertices to draw.\n     * @param {boolan}   isOpen     - If true the polyline will not be closed at its end.\n     * @param {string}   color      - The CSS color to draw the polygon with.\n     * @param {number}   lineWidth  - The line width (default is 1.0);\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        if (vertices.length <= 1)\n            return;\n        this.ctx.save();\n        this.ctx.beginPath();\n        this.ctx.lineWidth = lineWidth || 1.0;\n        this.ctx.moveTo(this.offset.x + vertices[0].x * this.scale.x, this.offset.y + vertices[0].y * this.scale.y);\n        for (var i = 0; i < vertices.length; i++) {\n            this.ctx.lineTo(this.offset.x + vertices[i].x * this.scale.x, this.offset.y + vertices[i].y * this.scale.y);\n        }\n        if (!isOpen) // && vertices.length > 2 )\n            this.ctx.closePath();\n        this._fillOrDraw(color);\n        this.ctx.closePath();\n        this.ctx.setLineDash([]);\n        this.ctx.restore();\n    };\n    ;\n    drawutils.prototype.text = function (text, x, y, options) {\n        options = options || {};\n        this.ctx.save();\n        x = this.offset.x + x * this.scale.x;\n        y = this.offset.y + y * this.scale.y;\n        var color = options.color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillStyle = color;\n            this.ctx.fillText(text, x, y);\n        }\n        else {\n            this.ctx.strokeStyle = color;\n            this.ctx.strokeText(text, x, y);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * Note that these are absolute label positions, they are not affected by offset or scale.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians (default=0).\n     * @param {string=} color - The color to render the text with (default=black).\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutils.prototype.label = function (text, x, y, rotation, color) {\n        this.ctx.save();\n        this.ctx.translate(x, y);\n        if (typeof rotation != 'undefined')\n            this.ctx.rotate(rotation);\n        this.ctx.fillStyle = color || 'black';\n        if (this.fillShapes) {\n            this.ctx.fillText(text, 0, 0);\n        }\n        else {\n            this.ctx.strokeText(text, 0, 0);\n        }\n        this.ctx.restore();\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutils.prototype.clear = function (color) {\n        this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n        this.ctx.fillStyle = color;\n        this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    };\n    ;\n    return drawutils;\n}());\nexports.drawutils = drawutils;\n//# sourceMappingURL=draw.js.map","\"use strict\";\n/**\n * @author   Ikaros Kappler\n * @date     2019-09-18\n * @modified 2019-10-03 Added the beginDrawCycle hook.\n * @modified 2020-03-25 Ported stub to Typescript.\n * @modified 2020-10-15 Re-added the text() function.\n * @modified 2021-01-24 Added the `setCurrentId` function.\n * @version  0.0.5\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilsgl = void 0;\nvar Vertex_1 = require(\"./Vertex\");\n/**\n * @classdesc A wrapper class for basic drawing operations. This is the WebGL\n * implementation whih sould work with shaders.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires SVGSerializable\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilsgl = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutils\n     * @param {WebGLRenderingContext} context - The drawing context.\n     * @param {boolean} fillShaped - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     **/\n    function drawutilsgl(context, fillShapes) {\n        this.gl = context;\n        this.offset = new Vertex_1.Vertex(0, 0);\n        this.scale = new Vertex_1.Vertex(1, 1);\n        this.fillShapes = fillShapes;\n        this._zindex = 0.0;\n        if (context == null || typeof context === 'undefined')\n            return;\n        this.glutils = new GLU(context);\n        // PROBLEM: CANNOT USE MULTIPLE SHADER PROGRAM INSTANCES ON THE SAME CONTEXT!\n        // SOLUTION: USE SHARED SHADER PROGRAM!!! ... somehow ...\n        // This needs to be considered in the overlying component; both draw-instances need to\n        // share their gl context.\n        // That's what the copyInstace(boolean) method is good for.\n        this._vertShader = this.glutils.compileShader(drawutilsgl.vertCode, this.gl.VERTEX_SHADER);\n        this._fragShader = this.glutils.compileShader(drawutilsgl.fragCode, this.gl.FRAGMENT_SHADER);\n        this._program = this.glutils.makeProgram(this._vertShader, this._fragShader);\n        // Create an empty buffer object\n        this.vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        console.log('gl initialized');\n    }\n    ;\n    drawutilsgl.prototype._x2rel = function (x) { return (this.scale.x * x + this.offset.x) / this.gl.canvas.width * 2.0 - 1.0; };\n    ;\n    drawutilsgl.prototype._y2rel = function (y) { return (this.offset.y - this.scale.y * y) / this.gl.canvas.height * 2.0 - 1.0; };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilsgl.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilsgl(null, fillShapes);\n        copy.gl = this.gl;\n        copy.glutils = this.glutils;\n        copy._vertShader = this._vertShader;\n        copy._fragShader = this._fragShader;\n        copy._program = this._program;\n        return copy;\n    };\n    ;\n    /**\n     * Called before each draw cycle.\n     * @param {number} renderTime\n     **/\n    drawutilsgl.prototype.beginDrawCycle = function (renderTime) {\n        this._zindex = 0.0;\n        this.renderTime = renderTime;\n    };\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).es.\n     **/\n    drawutilsgl.prototype.setCurrentId = function (uid) {\n        // NOOP\n        this.curId = uid;\n    };\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     **/\n    drawutilsgl.prototype.setCurrentClassName = function (className) {\n        // NOOP\n    };\n    ;\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.line = function (zA, zB, color) {\n        var vertices = new Float32Array(6);\n        vertices[0] = this._x2rel(zA.x);\n        vertices[1] = this._y2rel(zA.y);\n        vertices[2] = this._zindex;\n        vertices[3] = this._x2rel(zB.x);\n        vertices[4] = this._y2rel(zB.y);\n        vertices[5] = this._zindex;\n        this._zindex += 0.001;\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        //this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        this.gl.lineWidth(5);\n        // Draw the line\n        this.gl.drawArrays(this.gl.LINES, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.arrow = function (zA, zB, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     **/\n    drawutilsgl.prototype.image = function (image, position, size) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    // +---------------------------------------------------------------------------------\n    // | This is the final helper function for drawing and filling stuff. It is not\n    // | intended to be used from the outside.\n    // |\n    // | When in draw mode it draws the current shape.\n    // | When in fill mode it fills the current shape.\n    // |\n    // | This function is usually only called internally.\n    // |\n    // | @param color A stroke/fill color to use.\n    // +-------------------------------\n    drawutilsgl.prototype._fillOrDraw = function (color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handle = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.handleLine = function (startPoint, endPoint) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.dot = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.point = function (p, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circle = function (center, radius, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.square = function (center, size, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.diamondHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.squareHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.circleHandle = function (center, size, color) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.crosshair = function (center, radius, color) {\n        // NOT YET IMPLEMENTED\t\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polygon = function (polygon, color, lineWidth) {\n        var vertices = new Float32Array(polygon.vertices.length * 3);\n        for (var i = 0; i < polygon.vertices.length; i++) {\n            vertices[i * 3 + 0] = this._x2rel(polygon.vertices[i].x);\n            vertices[i * 3 + 1] = this._y2rel(polygon.vertices[i].y);\n            vertices[i * 3 + 2] = this._zindex;\n        }\n        this._zindex += 0.001;\n        //console.log( vertices );\n        // Create an empty buffer object\n        // const vertex_buffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.vertex_buffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, vertices, this.gl.STATIC_DRAW);\n        // Bind vertex buffer object\n        // this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vertex_buffer);\n        // Get the attribute location\n        var coord = this.gl.getAttribLocation(this._program, \"position\");\n        // Point an attribute to the currently bound VBO\n        this.gl.vertexAttribPointer(coord, 3, this.gl.FLOAT, false, 0, 0);\n        // Enable the attribute\n        this.gl.enableVertexAttribArray(coord);\n        // Unbind the buffer?\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        // Set the view port\n        this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);\n        var uRotationVector = this.gl.getUniformLocation(this._program, \"uRotationVector\");\n        // let radians = currentAngle * Math.PI / 180.0;\n        var currentRotation = [0.0, 1.0];\n        //currentRotation[0] = Math.sin(radians);\n        //currentRotation[1] = Math.cos(radians);\n        this.gl.uniform2fv(uRotationVector, currentRotation);\n        // Draw the polygon\n        this.gl.drawArrays(this.gl.TRIANGLE_FAN, 0, vertices.length / 3);\n        // POINTS, LINE_STRIP, LINE_LOOP, LINES,\n        // TRIANGLE_STRIP,TRIANGLE_FAN, TRIANGLES\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=}  lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    drawutilsgl.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    drawutilsgl.prototype.text = function (text, x, y, options) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (aoptional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutils\n     */\n    // +---------------------------------------------------------------------------------\n    // | Draw a non-scaling text label at the given position.\n    // +-------------------------------\n    drawutilsgl.prototype.label = function (text, x, y, rotation) {\n        // NOT YET IMPLEMENTED\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     **/\n    drawutilsgl.prototype.clear = function (color) {\n        // NOT YET IMPLEMENTED\n        // if( typeof color == 'string' )\n        // color = Color.parse(color); // Color class does not yet exist in TS\n        // Clear the canvas\n        this.gl.clearColor(1.0, 1.0, 1.0, 1.0);\n        // Enable the depth test\n        this.gl.enable(this.gl.DEPTH_TEST);\n        // Clear the color and depth buffer\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    };\n    ;\n    // Vertex shader source code\n    drawutilsgl.vertCode = \"\\n    precision mediump float;\\n\\n    attribute vec3 position;\\n\\n    uniform vec2 uRotationVector;\\n\\n    void main(void) {\\n\\tvec2 rotatedPosition = vec2(\\n\\t    position.x * uRotationVector.y +\\n\\t\\tposition.y * uRotationVector.x,\\n\\t    position.y * uRotationVector.y -\\n\\t\\tposition.x * uRotationVector.x\\n\\t);\\n\\n\\tgl_Position = vec4(rotatedPosition, position.z, 1.0);\\n    }\";\n    // Fragment shader source code\n    drawutilsgl.fragCode = \"\\n    precision highp float;\\n\\n    void main(void) {\\n\\tgl_FragColor = vec4(0.0,0.75,1.0,1.0);\\n    }\";\n    return drawutilsgl;\n}());\nexports.drawutilsgl = drawutilsgl;\n/**\n * Some GL helper utils.\n **/\nvar GLU = /** @class */ (function () {\n    function GLU(gl) {\n        this.gl = gl;\n    }\n    ;\n    GLU.prototype.bufferData = function (verts) {\n        // Create an empty buffer object\n        var vbuffer = this.gl.createBuffer();\n        // Bind appropriate array buffer to it\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, vbuffer);\n        // Pass the vertex data to the buffer\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, verts, this.gl.STATIC_DRAW);\n        // Unbind the buffer\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n        return vbuffer;\n    };\n    ;\n    /*=================== Shaders ====================*/\n    GLU.prototype.compileShader = function (shaderCode, shaderType) {\n        // Create a vertex shader object\n        var shader = this.gl.createShader(shaderType);\n        // Attach vertex shader source code\n        this.gl.shaderSource(shader, shaderCode);\n        // Compile the vertex shader\n        this.gl.compileShader(shader);\n        var vertStatus = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n        if (!vertStatus) {\n            console.warn(\"Error in shader:\" + this.gl.getShaderInfoLog(shader));\n            this.gl.deleteShader(shader);\n            return null;\n        }\n        return shader;\n    };\n    ;\n    GLU.prototype.makeProgram = function (vertShader, fragShader) {\n        // Create a shader program object to store\n        // the combined shader program\n        var program = this.gl.createProgram();\n        // Attach a vertex shader\n        this.gl.attachShader(program, vertShader);\n        // Attach a fragment shader\n        this.gl.attachShader(program, fragShader);\n        // Link both the programs\n        this.gl.linkProgram(program);\n        // Use the combined shader program object\n        this.gl.useProgram(program);\n        /*======= Do some cleanup ======*/\n        this.gl.detachShader(program, vertShader);\n        this.gl.detachShader(program, fragShader);\n        this.gl.deleteShader(vertShader);\n        this.gl.deleteShader(fragShader);\n        return program;\n    };\n    ;\n    return GLU;\n}());\n//# sourceMappingURL=drawgl.js.map","\"use strict\";\n/**\n * @author  Ikaros Kappler\n * @date    2019-02-03\n * @version 1.0.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.geomutils = void 0;\nvar Line_1 = require(\"./Line\");\nvar Triangle_1 = require(\"./Triangle\");\n/**\n * A collection of usefull geometry utilities.\n *\n * @global\n **/\nexports.geomutils = {\n    /**\n     * Compute the n-section of the angle – described as a triangle (A,B,C) – in point A.\n     *\n     * @param {Vertex} pA - The first triangle point.\n     * @param {Vertex} pB - The second triangle point.\n     * @param {Vertex} pC - The third triangle point.\n     * @param {number} n - The number of desired angle sections (example: 2 means the angle will be divided into two sections,\n     *                      means an returned array with length 1, the middle line).\n     *\n     * @return {Line[]} An array of n-1 lines secting the given angle in point A into n equal sized angle sections. The lines' first vertex is A.\n     */\n    nsectAngle: function (pA, pB, pC, n) {\n        var triangle = new Triangle_1.Triangle(pA, pB, pC);\n        var lineAB = new Line_1.Line(pA, pB);\n        var lineAC = new Line_1.Line(pA, pC);\n        // Compute the difference; this is the angle between AB and AC\n        var insideAngle = lineAB.angle(lineAC);\n        // We want the inner angles of the triangle, not the outer angle;\n        //   which one is which depends on the triangle 'direction'\n        var clockwise = triangle.determinant() > 0;\n        // For convenience convert the angle [-PI,PI] to [0,2*PI]\n        if (insideAngle < 0)\n            insideAngle = 2 * Math.PI + insideAngle;\n        if (!clockwise)\n            insideAngle = (2 * Math.PI - insideAngle) * (-1);\n        // Scale the rotated lines to the max leg length (looks better)\n        var lineLength = Math.max(lineAB.length(), lineAC.length());\n        var scaleFactor = lineLength / lineAB.length();\n        var result = [];\n        for (var i = 1; i < n; i++) {\n            // Compute the i-th inner sector line\n            result.push(new Line_1.Line(pA, pB.clone().rotate((-i * (insideAngle / n)), pA)).scale(scaleFactor));\n        }\n        return result;\n    }\n};\n//# sourceMappingURL=geomutils.js.map","\"use strict\";\n/**\n * Draws elements into an SVG node.\n *\n * @author   Ikaros Kappler\n * @date     2021-01-03\n * @modified 2021-01-24 Fixed the `fillShapes` attribute in the copyInstance function.\n * @modified 2021-01-26 Changed the `isPrimary` (default true) attribute to `isSecondary` (default false).\n * @modified 2021-02-03 Added the static `createSvg` function.\n * @modified 2021-02-03 Fixed the currentId='background' bug on the clear() function.\n * @modified 2021-02-03 Fixed CSSProperty `stroke-width` (was line-width before, which is wrong).\n * @modified 2021-02-03 Added the static `HEAD_XML` attribute.\n * @version  1.0.0\n **/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.drawutilssvg = void 0;\nvar CircleSector_1 = require(\"../../CircleSector\");\nvar CubicBezierCurve_1 = require(\"../../CubicBezierCurve\");\nvar Vertex_1 = require(\"../../Vertex\");\n/**\n * @classdesc A helper class for basic SVG drawing operations. This class should\n * be compatible to the default 'draw' class.\n *\n * @requires CubicBzierCurvce\n * @requires Polygon\n * @requires Vertex\n * @requires XYCoords\n */\nvar drawutilssvg = /** @class */ (function () {\n    /**\n     * The constructor.\n     *\n     * @constructor\n     * @name drawutilssvg\n     * @param {SVGElement} svgNode - The SVG node to use.\n     * @param {XYCoords} offset - The draw offset to use.\n     * @param {XYCoords} scale - The scale factors to use.\n     * @param {XYDimension} canvasSize - The initial canvas size (use setSize to change).\n     * @param {boolean} fillShapes - Indicates if the constructed drawutils should fill all drawn shapes (if possible).\n     * @param {DrawConfig} drawConfig - The default draw config to use for CSS fallback styles.\n     * @param {boolean=} isSecondary - (optional) Indicates if this is the primary or secondary instance. Only primary instances manage child nodes.\n     * @param {SVGElement=} gNode - (optional) Primary and seconday instances share the same &lt;g> node.\n     **/\n    function drawutilssvg(svgNode, offset, scale, canvasSize, fillShapes, drawConfig, isSecondary, gNode) {\n        this.svgNode = svgNode;\n        this.offset = new Vertex_1.Vertex(0, 0).set(offset);\n        this.scale = new Vertex_1.Vertex(1, 1).set(scale);\n        this.fillShapes = fillShapes;\n        this.isSecondary = isSecondary;\n        this.cache = new Map();\n        this.setSize(canvasSize);\n        if (isSecondary) {\n            this.gNode = gNode;\n        }\n        else {\n            this.addStyleDefs(drawConfig);\n            this.gNode = this.createSVGNode('g');\n            this.svgNode.appendChild(this.gNode);\n        }\n    }\n    ;\n    drawutilssvg.prototype.addStyleDefs = function (drawConfig) {\n        var nodeStyle = this.createSVGNode('style');\n        this.svgNode.appendChild(nodeStyle); // nodeDef);\n        // Which default styles to add? -> All from the DrawConfig.\n        // Compare with DrawConfig interface\n        var keys = {\n            'polygon': 'Polygon',\n            'triangle': 'Triangle',\n            'ellipse': 'Ellipse',\n            'circle': 'Circle',\n            'circleSector': 'CircleSector',\n            'vertex': 'Vertex',\n            'line': 'Line',\n            'vector': 'Vector',\n            'image': 'Image'\n        };\n        // Question: why isn't this working if the svgNode is created dynamically? (nodeStyle.sheet is null)\n        var rules = [];\n        for (var k in keys) {\n            var className = keys[k];\n            var drawSettings = drawConfig[k];\n            rules.push(\".\" + className + \" { fill : none; stroke: \" + drawSettings.color + \"; stroke-width: \" + drawSettings.lineWidth + \"px }\");\n        }\n        nodeStyle.innerHTML = rules.join(\"\\n\");\n    };\n    ;\n    /**\n     * Retieve an old (cached) element.\n     * Only if both – key and nodeName – match, the element will be returned (null otherwise).\n     *\n     * @method findElement\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {UID} key - The key of the desired element (used when re-drawing).\n     * @param {string} nodeName - The expected node name.\n     */\n    drawutilssvg.prototype.findElement = function (key, nodeName) {\n        var node = this.cache.get(key);\n        if (node && node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            this.cache.delete(key);\n            return node;\n        }\n        return null;\n    };\n    /**\n     * Create a new DOM node &lt;svg&gt; in the SVG namespace.\n     *\n     * @method createSVGNode\n     * @private\n     * @memberof drawutilssvg\n     * @instance\n     * @param {string} nodeName - The node name (tag-name).\n     * @return {SVGElement} A new element in the SVG namespace with the given node name.\n     */\n    drawutilssvg.prototype.createSVGNode = function (nodeName) {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", nodeName);\n    };\n    ;\n    /**\n     * Make a new SVG node (or recycle an old one) with the given node name (circle, path, line, rect, ...).\n     *\n     * This function is used in draw cycles to re-use old DOM nodes (in hope to boost performance).\n     *\n     * @method makeNode\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {string} nodeName - The node name.\n     * @return {SVGElement} The new node, which is not yet added to any document.\n     */\n    drawutilssvg.prototype.makeNode = function (nodeName) {\n        // Try to find node in current DOM cache.\n        // Unique node keys are strictly necessary.\n        // Try to recycle an old element from cache.\n        var node = this.findElement(this.curId, nodeName);\n        if (!node) {\n            // If no such old elements exists (key not found, tag name not matching),\n            // then create a new one.\n            node = this.createSVGNode(nodeName);\n        }\n        return node;\n    };\n    ;\n    /**\n     * This is the final helper function for drawing and filling stuff and binding new\n     * nodes to the SVG document.\n     * It is not intended to be used from the outside.\n     *\n     * When in draw mode it draws the current shape.\n     * When in fill mode it fills the current shape.\n     *\n     * This function is usually only called internally.\n     *\n     * @method _bindFillDraw\n     * @private\n     * @instance\n     * @memberof drawutilssvg\n     * @param {SVGElement} node - The node to draw/fill and bind.\n     * @param {string} className - The class name(s) to use.\n     * @param {string} color - A stroke/fill color to use.\n     * @param {number=1} lineWidth - (optional) A line width to use for drawing (default is 1).\n     * @return {SVGElement} The node itself (for chaining).\n     */\n    drawutilssvg.prototype._bindFillDraw = function (node, className, color, lineWidth) {\n        if (this.curClassName) {\n            node.setAttribute('class', this.curClassName + \" \" + className);\n        }\n        else {\n            node.setAttribute('class', className);\n        }\n        node.setAttribute('fill', this.fillShapes ? color : 'none');\n        node.setAttribute('stroke', this.fillShapes ? 'none' : color);\n        node.setAttribute('stroke-width', \"\" + (lineWidth || 1));\n        if (this.curId) {\n            node.setAttribute('id', \"\" + this.curId); // Maybe React-style 'key' would be better?\n        }\n        if (!node.parentNode) {\n            // Attach to DOM only if not already attached\n            this.gNode.appendChild(node);\n        }\n        return node;\n    };\n    ;\n    /**\n     * Sets the size and view box of the document. Call this if canvas size changes.\n     *\n     * @method setSize\n     * @instance\n     * @memberof drawutilssvg\n     * @param {XYDimension} canvasSize - The new canvas size.\n     */\n    drawutilssvg.prototype.setSize = function (canvasSize) {\n        this.canvasSize = canvasSize;\n        this.svgNode.setAttribute('viewBox', \"0 0 \" + this.canvasSize.width + \" \" + this.canvasSize.height);\n        this.svgNode.setAttribute('width', \"\" + this.canvasSize.width);\n        this.svgNode.setAttribute('height', \"\" + this.canvasSize.height);\n    };\n    ;\n    /**\n     * Creates a 'shallow' (non deep) copy of this instance. This implies\n     * that under the hood the same gl context and gl program will be used.\n     */\n    drawutilssvg.prototype.copyInstance = function (fillShapes) {\n        var copy = new drawutilssvg(this.svgNode, this.offset, this.scale, this.canvasSize, fillShapes, null, // no DrawConfig\n        true, // isSecondary\n        this.gNode);\n        return copy;\n    };\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * It is used by some libraries for identifying elemente on re-renders.\n     *\n     * @name setCurrentId\n     * @method\n     * @param {UID} uid - A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentId = function (uid) {\n        this.curId = uid;\n    };\n    ;\n    /**\n     * This method shouled be called each time the currently drawn `Drawable` changes.\n     * Determine the class name for further usage here.\n     *\n     * @name setCurrentClassName\n     * @method\n     * @param {string} className - A class name for further custom use cases.\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.setCurrentClassName = function (className) {\n        this.curClassName = className;\n    };\n    ;\n    /**\n     * Called before each draw cycle.\n     * This is required for compatibility with other draw classes in the library.\n     *\n     * @name beginDrawCycle\n     * @method\n     * @param {UID=} uid - (optional) A UID identifying the currently drawn element(s).\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.beginDrawCycle = function (renderTime) {\n        // Clear non-recycable elements from last draw cycle.\n        this.cache.clear();\n    };\n    ;\n    drawutilssvg.prototype._x = function (x) { return this.offset.x + this.scale.x * x; };\n    drawutilssvg.prototype._y = function (y) { return this.offset.y + this.scale.y * y; };\n    /**\n     * Draw the line between the given two points with the specified (CSS-) color.\n     *\n     * @method line\n     * @param {Vertex} zA - The start point of the line.\n     * @param {Vertex} zB - The end point of the line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=1} lineWidth? - [optional] The line's width.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.line = function (zA, zB, color, lineWidth) {\n        var line = this.makeNode('line');\n        line.setAttribute('x1', \"\" + this._x(zA.x));\n        line.setAttribute('y1', \"\" + this._y(zA.y));\n        line.setAttribute('x2', \"\" + this._x(zB.x));\n        line.setAttribute('y2', \"\" + this._y(zB.y));\n        return this._bindFillDraw(line, 'line', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method arrow\n     * @param {Vertex} zA - The start point of the arrow-line.\n     * @param {Vertex} zB - The end point of the arrow-line.\n     * @param {string} color - Any valid CSS color string.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.arrow = function (zA, zB, color, lineWidth) {\n        var node = this.makeNode('path');\n        var headlen = 8; // length of head in pixels\n        var vertices = Vertex_1.Vertex.utils.buildArrowHead(zA, zB, headlen, this.scale.x, this.scale.y);\n        var d = [\n            'M', this._x(zA.x), this._y(zA.y)\n        ];\n        for (var i = 0; i <= vertices.length; i++) {\n            d.push('L');\n            // Note: only use offset here (the vertices are already scaled)\n            d.push(this.offset.x + vertices[i % vertices.length].x);\n            d.push(this.offset.y + vertices[i % vertices.length].y);\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'arrow', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw an image at the given position with the given size.<br>\n     * <br>\n     * Note: SVG images may have resizing issues at the moment.Draw a line and an arrow at the end (zB) of the given line with the specified (CSS-) color.\n     *\n     * @method image\n     * @param {Image} image - The image object to draw.\n     * @param {Vertex} position - The position to draw the the upper left corner at.\n     * @param {Vertex} size - The x/y-size to draw the image with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.image = function (image, position, size) {\n        var _this = this;\n        var node = this.makeNode('image');\n        // We need to re-adjust the image if it was not yet fully loaded before.\n        var setImageSize = function (image) {\n            if (image.naturalWidth) {\n                var ratioX = size.x / image.naturalWidth;\n                var ratioY = size.y / image.naturalHeight;\n                node.setAttribute('width', \"\" + image.naturalWidth * _this.scale.x);\n                node.setAttribute('height', \"\" + image.naturalHeight * _this.scale.y);\n                node.setAttribute('display', null); // Dislay when loaded\n                node.setAttribute('transform', \"translate(\" + _this._x(position.x) + \" \" + _this._y(position.y) + \") scale(\" + (ratioX) + \" \" + (ratioY) + \")\");\n            }\n        };\n        image.addEventListener('load', function (event) { setImageSize(image); });\n        // Safari has a transform-origin bug.\n        // Use x=0, y=0 and translate/scale instead (see above)\n        node.setAttribute('x', \"\" + 0);\n        node.setAttribute('y', \"\" + 0);\n        node.setAttribute('display', 'none'); // Hide before loaded\n        setImageSize(image);\n        node.setAttribute('href', image.src);\n        return this._bindFillDraw(node, 'image', null, null);\n    };\n    ;\n    /**\n     * Draw the given (cubic) bézier curve.\n     *\n     * @method cubicBezier\n     * @param {Vertex} startPoint - The start point of the cubic Bézier curve\n     * @param {Vertex} endPoint   - The end point the cubic Bézier curve.\n     * @param {Vertex} startControlPoint - The start control point the cubic Bézier curve.\n     * @param {Vertex} endControlPoint   - The end control point the cubic Bézier curve.\n     * @param {string} color - The CSS color to draw the curve with.\n     * @param {number} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezier = function (startPoint, endPoint, startControlPoint, endControlPoint, color, lineWidth) {\n        if (startPoint instanceof CubicBezierCurve_1.CubicBezierCurve) {\n            return this.cubicBezier(startPoint.startPoint, startPoint.endPoint, startPoint.startControlPoint, startPoint.endControlPoint, color, lineWidth);\n        }\n        var node = this.makeNode('path');\n        // Draw curve\n        var d = [\n            'M', this._x(startPoint.x), this._y(startPoint.y),\n            'C', this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y)\n        ];\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'cubierBezier', color, lineWidth);\n    };\n    ;\n    /**\n     * Draw the given (cubic) Bézier path.\n     *\n     * The given path must be an array with n*3+1 vertices, where n is the number of\n     * curves in the path:\n     * <pre> [ point1, point1_startControl, point2_endControl, point2, point2_startControl, point3_endControl, point3, ... pointN_endControl, pointN ]</pre>\n     *\n     * @method cubicBezierPath\n     * @param {Vertex[]} path - The cubic bezier path as described above.\n     * @param {string} color - The CSS colot to draw the path with.\n     * @param {number=1} lineWidth - (optional) The line width to use.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.cubicBezierPath = function (path, color, lineWidth) {\n        var node = this.makeNode('path');\n        if (!path || path.length == 0)\n            return node;\n        // Draw curve\n        var d = [\n            'M', this._x(path[0].x), this._y(path[0].y)\n        ];\n        // Draw curve path\n        var endPoint;\n        var startControlPoint;\n        var endControlPoint;\n        for (var i = 1; i < path.length; i += 3) {\n            startControlPoint = path[i];\n            endControlPoint = path[i + 1];\n            endPoint = path[i + 2];\n            d.push('C', this._x(startControlPoint.x), this._y(startControlPoint.y), this._x(endControlPoint.x), this._y(endControlPoint.y), this._x(endPoint.x), this._y(endPoint.y));\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'cubicBezierPath', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw the given handle and handle point (used to draw interactive Bézier curves).\n     *\n     * The colors for this are fixed and cannot be specified.\n     *\n     * @method handle\n     * @param {Vertex} startPoint - The start of the handle.\n     * @param {Vertex} endPoint - The end point of the handle.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handle = function (startPoint, endPoint) {\n        // TODO: redefine methods like these into an abstract class?\n        this.point(startPoint, 'rgb(0,32,192)');\n        this.square(endPoint, 5, 'rgba(0,128,192,0.5)');\n    };\n    ;\n    /**\n     * Draw a handle line (with a light grey).\n     *\n     * @method handleLine\n     * @param {Vertex} startPoint - The start point to draw the handle at.\n     * @param {Vertex} endPoint - The end point to draw the handle at.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.handleLine = function (startPoint, endPoint) {\n        this.line(startPoint, endPoint, 'rgb(192,192,192)');\n    };\n    ;\n    /**\n     * Draw a 1x1 dot with the specified (CSS-) color.\n     *\n     * @method dot\n     * @param {Vertex} p - The position to draw the dot at.\n     * @param {string} color - The CSS color to draw the dot with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.dot = function (p, color) {\n        var node = this.makeNode('line');\n        return this._bindFillDraw(node, 'dot', color, 1);\n    };\n    ;\n    /**\n     * Draw the given point with the specified (CSS-) color and radius 3.\n     *\n     * @method point\n     * @param {Vertex} p - The position to draw the point at.\n     * @param {string} color - The CSS color to draw the point with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.point = function (p, color) {\n        var radius = 3;\n        var node = this.makeNode('circle');\n        node.setAttribute('cx', \"\" + this._x(p.x));\n        node.setAttribute('cy', \"\" + this._y(p.y));\n        node.setAttribute('r', \"\" + radius);\n        return this._bindFillDraw(node, 'point', color, 1);\n    };\n    ;\n    /**\n     * Draw a circle with the specified (CSS-) color and radius.<br>\n     * <br>\n     * Note that if the x- and y- scales are different the result will be an ellipse rather than a circle.\n     *\n     * @method circle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circle = function (center, radius, color, lineWidth) {\n        var node = this.makeNode('circle');\n        node.setAttribute('cx', \"\" + this._x(center.x));\n        node.setAttribute('cy', \"\" + this._y(center.y));\n        node.setAttribute('r', \"\" + radius * this.scale.x); // y?\n        return this._bindFillDraw(node, 'circle', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw a circular arc (section of a circle) with the given CSS color.\n     *\n     * @method circleArc\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {number} startAngle - The angle to start at.\n     * @param {number} endAngle - The angle to end at.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleArc = function (center, radius, startAngle, endAngle, color, lineWidth) {\n        var node = this.makeNode('path');\n        var arcData = CircleSector_1.CircleSector.circleSectorUtils.describeSVGArc(this._x(center.x), this._y(center.y), radius * this.scale.x, // y?\n        startAngle, endAngle);\n        node.setAttribute('d', arcData.join(' '));\n        return this._bindFillDraw(node, 'circleArc', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw an ellipse with the specified (CSS-) color and thw two radii.\n     *\n     * @method ellipse\n     * @param {Vertex} center - The center of the ellipse.\n     * @param {number} radiusX - The radius of the ellipse.\n     * @param {number} radiusY - The radius of the ellipse.\n     * @param {string} color - The CSS color to draw the ellipse with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.ellipse = function (center, radiusX, radiusY, color, lineWidth) {\n        var node = this.makeNode('ellipse');\n        node.setAttribute('cx', \"\" + this._x(center.x));\n        node.setAttribute('cy', \"\" + this._y(center.y));\n        node.setAttribute('rx', \"\" + radiusX * this.scale.x);\n        node.setAttribute('ry', \"\" + radiusY * this.scale.y);\n        return this._bindFillDraw(node, 'ellipse', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw square at the given center, size and with the specified (CSS-) color.<br>\n     * <br>\n     * Note that if the x-scale and the y-scale are different the result will be a rectangle rather than a square.\n     *\n     * @method square\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.square = function (center, size, color, lineWidth) {\n        var node = this.makeNode('rectangle');\n        node.setAttribute('x', \"\" + this._x(center.x - size / 2.0));\n        node.setAttribute('y', \"\" + this._y(center.y - size / 2.0));\n        node.setAttribute('width', \"\" + size * this.scale.x);\n        node.setAttribute('height', \"\" + size * this.scale.y);\n        return this._bindFillDraw(node, 'square', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw a grid of horizontal and vertical lines with the given (CSS-) color.\n     *\n     * @method grid\n     * @param {Vertex} center - The center of the grid.\n     * @param {number} width - The total width of the grid (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the grid (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal grid size.\n     * @param {number} sizeY - The vertical grid size.\n     * @param {string} color - The CSS color to draw the grid with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.grid = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode('path');\n        var d = [];\n        var yMin = -Math.ceil((height * 0.5) / sizeY) * sizeY;\n        var yMax = height / 2;\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            d.push('M', this._x(center.x + x), this._y(center.y + yMin));\n            d.push('L', this._x(center.x + x), this._y(center.y + yMax));\n        }\n        var xMin = -Math.ceil((width * 0.5) / sizeX) * sizeX;\n        var xMax = width / 2;\n        for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n            d.push('M', this._x(center.x + xMin), this._y(center.y + y));\n            d.push('L', this._x(center.x + xMax), this._y(center.y + y));\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'grid', color, 1);\n    };\n    ;\n    /**\n     * Draw a raster of crosshairs in the given grid.<br>\n     *\n     * This works analogue to the grid() function\n     *\n     * @method raster\n     * @param {Vertex} center - The center of the raster.\n     * @param {number} width - The total width of the raster (width/2 each to the left and to the right).\n     * @param {number} height - The total height of the raster (height/2 each to the top and to the bottom).\n     * @param {number} sizeX - The horizontal raster size.\n     * @param {number} sizeY - The vertical raster size.\n     * @param {string} color - The CSS color to draw the raster with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.raster = function (center, width, height, sizeX, sizeY, color) {\n        var node = this.makeNode('path');\n        var d = [];\n        for (var x = -Math.ceil((width * 0.5) / sizeX) * sizeX; x < width / 2; x += sizeX) {\n            for (var y = -Math.ceil((height * 0.5) / sizeY) * sizeY; y < height / 2; y += sizeY) {\n                // Draw a crosshair\n                d.push('M', this._x(center.x + x) - 4, this._y(center.y + y));\n                d.push('L', this._x(center.x + x) + 4, this._y(center.y + y));\n                d.push('M', this._x(center.x + x), this._y(center.y + y) - 4);\n                d.push('L', this._x(center.x + x), this._y(center.y + y) + 4);\n            }\n        }\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'raster', color, 1);\n    };\n    ;\n    /**\n     * Draw a diamond handle (square rotated by 45°) with the given CSS color.\n     *\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped diamonds.\n     *\n     * @method diamondHandle\n     * @param {Vertex} center - The center of the diamond.\n     * @param {Vertex} size - The x/y-size of the diamond.\n     * @param {string} color - The CSS color to draw the diamond with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.diamondHandle = function (center, size, color) {\n        var node = this.makeNode('path');\n        var d = [\n            'M', this._x(center.x) - size / 2.0, this._y(center.y),\n            'L', this._x(center.x), this._y(center.y) - size / 2.0,\n            'L', this._x(center.x) + size / 2.0, this._y(center.y),\n            'L', this._x(center.x), this._y(center.y) + size / 2.0,\n            'Z'\n        ];\n        ;\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'diamondHandle', color, 1);\n    };\n    ;\n    /**\n     * Draw a square handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped squares.\n     *\n     * @method squareHandle\n     * @param {Vertex} center - The center of the square.\n     * @param {Vertex} size - The x/y-size of the square.\n     * @param {string} color - The CSS color to draw the square with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.squareHandle = function (center, size, color) {\n        var node = this.makeNode('rect');\n        node.setAttribute('x', \"\" + (this._x(center.x) - size / 2.0));\n        node.setAttribute('y', \"\" + (this._y(center.y) - size / 2.0));\n        node.setAttribute('width', \"\" + size);\n        node.setAttribute('height', \"\" + size);\n        return this._bindFillDraw(node, 'squareHandle', color, 1);\n    };\n    ;\n    /**\n     * Draw a circle handle with the given CSS color.<br>\n     * <br>\n     * It is an inherent featur of the handle functions that the drawn elements are not scaled and not\n     * distorted. So even if the user zooms in or changes the aspect ratio, the handles will be drawn\n     * as even shaped circles.\n     *\n     * @method circleHandle\n     * @param {Vertex} center - The center of the circle.\n     * @param {number} radius - The radius of the circle.\n     * @param {string} color - The CSS color to draw the circle with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.circleHandle = function (center, radius, color) {\n        radius = radius || 3;\n        var node = this.makeNode('circle');\n        node.setAttribute('cx', \"\" + this._x(center.x));\n        node.setAttribute('cy', \"\" + this._y(center.y));\n        node.setAttribute('r', \"\" + radius);\n        return this._bindFillDraw(node, 'circleHandle', color, 1);\n    };\n    ;\n    /**\n     * Draw a crosshair with given radius and color at the given position.<br>\n     * <br>\n     * Note that the crosshair radius will not be affected by scaling.\n     *\n     * @method crosshair\n     * @param {XYCoords} center - The center of the crosshair.\n     * @param {number} radius - The radius of the crosshair.\n     * @param {string} color - The CSS color to draw the crosshair with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.crosshair = function (center, radius, color) {\n        var node = this.makeNode('path');\n        var d = [\n            'M', this._x(center.x) - radius, this._y(center.y),\n            'L', this._x(center.x) + radius, this._y(center.y),\n            'M', this._x(center.x), this._y(center.y) - radius,\n            'L', this._x(center.x), this._y(center.y) + radius\n        ];\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'crosshair', color, 0.5);\n    };\n    ;\n    /**\n     * Draw a polygon.\n     *\n     * @method polygon\n     * @param {Polygon} polygon - The polygon to draw.\n     * @param {string} color - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polygon = function (polygon, color, lineWidth) {\n        return this.polyline(polygon.vertices, polygon.isOpen, color, lineWidth);\n    };\n    ;\n    /**\n     * Draw a polygon line (alternative function to the polygon).\n     *\n     * @method polyline\n     * @param {Vertex[]} vertices - The polygon vertices to draw.\n     * @param {boolan}   isOpen   - If true the polyline will not be closed at its end.\n     * @param {string}   color    - The CSS color to draw the polygon with.\n     * @param {number=} lineWidth - (optional) The line width to use; default is 1.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.polyline = function (vertices, isOpen, color, lineWidth) {\n        var node = this.makeNode('path');\n        if (vertices.length == 0)\n            return node;\n        // Draw curve\n        var d = [\n            'M', this._x(vertices[0].x), this._y(vertices[0].y)\n        ];\n        var n = vertices.length;\n        for (var i = 1; i < n; i++) {\n            d.push('L', this._x(vertices[i].x), this._y(vertices[i].y));\n        }\n        if (!isOpen)\n            d.push('Z');\n        node.setAttribute('d', d.join(' '));\n        return this._bindFillDraw(node, 'polyline', color, lineWidth || 1);\n    };\n    ;\n    /**\n     * Draw a text label at the given relative position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.text = function (text, x, y, options) {\n        options = options || {};\n        var color = options.color || 'black';\n        var node = this.makeNode('text');\n        node.setAttribute('x', \"\" + this._x(x));\n        node.setAttribute('y', \"\" + this._x(y));\n        node.innerHTML = text;\n        return this._bindFillDraw(node, 'text', color, 1);\n    };\n    ;\n    /**\n     * Draw a non-scaling text label at the given position.\n     *\n     * @method label\n     * @param {string} text - The text to draw.\n     * @param {number} x - The x-position to draw the text at.\n     * @param {number} y - The y-position to draw the text at.\n     * @param {number=} rotation - The (optional) rotation in radians.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     */\n    drawutilssvg.prototype.label = function (text, x, y, rotation) {\n        var node = this.makeNode('text');\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        node.setAttribute('transform', \"translate(\" + this.offset.x + \",\" + this.offset.y + \"), rotate(\" + rotation / Math.PI * 180 + \")\");\n        node.innerHTML = text;\n        return this._bindFillDraw(node, 'label', 'black', null);\n    };\n    ;\n    /**\n     * Due to gl compatibility there is a generic 'clear' function required\n     * to avoid accessing the context object itself directly.\n     *\n     * This function just fills the whole canvas with a single color.\n     *\n     * @param {string} color - The color to clear with.\n     * @return {void}\n     * @instance\n     * @memberof drawutilssvg\n     **/\n    drawutilssvg.prototype.clear = function (color) {\n        // If this isn't the primary handler then do not remove anything here.\n        // The primary handler will do that (no double work).\n        if (this.isSecondary) {\n            return;\n        }\n        // Clearing an SVG is equivalent to removing all its child elements.\n        for (var i = 0; i < this.gNode.childNodes.length; i++) {\n            // Hide all nodes here. Don't throw them away.\n            // We can probably re-use them in the next draw cycle.\n            var child = this.gNode.childNodes[i];\n            this.cache.set(child.getAttribute('id'), child);\n        }\n        this.removeAllChildNodes();\n        // Add a covering rect with the given background color\n        this.curId = 'background';\n        var node = this.makeNode('rect');\n        // For some strange reason SVG rotation transforms use degrees instead of radians\n        // Note that the background does not scale with the zoom level (always covers full element)\n        node.setAttribute('x', '0');\n        node.setAttribute('y', '0');\n        node.setAttribute('width', \"\" + this.canvasSize.width);\n        node.setAttribute('height', \"\" + this.canvasSize.height);\n        // Bind this special element into the document\n        this._bindFillDraw(node, this.curId, null, null);\n        node.setAttribute('fill', typeof color === \"undefined\" ? 'none' : color);\n        // Clear the current ID again\n        this.curId = undefined;\n        // return node;\n    };\n    ;\n    /**\n     * A private helper function to clear all SVG nodes from the &gt;g> node.\n     *\n     * @private\n     */\n    drawutilssvg.prototype.removeAllChildNodes = function () {\n        while (this.gNode.lastChild) {\n            this.gNode.removeChild(this.gNode.lastChild);\n        }\n    };\n    ;\n    /**\n     * Create a new and empty `SVGElement` &lt;svg&gt; in the svg-namespace.\n     *\n     * @name createSvg\n     * @static\n     * @memberof drawutilssvg\n     * @return SVGElement\n     */\n    drawutilssvg.createSvg = function () {\n        return document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n    };\n    ;\n    drawutilssvg.HEAD_XML = [\n        '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>',\n        '<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.0//EN\" ',\n        '         \"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd\">',\n        ''\n    ].join(\"\\n\");\n    return drawutilssvg;\n}());\nexports.drawutilssvg = drawutilssvg;\n//# sourceMappingURL=drawutilssvg.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\n/* Imports for webpack */\n\n// import path from \"path\";\n// import AlloyFinger, { TouchMoveEvent, TouchPinchEvent } from \"alloyfinger-typescript/src/js/index\";\n\nglobalThis.UIDGenerator = require(\"./UIDGenerator.js\").geomutils;\nglobalThis.VertexAttr = require(\"./VertexAttr.js\").VertexAttr;\nglobalThis.VertexListeners = require(\"./VertexListeners.js\").VertexListeners;\nglobalThis.Vertex = require(\"./Vertex.js\").Vertex;\n\nglobalThis.Bounds = require(\"./Bounds.js\").Bounds;\nglobalThis.Grid = require(\"./Grid.js\").Grid;\nglobalThis.Line = require(\"./Line.js\").Line;\nglobalThis.Vector = require(\"./Vector.js\").Vector;\nglobalThis.CubicBezierCurve = require(\"./CubicBezierCurve.js\").CubicBezierCurve;\nglobalThis.BezierPath = require(\"./BezierPath.js\").BezierPath;\nglobalThis.Polygon = require(\"./Polygon.js\").Polygon;\nglobalThis.Triangle = require(\"./Triangle.js\").Triangle;\nglobalThis.VEllipse = require(\"./VEllipse.js\").VEllipse;\nglobalThis.Circle = require(\"./Circle.js\").Circle;\nglobalThis.CircleSector = require(\"./CircleSector.js\").CircleSector;\nglobalThis.PBImage = require(\"./PBImage.js\").PBImage;\nglobalThis.MouseHandler = require(\"./MouseHandler.js\").MouseHandler;\nglobalThis.KeyHandler = require(\"./KeyHandler.js\").KeyHandler;\nglobalThis.drawutils = require(\"./draw.js\").drawutils;\n// globalThis.drawutilsgl = require(\"./drawgl.js\").drawutilsgl;\n// globalThis.drawutilsgl = {};\nglobalThis.drawutilssvg = require(\"./utils/helpers/drawutilssvg.js\").drawutilssvg;\nglobalThis.geomutils = require(\"./geomutils.js\").geomutils;\nglobalThis.PlotBoilerplate = require(\"./PlotBoilerplate.js\").PlotBoilerplate;\n\n"],"sourceRoot":""}